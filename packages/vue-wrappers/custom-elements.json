{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "asd.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "gulpfile.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "gulp-tasks/build.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "gulp-tasks/clean.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "gulp-tasks/config.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "gulp-tasks/test.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "CDSAccordion",
          "declaration": {
            "name": "default",
            "module": "./components/accordion/accordion"
          }
        },
        {
          "kind": "js",
          "name": "CDSAccordionItem",
          "declaration": {
            "name": "default",
            "module": "./components/accordion/accordion-item"
          }
        },
        {
          "kind": "js",
          "name": "CDSAISkeletonIcon",
          "declaration": {
            "name": "default",
            "module": "./components/ai-skeleton/ai-skeleton-icon"
          }
        },
        {
          "kind": "js",
          "name": "CDSAISkeletonPlaceholder",
          "declaration": {
            "name": "default",
            "module": "./components/ai-skeleton/ai-skeleton-placeholder"
          }
        },
        {
          "kind": "js",
          "name": "CDSAISkeletonText",
          "declaration": {
            "name": "default",
            "module": "./components/ai-skeleton/ai-skeleton-text"
          }
        },
        {
          "kind": "js",
          "name": "CDSButton",
          "declaration": {
            "name": "default",
            "module": "./components/button/button"
          }
        },
        {
          "kind": "js",
          "name": "CDSButtonSkeleton",
          "declaration": {
            "name": "default",
            "module": "./components/button/button-skeleton"
          }
        },
        {
          "kind": "js",
          "name": "CDSBreadcrumb",
          "declaration": {
            "name": "default",
            "module": "./components/breadcrumb/breadcrumb"
          }
        },
        {
          "kind": "js",
          "name": "CDSBreadcrumbItem",
          "declaration": {
            "name": "default",
            "module": "./components/breadcrumb/breadcrumb-item"
          }
        },
        {
          "kind": "js",
          "name": "CDSBreadcrumbLink",
          "declaration": {
            "name": "default",
            "module": "./components/breadcrumb/breadcrumb-link"
          }
        },
        {
          "kind": "js",
          "name": "CDSChatButton",
          "declaration": {
            "name": "default",
            "module": "./components/chat-button/chat-button"
          }
        },
        {
          "kind": "js",
          "name": "CDSCheckbox",
          "declaration": {
            "name": "default",
            "module": "./components/checkbox/checkbox"
          }
        },
        {
          "kind": "js",
          "name": "CDSCodeSnippet",
          "declaration": {
            "name": "default",
            "module": "./components/code-snippet/code-snippet"
          }
        },
        {
          "kind": "js",
          "name": "CDSCodeSnippetSkeleton",
          "declaration": {
            "name": "default",
            "module": "./components/code-snippet/code-snippet-skeleton"
          }
        },
        {
          "kind": "js",
          "name": "CDSComboBox",
          "declaration": {
            "name": "default",
            "module": "./components/combo-box/combo-box"
          }
        },
        {
          "kind": "js",
          "name": "CDSComboBoxItem",
          "declaration": {
            "name": "default",
            "module": "./components/combo-box/combo-box-item"
          }
        },
        {
          "kind": "js",
          "name": "CDSContentSwitcher",
          "declaration": {
            "name": "default",
            "module": "./components/content-switcher/content-switcher"
          }
        },
        {
          "kind": "js",
          "name": "CDSContentSwitcherItem",
          "declaration": {
            "name": "default",
            "module": "./components/content-switcher/content-switcher-item"
          }
        },
        {
          "kind": "js",
          "name": "CDSCopyButton",
          "declaration": {
            "name": "default",
            "module": "./components/copy-button/copy-button"
          }
        },
        {
          "kind": "js",
          "name": "CDSFileUploader",
          "declaration": {
            "name": "default",
            "module": "./components/file-uploader/file-uploader"
          }
        },
        {
          "kind": "js",
          "name": "CDSFileUploaderButton",
          "declaration": {
            "name": "default",
            "module": "./components/file-uploader/file-uploader-button"
          }
        },
        {
          "kind": "js",
          "name": "CDSFileUploaderDropContainer",
          "declaration": {
            "name": "default",
            "module": "./components/file-uploader/file-uploader-drop-container"
          }
        },
        {
          "kind": "js",
          "name": "CDSFileUploaderItem",
          "declaration": {
            "name": "default",
            "module": "./components/file-uploader/file-uploader-item"
          }
        },
        {
          "kind": "js",
          "name": "CDSFileUploaderSkeleton",
          "declaration": {
            "name": "default",
            "module": "./components/file-uploader/file-uploader-skeleton"
          }
        },
        {
          "kind": "js",
          "name": "CDSTable",
          "declaration": {
            "name": "default",
            "module": "./components/data-table/table"
          }
        },
        {
          "kind": "js",
          "name": "CDSTableBatchActions",
          "declaration": {
            "name": "default",
            "module": "./components/data-table/table-batch-actions"
          }
        },
        {
          "kind": "js",
          "name": "CDSTableBody",
          "declaration": {
            "name": "default",
            "module": "./components/data-table/table-body"
          }
        },
        {
          "kind": "js",
          "name": "CDSTableCell",
          "declaration": {
            "name": "default",
            "module": "./components/data-table/table-cell"
          }
        },
        {
          "kind": "js",
          "name": "CDSTableCellContent",
          "declaration": {
            "name": "default",
            "module": "./components/data-table/table-cell-content"
          }
        },
        {
          "kind": "js",
          "name": "CDSTableHead",
          "declaration": {
            "name": "default",
            "module": "./components/data-table/table-head"
          }
        },
        {
          "kind": "js",
          "name": "CDSTableHeaderTitle",
          "declaration": {
            "name": "default",
            "module": "./components/data-table/table-header-title"
          }
        },
        {
          "kind": "js",
          "name": "CDSTableHeadDescription",
          "declaration": {
            "name": "default",
            "module": "./components/data-table/table-header-description"
          }
        },
        {
          "kind": "js",
          "name": "CDSTableHeaderCell",
          "declaration": {
            "name": "default",
            "module": "./components/data-table/table-header-cell"
          }
        },
        {
          "kind": "js",
          "name": "CDSTableHeaderRow",
          "declaration": {
            "name": "default",
            "module": "./components/data-table/table-header-row"
          }
        },
        {
          "kind": "js",
          "name": "CDSTableRow",
          "declaration": {
            "name": "default",
            "module": "./components/data-table/table-row"
          }
        },
        {
          "kind": "js",
          "name": "CDSTableSkeleton",
          "declaration": {
            "name": "default",
            "module": "./components/data-table/table-skeleton"
          }
        },
        {
          "kind": "js",
          "name": "CDSTableToolbarContent",
          "declaration": {
            "name": "default",
            "module": "./components/data-table/table-toolbar-content"
          }
        },
        {
          "kind": "js",
          "name": "CDSTableToolbarSearch",
          "declaration": {
            "name": "default",
            "module": "./components/data-table/table-toolbar-search"
          }
        },
        {
          "kind": "js",
          "name": "CDSDatePicker",
          "declaration": {
            "name": "default",
            "module": "./components/date-picker/date-picker"
          }
        },
        {
          "kind": "js",
          "name": "CDSDatePickerInput",
          "declaration": {
            "name": "default",
            "module": "./components/date-picker/date-picker-input"
          }
        },
        {
          "kind": "js",
          "name": "CDSDatePickerInputSkeleton",
          "declaration": {
            "name": "default",
            "module": "./components/date-picker/date-picker-input-skeleton"
          }
        },
        {
          "kind": "js",
          "name": "CDSDropdown",
          "declaration": {
            "name": "default",
            "module": "./components/dropdown/dropdown"
          }
        },
        {
          "kind": "js",
          "name": "CDSDropdownItem",
          "declaration": {
            "name": "default",
            "module": "./components/dropdown/dropdown-item"
          }
        },
        {
          "kind": "js",
          "name": "CDSDropdownSkeleton",
          "declaration": {
            "name": "default",
            "module": "./components/dropdown/dropdown-skeleton"
          }
        },
        {
          "kind": "js",
          "name": "CDSFormItem",
          "declaration": {
            "name": "default",
            "module": "./components/form/form-item"
          }
        },
        {
          "kind": "js",
          "name": "CDSFormGroup",
          "declaration": {
            "name": "default",
            "module": "./components/form-group/form-group"
          }
        },
        {
          "kind": "js",
          "name": "CDSIconButton",
          "declaration": {
            "name": "default",
            "module": "./components/icon-button/icon-button"
          }
        },
        {
          "kind": "js",
          "name": "CDSTextInput",
          "declaration": {
            "name": "default",
            "module": "./components/text-input/text-input"
          }
        },
        {
          "kind": "js",
          "name": "CDSTextInputSkeleton",
          "declaration": {
            "name": "default",
            "module": "./components/text-input/text-input-skeleton"
          }
        },
        {
          "kind": "js",
          "name": "CDSInlineLoading",
          "declaration": {
            "name": "default",
            "module": "./components/inline-loading/inline-loading"
          }
        },
        {
          "kind": "js",
          "name": "CDSLink",
          "declaration": {
            "name": "default",
            "module": "./components/link/link"
          }
        },
        {
          "kind": "js",
          "name": "CDSListItem",
          "declaration": {
            "name": "default",
            "module": "./components/list/list-item"
          }
        },
        {
          "kind": "js",
          "name": "CDSOrderedList",
          "declaration": {
            "name": "default",
            "module": "./components/list/ordered-list"
          }
        },
        {
          "kind": "js",
          "name": "CDSUnorderedList",
          "declaration": {
            "name": "default",
            "module": "./components/list/unordered-list"
          }
        },
        {
          "kind": "js",
          "name": "CDSLoading",
          "declaration": {
            "name": "default",
            "module": "./components/loading/loading"
          }
        },
        {
          "kind": "js",
          "name": "CDSModal",
          "declaration": {
            "name": "default",
            "module": "./components/modal/modal"
          }
        },
        {
          "kind": "js",
          "name": "CDSModalBody",
          "declaration": {
            "name": "default",
            "module": "./components/modal/modal-body"
          }
        },
        {
          "kind": "js",
          "name": "CDSModalBodyContent",
          "declaration": {
            "name": "default",
            "module": "./components/modal/modal-body-content"
          }
        },
        {
          "kind": "js",
          "name": "CDSModalCloseButton",
          "declaration": {
            "name": "default",
            "module": "./components/modal/modal-close-button"
          }
        },
        {
          "kind": "js",
          "name": "CDSModalFooter",
          "declaration": {
            "name": "default",
            "module": "./components/modal/modal-footer"
          }
        },
        {
          "kind": "js",
          "name": "CDSModalHeader",
          "declaration": {
            "name": "default",
            "module": "./components/modal/modal-header"
          }
        },
        {
          "kind": "js",
          "name": "CDSModalHeading",
          "declaration": {
            "name": "default",
            "module": "./components/modal/modal-heading"
          }
        },
        {
          "kind": "js",
          "name": "CDSModalLabel",
          "declaration": {
            "name": "default",
            "module": "./components/modal/modal-label"
          }
        },
        {
          "kind": "js",
          "name": "CDSMultiSelect",
          "declaration": {
            "name": "default",
            "module": "./components/multi-select/multi-select"
          }
        },
        {
          "kind": "js",
          "name": "CDSMultiSelectItem",
          "declaration": {
            "name": "default",
            "module": "./components/multi-select/multi-select-item"
          }
        },
        {
          "kind": "js",
          "name": "CDSActionableNotification",
          "declaration": {
            "name": "default",
            "module": "./components/notification/actionable-notification"
          }
        },
        {
          "kind": "js",
          "name": "CDSActionableNotificationButton",
          "declaration": {
            "name": "default",
            "module": "./components/notification/actionable-notification-button"
          }
        },
        {
          "kind": "js",
          "name": "CDSInlineNotification",
          "declaration": {
            "name": "default",
            "module": "./components/notification/inline-notification"
          }
        },
        {
          "kind": "js",
          "name": "CDSToastNotification",
          "declaration": {
            "name": "default",
            "module": "./components/notification/toast-notification"
          }
        },
        {
          "kind": "js",
          "name": "CDSNumberInput",
          "declaration": {
            "name": "default",
            "module": "./components/number-input/number-input"
          }
        },
        {
          "kind": "js",
          "name": "CDSNumberInputSkeleton",
          "declaration": {
            "name": "default",
            "module": "./components/number-input/number-input-skeleton"
          }
        },
        {
          "kind": "js",
          "name": "CDSTextarea",
          "declaration": {
            "name": "default",
            "module": "./components/textarea/textarea"
          }
        },
        {
          "kind": "js",
          "name": "CDSTextareaSkeleton",
          "declaration": {
            "name": "default",
            "module": "./components/textarea/textarea-skeleton"
          }
        },
        {
          "kind": "js",
          "name": "CDSOverflowMenu",
          "declaration": {
            "name": "default",
            "module": "./components/overflow-menu/overflow-menu"
          }
        },
        {
          "kind": "js",
          "name": "CDSOverflowMenuBody",
          "declaration": {
            "name": "default",
            "module": "./components/overflow-menu/overflow-menu-body"
          }
        },
        {
          "kind": "js",
          "name": "CDSOverflowMenuItem",
          "declaration": {
            "name": "default",
            "module": "./components/overflow-menu/overflow-menu-item"
          }
        },
        {
          "kind": "js",
          "name": "CDSPagination",
          "declaration": {
            "name": "default",
            "module": "./components/pagination/pagination"
          }
        },
        {
          "kind": "js",
          "name": "CDSProgressBar",
          "declaration": {
            "name": "default",
            "module": "./components/progress-bar/progress-bar"
          }
        },
        {
          "kind": "js",
          "name": "CDSProgressIndicator",
          "declaration": {
            "name": "default",
            "module": "./components/progress-indicator/progress-indicator"
          }
        },
        {
          "kind": "js",
          "name": "CDSProgressIndicatorSkeleton",
          "declaration": {
            "name": "default",
            "module": "./components/progress-indicator/progress-indicator-skeleton"
          }
        },
        {
          "kind": "js",
          "name": "CDSProgressStepSkeleton",
          "declaration": {
            "name": "default",
            "module": "./components/progress-indicator/progress-step-skeleton"
          }
        },
        {
          "kind": "js",
          "name": "CDSProgressStep",
          "declaration": {
            "name": "default",
            "module": "./components/progress-indicator/progress-step"
          }
        },
        {
          "kind": "js",
          "name": "CDSRadioButton",
          "declaration": {
            "name": "default",
            "module": "./components/radio-button/radio-button"
          }
        },
        {
          "kind": "js",
          "name": "CDSRadioButtonGroup",
          "declaration": {
            "name": "default",
            "module": "./components/radio-button/radio-button-group"
          }
        },
        {
          "kind": "js",
          "name": "CDSSearch",
          "declaration": {
            "name": "default",
            "module": "./components/search/search"
          }
        },
        {
          "kind": "js",
          "name": "CDSSearchSkeleton",
          "declaration": {
            "name": "default",
            "module": "./components/search/search-skeleton"
          }
        },
        {
          "kind": "js",
          "name": "CDSSkeletonIcon",
          "declaration": {
            "name": "default",
            "module": "./components/skeleton-icon/skeleton-icon"
          }
        },
        {
          "kind": "js",
          "name": "CDSSkeletonPlaceholder",
          "declaration": {
            "name": "default",
            "module": "./components/skeleton-placeholder/skeleton-placeholder"
          }
        },
        {
          "kind": "js",
          "name": "CDSSkeletonText",
          "declaration": {
            "name": "default",
            "module": "./components/skeleton-text/skeleton-text"
          }
        },
        {
          "kind": "js",
          "name": "CDSSlider",
          "declaration": {
            "name": "default",
            "module": "./components/slider/slider"
          }
        },
        {
          "kind": "js",
          "name": "CDSSliderInput",
          "declaration": {
            "name": "default",
            "module": "./components/slider/slider-input"
          }
        },
        {
          "kind": "js",
          "name": "CDSSliderSkeleton",
          "declaration": {
            "name": "default",
            "module": "./components/slider/slider-skeleton"
          }
        },
        {
          "kind": "js",
          "name": "CDSStructuredList",
          "declaration": {
            "name": "default",
            "module": "./components/structured-list/structured-list"
          }
        },
        {
          "kind": "js",
          "name": "CDSStructuredListBody",
          "declaration": {
            "name": "default",
            "module": "./components/structured-list/structured-list-body"
          }
        },
        {
          "kind": "js",
          "name": "CDSStructuredListHead",
          "declaration": {
            "name": "default",
            "module": "./components/structured-list/structured-list-head"
          }
        },
        {
          "kind": "js",
          "name": "CDSStructuredListHeaderRow",
          "declaration": {
            "name": "default",
            "module": "./components/structured-list/structured-list-header-row"
          }
        },
        {
          "kind": "js",
          "name": "CDSStructuredListRow",
          "declaration": {
            "name": "default",
            "module": "./components/structured-list/structured-list-row"
          }
        },
        {
          "kind": "js",
          "name": "CDSStructuredListHeaderCellSkeleton",
          "declaration": {
            "name": "default",
            "module": "./components/structured-list/structured-list-header-cell-skeleton"
          }
        },
        {
          "kind": "js",
          "name": "CDSTabs",
          "declaration": {
            "name": "default",
            "module": "./components/tabs/tabs"
          }
        },
        {
          "kind": "js",
          "name": "CDSTab",
          "declaration": {
            "name": "default",
            "module": "./components/tabs/tab"
          }
        },
        {
          "kind": "js",
          "name": "CDSTabsSkeleton",
          "declaration": {
            "name": "default",
            "module": "./components/tabs/tabs-skeleton"
          }
        },
        {
          "kind": "js",
          "name": "CDSTabSkeleton",
          "declaration": {
            "name": "default",
            "module": "./components/tabs/tab-skeleton"
          }
        },
        {
          "kind": "js",
          "name": "CDSTag",
          "declaration": {
            "name": "default",
            "module": "./components/tag/tag"
          }
        },
        {
          "kind": "js",
          "name": "CDSSkipToContent",
          "declaration": {
            "name": "default",
            "module": "./components/skip-to-content/skip-to-content"
          }
        },
        {
          "kind": "js",
          "name": "CDSTile",
          "declaration": {
            "name": "default",
            "module": "./components/tile/tile"
          }
        },
        {
          "kind": "js",
          "name": "CDSClickableTile",
          "declaration": {
            "name": "default",
            "module": "./components/tile/clickable-tile"
          }
        },
        {
          "kind": "js",
          "name": "CDSExpandableTile",
          "declaration": {
            "name": "default",
            "module": "./components/tile/expandable-tile"
          }
        },
        {
          "kind": "js",
          "name": "CDSRadioTile",
          "declaration": {
            "name": "default",
            "module": "./components/tile/radio-tile"
          }
        },
        {
          "kind": "js",
          "name": "CDSSelectableTile",
          "declaration": {
            "name": "default",
            "module": "./components/tile/selectable-tile"
          }
        },
        {
          "kind": "js",
          "name": "CDSTileGroup",
          "declaration": {
            "name": "default",
            "module": "./components/tile/tile-group"
          }
        },
        {
          "kind": "js",
          "name": "CDSToggle",
          "declaration": {
            "name": "default",
            "module": "./components/toggle/toggle"
          }
        },
        {
          "kind": "js",
          "name": "CDSTooltip",
          "declaration": {
            "name": "default",
            "module": "./components/tooltip/tooltip"
          }
        },
        {
          "kind": "js",
          "name": "CDSTooltipDefinition",
          "declaration": {
            "name": "default",
            "module": "./components/toggle-tip/toggletip"
          }
        },
        {
          "kind": "js",
          "name": "CDSHeader",
          "declaration": {
            "name": "default",
            "module": "./components/ui-shell/header"
          }
        },
        {
          "kind": "js",
          "name": "CDSHeaderMenu",
          "declaration": {
            "name": "default",
            "module": "./components/ui-shell/header-menu"
          }
        },
        {
          "kind": "js",
          "name": "CDSHeaderMenuButton",
          "declaration": {
            "name": "default",
            "module": "./components/ui-shell/header-menu-button"
          }
        },
        {
          "kind": "js",
          "name": "CDSHeaderMenuItem",
          "declaration": {
            "name": "default",
            "module": "./components/ui-shell/header-menu-item"
          }
        },
        {
          "kind": "js",
          "name": "CDSHeaderName",
          "declaration": {
            "name": "default",
            "module": "./components/ui-shell/header-name"
          }
        },
        {
          "kind": "js",
          "name": "CDSHeaderNav",
          "declaration": {
            "name": "default",
            "module": "./components/ui-shell/header-nav"
          }
        },
        {
          "kind": "js",
          "name": "CDSHeaderNavItem",
          "declaration": {
            "name": "default",
            "module": "./components/ui-shell/header-nav-item"
          }
        },
        {
          "kind": "js",
          "name": "CDSHeaderSideNavItems",
          "declaration": {
            "name": "default",
            "module": "./components/ui-shell/header-side-nav-items"
          }
        },
        {
          "kind": "js",
          "name": "CDSHeaderPanel",
          "declaration": {
            "name": "default",
            "module": "./components/ui-shell/header-panel"
          }
        },
        {
          "kind": "js",
          "name": "CDSSideNav",
          "declaration": {
            "name": "default",
            "module": "./components/ui-shell/side-nav"
          }
        },
        {
          "kind": "js",
          "name": "CDSSideNavItems",
          "declaration": {
            "name": "default",
            "module": "./components/ui-shell/side-nav-items"
          }
        },
        {
          "kind": "js",
          "name": "CDSSideNavLink",
          "declaration": {
            "name": "default",
            "module": "./components/ui-shell/side-nav-link"
          }
        },
        {
          "kind": "js",
          "name": "CDSSideNavMenu",
          "declaration": {
            "name": "default",
            "module": "./components/ui-shell/side-nav-menu"
          }
        },
        {
          "kind": "js",
          "name": "CDSSideNavMenuItem",
          "declaration": {
            "name": "default",
            "module": "./components/ui-shell/side-nav-menu-item"
          }
        },
        {
          "kind": "js",
          "name": "CDSSwitcher",
          "declaration": {
            "name": "default",
            "module": "./components/ui-shell/switcher"
          }
        },
        {
          "kind": "js",
          "name": "CDSSwitcherItem",
          "declaration": {
            "name": "default",
            "module": "./components/ui-shell/switcher-item"
          }
        },
        {
          "kind": "js",
          "name": "CDSSwitcherDivider",
          "declaration": {
            "name": "default",
            "module": "./components/ui-shell/switcher-divider"
          }
        },
        {
          "kind": "js",
          "name": "CDSStack",
          "declaration": {
            "name": "default",
            "module": "./components/stack/stack"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "tests/karma-setup-renderroot.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/karma-test-shim.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/karma.conf.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tools/babel-plugin-create-react-custom-element-type-def.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tools/babel-plugin-create-react-custom-element-type.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tools/babel-plugin-resource-cjs-paths.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tools/babel-plugin-resource-js-paths.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tools/check-license.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tools/css-result-loader.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tools/deep-replace.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tools/fix-carbon-sass-imports.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tools/get-rollup-config.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tools/license-text.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tools/license.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tools/postcss-fix-host-pseudo.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tools/rollup-plugin-icons.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tools/rollup-plugin-license.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tools/rollup-plugin-lit-scss.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tools/svg-result-carbon-icon-loader.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tools/svg-result-carbon-icon.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "gulp-tasks/build/dist.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "gulp-tasks/build/modules.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "gulp-tasks/build/sass-cdn.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "gulp-tasks/build/sass.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/globals/settings.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "prefix",
          "type": {
            "text": "string"
          },
          "default": "'cds'"
        },
        {
          "kind": "variable",
          "name": "selectorTabbable",
          "default": "` a[href], area[href], input:not([disabled]):not([tabindex='-1']), button:not([disabled]):not([tabindex='-1']),select:not([disabled]):not([tabindex='-1']), textarea:not([disabled]):not([tabindex='-1']), iframe, object, embed, *[tabindex]:not([tabindex='-1']), *[contenteditable=true], ${prefix}-accordion-item, ${prefix}-button, ${prefix}-breadcrumb-link, ${prefix}-checkbox, ${prefix}-code-snippet, ${prefix}-combo-box, ${prefix}-content-switcher-item, ${prefix}-copy-button, ${prefix}-table-header-row, ${prefix}-table-row, ${prefix}-table-toolbar-search, ${prefix}-date-picker-input, ${prefix}-dropdown, ${prefix}-input, ${prefix}-link, ${prefix}-number-input, ${prefix}-modal, ${prefix}-modal-close-button, ${prefix}-multi-select, ${prefix}-inline-notification, ${prefix}-toast-notification, ${prefix}-overflow-menu, ${prefix}-overflow-menu-item, ${prefix}-page-sizes-select, ${prefix}-pages-select, ${prefix}-progress-step, ${prefix}-radio-button, ${prefix}-search, ${prefix}-slider, ${prefix}-slider-input, ${prefix}-structured-list, ${prefix}-tab, ${prefix}-filter-tag, ${prefix}-textarea, ${prefix}-text-input, ${prefix}-clickable-tile, ${prefix}-expandable-tile, ${prefix}-radio-tile, ${prefix}-selectable-tile, ${prefix}-toggle, ${prefix}-tooltip, ${prefix}-tooltip-definition, ${prefix}-tooltip-icon, ${prefix}-header-menu, ${prefix}-header-menu-button, ${prefix}-header-menu-item, ${prefix}-header-name, ${prefix}-header-nav-item, ${prefix}-side-nav-link, ${prefix}-side-nav-menu, ${prefix}-side-nav-menu-item `",
          "description": "A selector selecting tabbable nodes.\nBorrowed from `carbon-angular`. tabbable === focusable."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "prefix",
          "declaration": {
            "name": "prefix",
            "module": "src/globals/settings.ts"
          }
        },
        {
          "kind": "js",
          "name": "selectorTabbable",
          "declaration": {
            "name": "selectorTabbable",
            "module": "src/globals/settings.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/globals/shared-enums.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/polyfills/element-closest.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/polyfills/element-matches.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/polyfills/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/polyfills/toggle-attribute.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/polyfills/toggle-class.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/exec.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/replace-dependencies.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/accordion_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/button_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/checkbox_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/code-snippet_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/combo-box_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/content-switcher_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/copy-button_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/data-table_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/date-picker_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/dropdown_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/file-uploader_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/inline-loading_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/link_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/loading_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/modal_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/multi-select_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/notification_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/number-input_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/overflow-menu_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/pagination_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/progress-bar_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/progress-indicator_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/radio-button_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/search_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/select_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/slider_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/structured-list_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/tabs_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/tag_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/text-input_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/textarea_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/tile_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/toggle_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/tooltip_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/spec/ui-shell_spec.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/utils/event-manager.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "EventManager",
          "members": [
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Handle[]"
              },
              "privacy": "private",
              "default": "[]",
              "description": "The handles of registered event listeners."
            },
            {
              "kind": "method",
              "name": "on",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "EventTarget"
                  },
                  "description": "The DOM element."
                },
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  },
                  "description": "The event name."
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "CustomEventListener"
                  },
                  "description": "The event handler."
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  },
                  "description": "An options object that specifies characteristics about the event listener."
                }
              ],
              "description": "Attaches and registers an event listener.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "on",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "EventTarget"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "listener",
                  "type": {
                    "text": "(this: EventTarget, ev: HTMLElementEventMap[K]) => any"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "boolean | AddEventListenerOptions"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "reset",
              "description": "Releases all registered event listeners."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "EventManager",
            "module": "tests/utils/event-manager.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "tests/utils/snapshot.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/react-ssr/app.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "gulp-tasks/build/modules/css.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "gulp-tasks/build/modules/icon-types.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "gulp-tasks/build/modules/icons.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "gulp-tasks/build/modules/react-defs.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "gulp-tasks/build/modules/react-types.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "gulp-tasks/build/modules/react.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "gulp-tasks/build/modules/scripts-node.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "gulp-tasks/build/modules/scripts.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "gulp-tasks/build/modules/types.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/accordion/accordion-item-skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Skeleton of accordion item.",
          "name": "CDSAccordionItemSkeleton",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSAccordionItemSkeleton",
            "module": "src/components/accordion/accordion-item-skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/accordion/accordion-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Accordion item.",
          "name": "CDSAccordionItem",
          "cssParts": [
            {
              "description": "The expando button.",
              "name": "expando"
            },
            {
              "description": "The expando icon.",
              "name": "expando-icon"
            },
            {
              "description": "The title.",
              "name": "title"
            },
            {
              "description": "The content.",
              "name": "content"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_currentBreakpoint",
              "type": {
                "text": "ACCORDION_ITEM_BREAKPOINT | undefined"
              },
              "privacy": "private",
              "description": "The current breakpoint."
            },
            {
              "kind": "field",
              "name": "_hObserveResize",
              "type": {
                "text": "Handle | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "The handle for observing resize of the parent element of this element."
            },
            {
              "kind": "method",
              "name": "_handleUserInitiatedToggle",
              "privacy": "private",
              "parameters": [
                {
                  "name": "open",
                  "default": "!this.open",
                  "description": "The new open state."
                }
              ],
              "description": "Handles user-initiated toggle request of this accordion item."
            },
            {
              "kind": "method",
              "name": "_handleClickExpando",
              "privacy": "private",
              "description": "Handler for the `click` event on the expando button."
            },
            {
              "kind": "field",
              "name": "_handleKeydownExpando",
              "privacy": "private",
              "description": "Handler for the `keydown` event on the expando button."
            },
            {
              "kind": "field",
              "name": "_resizeObserver",
              "privacy": "private",
              "default": "new ResizeObserver( (records: ResizeObserverEntry[]) => { const { width } = records[records.length - 1].contentRect; const { _sizesBreakpoints: sizesBreakpoints } = this .constructor as typeof CDSAccordionItem; this._currentBreakpoint = Object.keys(sizesBreakpoints) .sort((lhs, rhs) => sizesBreakpoints[rhs] - sizesBreakpoints[lhs]) .find( (size) => width >= sizesBreakpoints[size] ) as ACCORDION_ITEM_BREAKPOINT; this.requestUpdate(); } )",
              "description": "The `ResizeObserver` instance for observing element resizes for re-positioning floating menu position."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the accordion item should be disabled."
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the accordion item should be open."
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The title text."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "_classesBreakpoints",
              "static": true,
              "description": "The CSS classes for breakpoints.",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_sizesBreakpoints",
              "static": true,
              "description": "The breakpoints.",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventBeforeToggle",
              "static": true,
              "description": "The name of the custom event fired before this accordion item is being toggled upon a user gesture.\nCancellation of this event stops the user-initiated action of toggling this accordion item.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventToggle",
              "static": true,
              "description": "The name of the custom event fired after this accordion item is toggled upon a user gesture.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorAccordionContent",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The custom event fired before this accordion item is being toggled upon a user gesture. Cancellation of this event stops the user-initiated action of toggling this accordion item.",
              "name": "cds-accordion-item-beingtoggled"
            },
            {
              "description": "The custom event fired after this accordion item is toggled upon a user gesture.",
              "name": "cds-accordion-item-toggled"
            }
          ],
          "mixins": [
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-accordion-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ACCORDION_ITEM_BREAKPOINT",
          "declaration": {
            "name": "ACCORDION_ITEM_BREAKPOINT",
            "module": "src/components/accordion/accordion-item.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSAccordionItem",
            "module": "src/components/accordion/accordion-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/accordion/accordion-skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Skeleton of code snippet.",
          "name": "CDSAccordionSkeleton",
          "members": [
            {
              "kind": "field",
              "name": "alignment",
              "description": "Specify the alignment of the accordion heading title and chevron"
            },
            {
              "kind": "field",
              "name": "count",
              "type": {
                "text": "number"
              },
              "default": "4",
              "description": "Set number of items to render"
            },
            {
              "kind": "field",
              "name": "isFlush",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether Accordion text should be flush, default is false, does not work with align=\"start\""
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "`true` if the first accordion item should be open."
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selectorAccordionItemSkeletons",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSAccordionSkeleton",
            "module": "src/components/accordion/accordion-skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/accordion/accordion-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Skeleton",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/accordion/accordion-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Skeleton",
          "declaration": {
            "name": "Skeleton",
            "module": "src/components/accordion/accordion-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/accordion/accordion-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/accordion/accordion-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/accordion/accordion.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Accordion container.",
          "name": "CDSAccordion",
          "members": [
            {
              "kind": "field",
              "name": "size",
              "description": "Accordion size should be sm, md, lg."
            },
            {
              "kind": "field",
              "name": "alignment",
              "description": "Specify the alignment of the accordion heading title and chevron"
            },
            {
              "kind": "field",
              "name": "isFlush",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether Accordion text should be flush, default is false, does not work with align=\"start\""
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selectorAccordionItems",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-accordion",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ACCORDION_SIZE",
          "declaration": {
            "name": "ACCORDION_SIZE",
            "module": "src/components/accordion/accordion.ts"
          }
        },
        {
          "kind": "js",
          "name": "ACCORDION_ALIGNMENT",
          "declaration": {
            "name": "ACCORDION_ALIGNMENT",
            "module": "src/components/accordion/accordion.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSAccordion",
            "module": "src/components/accordion/accordion.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/accordion/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/accordion/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ai-skeleton/ai-skeleton-icon-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/ai-skeleton/ai-skeleton-icon-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/ai-skeleton/ai-skeleton-icon-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ai-skeleton/ai-skeleton-icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "AI skeleton icon.",
          "name": "CDSAISkeletonIcon",
          "members": [
            {
              "kind": "field",
              "name": "customStyles",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Custom styles to apply to skeleton icon"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-ai-skeleton-icon",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSAISkeletonIcon",
            "module": "src/components/ai-skeleton/ai-skeleton-icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ai-skeleton/ai-skeleton-placeholder-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/ai-skeleton/ai-skeleton-placeholder-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/ai-skeleton/ai-skeleton-placeholder-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ai-skeleton/ai-skeleton-placeholder.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "AI skeleton placeholder.",
          "name": "CDSAISkeletonPlaceholder",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-ai-skeleton-placeholder",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSAISkeletonPlaceholder",
            "module": "src/components/ai-skeleton/ai-skeleton-placeholder.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ai-skeleton/ai-skeleton-text-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/ai-skeleton/ai-skeleton-text-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/ai-skeleton/ai-skeleton-text-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/ai-skeleton/ai-skeleton-text-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ai-skeleton/ai-skeleton-text.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "AI skeleton text.",
          "name": "CDSAISkeletonText",
          "members": [
            {
              "kind": "field",
              "name": "heading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Generates skeleton text at a larger size."
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "string"
              },
              "default": "'100%'",
              "description": "width (in px or %) of single line of text or max-width of paragraph lines"
            },
            {
              "kind": "field",
              "name": "paragraph",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "will generate multiple lines of text"
            },
            {
              "kind": "field",
              "name": "lineCount",
              "type": {
                "text": "number"
              },
              "default": "3",
              "description": "the number of lines in a paragraph"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-ai-skeleton-text",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSAISkeletonText",
            "module": "src/components/ai-skeleton/ai-skeleton-text.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ai-skeleton/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/breadcrumb/breadcrumb-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Breadcrumb item.",
          "name": "CDSBreadcrumbItem",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-breadcrumb-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSBreadcrumbItem",
            "module": "src/components/breadcrumb/breadcrumb-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/breadcrumb/breadcrumb-link.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Link in breadcrumb.",
          "name": "CDSBreadcrumbLink",
          "members": [
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasIcon",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`true` if there is an icon.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "_linkNode",
              "type": {
                "text": "HTMLAnchorElement | HTMLParagraphElement | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "_classes",
              "privacy": "protected",
              "description": "The CSS class list for the link node.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "_",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "Handles `click` event on the `<a>`.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderInner",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderDisabledLink",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderLink",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the link should be disabled.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "description": "The default file name.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Link `href`.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "hreflang",
              "type": {
                "text": "string"
              },
              "description": "The language of what `href` points to.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the link should be inline.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "linkRole",
              "type": {
                "text": "string"
              },
              "description": "The a11y role for `<a>`.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "ping",
              "type": {
                "text": "string"
              },
              "description": "URLs to ping.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "description": "The link type.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "LINK_SIZE_TYPE"
              },
              "description": "Link size.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "string"
              },
              "description": "The link target.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "description": "MIME type of the `target`.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "visited",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the link has been visited.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            }
          ],
          "superclass": {
            "name": "CDSLink",
            "module": "/src/components/link/link"
          },
          "tagName": "cds-breadcrumb-link",
          "customElement": true,
          "cssParts": [
            {
              "description": "The link.",
              "name": "link",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSBreadcrumbLink",
            "module": "src/components/breadcrumb/breadcrumb-link.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/breadcrumb/breadcrumb-overflow-menu.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Overflow menu in breadcrumb.",
          "name": "CDSBreadcrumbOverflowMenu",
          "members": [
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            },
            {
              "kind": "field",
              "name": "_menuBody",
              "type": {
                "text": "CDSOverflowMenuBody | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "The menu body.",
              "inheritedFrom": {
                "name": "CDSOverflowMenu",
                "module": "src/components/overflow-menu/overflow-menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleUserInitiatedToggle",
              "privacy": "private",
              "description": "Handles user-initiated toggling of the menu.",
              "inheritedFrom": {
                "name": "CDSOverflowMenu",
                "module": "src/components/overflow-menu/overflow-menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleClickTrigger",
              "privacy": "private",
              "description": "Handles `click` event on the trigger button.",
              "inheritedFrom": {
                "name": "CDSOverflowMenu",
                "module": "src/components/overflow-menu/overflow-menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKeydownTrigger",
              "privacy": "private",
              "description": "Handles `keydown` event on the trigger button.",
              "inheritedFrom": {
                "name": "CDSOverflowMenu",
                "module": "src/components/overflow-menu/overflow-menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "dataTable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this tooltip is in a data table row",
              "inheritedFrom": {
                "name": "CDSOverflowMenu",
                "module": "src/components/overflow-menu/overflow-menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this overflow menu should be disabled.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "flipped",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this overflow menu body should be flipped.",
              "inheritedFrom": {
                "name": "CDSOverflowMenu",
                "module": "src/components/overflow-menu/overflow-menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the dropdown should be open.",
              "inheritedFrom": {
                "name": "CDSOverflowMenu",
                "module": "src/components/overflow-menu/overflow-menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "index",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Index (starting at 1) of overflow menu item to focus on open.",
              "inheritedFrom": {
                "name": "CDSOverflowMenu",
                "module": "src/components/overflow-menu/overflow-menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "string"
              },
              "default": "'md'",
              "description": "Overflow menu size.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "toolbarAction",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this menu is a toolbar action",
              "inheritedFrom": {
                "name": "CDSOverflowMenu",
                "module": "src/components/overflow-menu/overflow-menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "triggerPosition",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSOverflowMenu",
                "module": "src/components/overflow-menu/overflow-menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "CDSIconButton",
                "module": "src/components/icon-button/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "string"
              },
              "default": "'top'",
              "description": "Specify how the trigger should align with the tooltip",
              "inheritedFrom": {
                "name": "CDSIconButton",
                "module": "src/components/icon-button/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoalign",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether a auto align functionality should be applied",
              "inheritedFrom": {
                "name": "CDSIconButton",
                "module": "src/components/icon-button/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "closeOnActivation",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Determines whether the tooltip should close when inner content is activated (click, Enter or Space)",
              "inheritedFrom": {
                "name": "CDSIconButton",
                "module": "src/components/icon-button/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the tooltip should be open when it first renders",
              "inheritedFrom": {
                "name": "CDSIconButton",
                "module": "src/components/icon-button/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "enterDelayMs",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "Specify the duration in milliseconds to delay before displaying the tooltip",
              "inheritedFrom": {
                "name": "CDSIconButton",
                "module": "src/components/icon-button/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "leaveDelayMs",
              "type": {
                "text": "number"
              },
              "default": "300",
              "description": "Specify the duration in milliseconds to delay before hiding the tooltip",
              "inheritedFrom": {
                "name": "CDSIconButton",
                "module": "src/components/icon-button/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderTooltipContent",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "CDSIconButton",
                "module": "src/components/icon-button/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasIcon",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`true` if there is an icon.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleDisabledClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleOver",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleHoverOut",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocus",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocusout",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button should have input focus when the page loads.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "batchAction",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button is being used within a data table batch action toolbar",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "buttonClassName",
              "description": "Specify an optional className to be added to your Button",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "dangerDescriptor",
              "description": "Specify the message read by screen readers for the danger button variant",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "description": "The default file name, used if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasMainContent",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if there is a non-icon content.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Link `href`. If present, this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "hreflang",
              "type": {
                "text": "string"
              },
              "description": "The language of what `href` points to, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "isExpressive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if expressive theme enabled.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "isSelected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the Button is currently selected.\nOnly applies to the Ghost variant.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "Button kind.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "linkRole",
              "type": {
                "text": "string"
              },
              "default": "'button'",
              "description": "The a11y role for `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "openTooltip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to determine if tooltip is open.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "ping",
              "type": {
                "text": "string"
              },
              "description": "URLs to ping, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "description": "The link type, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "string"
              },
              "description": "The link target, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipAlignment",
              "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipPosition",
              "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipText",
              "type": {
                "text": "string"
              },
              "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Button type.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            }
          ],
          "superclass": {
            "name": "CDSOverflowMenu",
            "module": "/src/components/overflow-menu/overflow-menu"
          },
          "tagName": "cds-breadcrumb-overflow-menu",
          "customElement": true,
          "slots": [
            {
              "description": "The icon for the trigger button.",
              "name": "icon",
              "inheritedFrom": {
                "name": "CDSOverflowMenu",
                "module": "src/components/overflow-menu/overflow-menu.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The button.",
              "name": "button",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSBreadcrumbOverflowMenu",
            "module": "src/components/breadcrumb/breadcrumb-overflow-menu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/breadcrumb/breadcrumb-skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Skeleton of breadcrumb.",
          "name": "CDSBreadcrumbSkeleton",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSBreadcrumbSkeleton",
            "module": "src/components/breadcrumb/breadcrumb-skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/breadcrumb/breadcrumb-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "BreadcrumbWithOverflowMenu"
        },
        {
          "kind": "function",
          "name": "skeleton"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/breadcrumb/breadcrumb-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/breadcrumb/breadcrumb-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "BreadcrumbWithOverflowMenu",
          "declaration": {
            "name": "BreadcrumbWithOverflowMenu",
            "module": "src/components/breadcrumb/breadcrumb-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "skeleton",
          "declaration": {
            "name": "skeleton",
            "module": "src/components/breadcrumb/breadcrumb-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/breadcrumb/breadcrumb-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/breadcrumb/breadcrumb.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Breadcrumb.",
          "name": "CDSBreadcrumb",
          "members": [
            {
              "kind": "field",
              "name": "noTrailingSlash",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Optional prop to omit the trailing slash for the breadcrumbs"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-breadcrumb",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSBreadcrumb",
            "module": "src/components/breadcrumb/breadcrumb.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/breadcrumb/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button/button-set-base.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Button set without button checks",
          "name": "CDSButtonSetBase",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-button-set-base",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSButtonSetBase",
            "module": "src/components/button/button-set-base.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button/button-set.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Button set.",
          "name": "CDSButtonSet",
          "members": [
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handler for"
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSButtonSetBase",
                "module": "src/components/button/button-set-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectorItem",
              "static": true,
              "description": "A selector that will return the child items.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSButtonSetBase",
                "module": "src/components/button/button-set-base.ts"
              }
            }
          ],
          "superclass": {
            "name": "CDSButtonSetBase",
            "module": "/src/components/button/button-set-base"
          },
          "tagName": "cds-button-set",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSButtonSet",
            "module": "src/components/button/button-set.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button/button-skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Button skeleton.",
          "name": "CDSButtonSkeleton",
          "members": [
            {
              "kind": "method",
              "name": "_handleClickLinkSkeleton",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `click` event on the `<a>."
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasIcon",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`true` if there is an icon.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleDisabledClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleOver",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleHoverOut",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocus",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocusout",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button should have input focus when the page loads.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "batchAction",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button is being used within a data table batch action toolbar",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "buttonClassName",
              "description": "Specify an optional className to be added to your Button",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "dangerDescriptor",
              "description": "Specify the message read by screen readers for the danger button variant",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button should be disabled.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "description": "The default file name, used if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasMainContent",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if there is a non-icon content.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Link `href`. If present, this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "hreflang",
              "type": {
                "text": "string"
              },
              "description": "The language of what `href` points to, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "isExpressive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if expressive theme enabled.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "isSelected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the Button is currently selected.\nOnly applies to the Ghost variant.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "Button kind.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "linkRole",
              "type": {
                "text": "string"
              },
              "default": "'button'",
              "description": "The a11y role for `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "openTooltip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to determine if tooltip is open.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "ping",
              "type": {
                "text": "string"
              },
              "description": "URLs to ping, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "description": "The link type, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "string"
              },
              "default": "'lg'",
              "description": "Button size.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "string"
              },
              "description": "The link target, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipAlignment",
              "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipPosition",
              "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipText",
              "type": {
                "text": "string"
              },
              "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Button type.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            }
          ],
          "superclass": {
            "name": "CDSButton",
            "module": "/src/components/button/button"
          },
          "cssParts": [
            {
              "description": "The button.",
              "name": "button",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSButtonSkeleton",
            "module": "src/components/button/button-skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button/button-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "Danger",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "Ghost",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "IconButton",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "Secondary",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "SetOfButtons",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "skeleton"
        },
        {
          "kind": "function",
          "name": "Tertiary",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/button/button-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Danger",
          "declaration": {
            "name": "Danger",
            "module": "src/components/button/button-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Ghost",
          "declaration": {
            "name": "Ghost",
            "module": "src/components/button/button-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "IconButton",
          "declaration": {
            "name": "IconButton",
            "module": "src/components/button/button-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Secondary",
          "declaration": {
            "name": "Secondary",
            "module": "src/components/button/button-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "SetOfButtons",
          "declaration": {
            "name": "SetOfButtons",
            "module": "src/components/button/button-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "skeleton",
          "declaration": {
            "name": "skeleton",
            "module": "src/components/button/button-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Tertiary",
          "declaration": {
            "name": "Tertiary",
            "module": "src/components/button/button-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/button/button-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button/button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Button.",
          "name": "CDSButton",
          "cssParts": [
            {
              "description": "The button.",
              "name": "button"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_hasIcon",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`true` if there is an icon."
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event."
            },
            {
              "kind": "method",
              "name": "_handleDisabledClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_handleOver",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleHoverOut",
              "privacy": "private",
              "description": "Handles `keydown` event on this element."
            },
            {
              "kind": "field",
              "name": "_handleFocus",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close."
            },
            {
              "kind": "field",
              "name": "_handleFocusout",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close."
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button should have input focus when the page loads."
            },
            {
              "kind": "field",
              "name": "batchAction",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button is being used within a data table batch action toolbar"
            },
            {
              "kind": "field",
              "name": "buttonClassName",
              "description": "Specify an optional className to be added to your Button"
            },
            {
              "kind": "field",
              "name": "dangerDescriptor",
              "description": "Specify the message read by screen readers for the danger button variant"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button should be disabled."
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "description": "The default file name, used if this button is rendered as `<a>`."
            },
            {
              "kind": "field",
              "name": "hasMainContent",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if there is a non-icon content."
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Link `href`. If present, this button is rendered as `<a>`."
            },
            {
              "kind": "field",
              "name": "hreflang",
              "type": {
                "text": "string"
              },
              "description": "The language of what `href` points to, if this button is rendered as `<a>`."
            },
            {
              "kind": "field",
              "name": "isExpressive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if expressive theme enabled."
            },
            {
              "kind": "field",
              "name": "isSelected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the Button is currently selected.\nOnly applies to the Ghost variant."
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "Button kind."
            },
            {
              "kind": "field",
              "name": "linkRole",
              "type": {
                "text": "string"
              },
              "default": "'button'",
              "description": "The a11y role for `<a>`."
            },
            {
              "kind": "field",
              "name": "openTooltip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to determine if tooltip is open."
            },
            {
              "kind": "field",
              "name": "ping",
              "type": {
                "text": "string"
              },
              "description": "URLs to ping, if this button is rendered as `<a>`."
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "description": "The link type, if this button is rendered as `<a>`."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "string"
              },
              "default": "'lg'",
              "description": "Button size."
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "string"
              },
              "description": "The link target, if this button is rendered as `<a>`."
            },
            {
              "kind": "field",
              "name": "tooltipAlignment",
              "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end."
            },
            {
              "kind": "field",
              "name": "tooltipPosition",
              "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left."
            },
            {
              "kind": "field",
              "name": "tooltipText",
              "type": {
                "text": "string"
              },
              "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left."
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Button type."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            },
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BUTTON_KIND",
          "declaration": {
            "name": "BUTTON_KIND",
            "module": "src/components/button/button.ts"
          }
        },
        {
          "kind": "js",
          "name": "BUTTON_TYPE",
          "declaration": {
            "name": "BUTTON_TYPE",
            "module": "src/components/button/button.ts"
          }
        },
        {
          "kind": "js",
          "name": "BUTTON_SIZE",
          "declaration": {
            "name": "BUTTON_SIZE",
            "module": "src/components/button/button.ts"
          }
        },
        {
          "kind": "js",
          "name": "BUTTON_TOOLTIP_ALIGNMENT",
          "declaration": {
            "name": "BUTTON_TOOLTIP_ALIGNMENT",
            "module": "src/components/button/button.ts"
          }
        },
        {
          "kind": "js",
          "name": "BUTTON_TOOLTIP_POSITION",
          "declaration": {
            "name": "BUTTON_TOOLTIP_POSITION",
            "module": "src/components/button/button.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSButton",
            "module": "src/components/button/button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/chat-button/chat-button-skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Chat button skeleton.",
          "name": "CDSChatButtonSkeleton",
          "members": [
            {
              "kind": "field",
              "name": "size",
              "description": "Specify the size of the `ChatButtonSkeleton`, from the following list of sizes: 'sm', 'md', 'lg'"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-chat-button-skeleton",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CHAT_BUTTON_SIZE",
          "declaration": {
            "name": "CHAT_BUTTON_SIZE",
            "module": "src/components/chat-button/chat-button-skeleton.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSChatButtonSkeleton",
            "module": "src/components/chat-button/chat-button-skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/chat-button/chat-button-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/chat-button/chat-button-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/chat-button/chat-button-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/chat-button/chat-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Icon Button",
          "name": "CDSChatButton",
          "members": [
            {
              "kind": "field",
              "name": "_hasIcon",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`true` if there is an icon."
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button should be disabled."
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "Specify whether the `ChatButton` should be disabled"
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Chat button size."
            },
            {
              "kind": "field",
              "name": "isQuickAction",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the `ChatButton` should be rendered as a quick action button"
            },
            {
              "kind": "field",
              "name": "isSelected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the quick action `ChatButton` should be rendered as selected. This disables the input"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CHAT_BUTTON_SIZE",
          "declaration": {
            "name": "CHAT_BUTTON_SIZE",
            "module": "src/components/chat-button/chat-button.ts"
          }
        },
        {
          "kind": "js",
          "name": "CHAT_BUTTON_KIND",
          "declaration": {
            "name": "CHAT_BUTTON_KIND",
            "module": "src/components/chat-button/chat-button.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSChatButton",
            "module": "src/components/chat-button/chat-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/chat-button/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/chat-button/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/checkbox/checkbox-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Check box.",
          "name": "CDSCheckboxGroup",
          "cssParts": [
            {
              "description": "The checkbox.",
              "name": "input"
            },
            {
              "description": "The label.",
              "name": "label"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "ariaLabelledBy",
              "description": "fieldset `aria-labelledby`"
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Specify whether the form group is currently disabled"
            },
            {
              "kind": "field",
              "name": "helperText",
              "description": "Provide text for the form group for additional help"
            },
            {
              "kind": "field",
              "name": "invalid",
              "description": "Specify whether the form group is currently invalid"
            },
            {
              "kind": "field",
              "name": "invalidText",
              "description": "Provide the text that is displayed when the form group is in an invalid state"
            },
            {
              "kind": "field",
              "name": "legendId",
              "description": "Provide id for the fieldset <legend> which corresponds to the fieldset\n`aria-labelledby`"
            },
            {
              "kind": "field",
              "name": "legendText",
              "description": "Provide the text to be rendered inside of the fieldset <legend>"
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the CheckboxGroup should be read-only"
            },
            {
              "kind": "field",
              "name": "warn",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the form group is currently in warning state"
            },
            {
              "kind": "field",
              "name": "warnText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Provide the text that is displayed when the form group is in warning state"
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_hasSlug",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "description": "`true` if there is a slug."
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selectorCheckbox",
              "static": true,
              "description": "A selector that will return the checkboxes.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "slugItem",
              "static": true,
              "description": "A selector that will return the slug item.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "events": [
            {
              "description": "The custom event fired after this changebox changes its checked state.",
              "name": "cds-checkbox-changed"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-checkbox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSCheckboxGroup",
            "module": "src/components/checkbox/checkbox-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/checkbox/checkbox-skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Skeleton of number input.",
          "name": "CDSCheckboxSkeleton",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSCheckboxSkeleton",
            "module": "src/components/checkbox/checkbox-skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/checkbox/checkbox-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Skeleton"
        },
        {
          "kind": "function",
          "name": "Single"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/checkbox/checkbox-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Skeleton",
          "declaration": {
            "name": "Skeleton",
            "module": "src/components/checkbox/checkbox-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Single",
          "declaration": {
            "name": "Single",
            "module": "src/components/checkbox/checkbox-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/checkbox/checkbox-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/checkbox/checkbox-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/checkbox/checkbox.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Check box.",
          "name": "CDSCheckbox",
          "cssParts": [
            {
              "description": "The checkbox.",
              "name": "input"
            },
            {
              "description": "The label.",
              "name": "label"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_checkboxNode",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "privacy": "protected",
              "description": "Handles `click` event on the `<input>` in the shadow DOM."
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "Prevent checkbox state from updating when readonly"
            },
            {
              "kind": "method",
              "name": "_handleFormdata",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `formdata` event.",
              "inheritedFrom": {
                "name": "FormMixin",
                "module": "src/globals/mixins/form.ts"
              }
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the underlying input should be checked"
            },
            {
              "kind": "field",
              "name": "dataTable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify if checkbox is being used in a data table"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the Checkbox should be disabled"
            },
            {
              "kind": "field",
              "name": "helperText",
              "description": "Provide text for the form group for additional help"
            },
            {
              "kind": "field",
              "name": "hideCheckbox",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the checkbox should be present in the DOM,\nbut invisible and uninteractable. Used for data-table purposes."
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the label should be hidden, or not"
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the Checkbox is in an indeterminate state"
            },
            {
              "kind": "field",
              "name": "labelText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Provide a label to provide a description of the Checkbox input that you are\nexposing to the user"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The form name."
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the Checkbox is read-only"
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the Checkbox is currently invalid"
            },
            {
              "kind": "field",
              "name": "invalidText",
              "description": "Provide the text that is displayed when the Checkbox is in an invalid state"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Specify a title for the node for the Checkbox"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The value."
            },
            {
              "kind": "field",
              "name": "warn",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the Checkbox is in a warn state"
            },
            {
              "kind": "field",
              "name": "warnText",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Provide the text that is displayed when the Checkbox is in a warn state"
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event."
            },
            {
              "kind": "field",
              "name": "_hasSlug",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "description": "`true` if there is a slug."
            },
            {
              "kind": "method",
              "name": "updated"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "eventChange",
              "static": true,
              "description": "The name of the custom event fired after this changebox changes its checked state.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "slugItem",
              "static": true,
              "description": "A selector that will return the slug item.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hFormdata",
              "type": {
                "text": "Handle | null"
              },
              "default": "null",
              "description": "The handle for `formdata` event listener on the containing form.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormMixin",
                "module": "src/globals/mixins/form.ts"
              }
            }
          ],
          "events": [
            {
              "name": "eventChange",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The custom event fired after this changebox changes its checked state.",
              "name": "cds-checkbox-changed"
            }
          ],
          "mixins": [
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            },
            {
              "name": "FormMixin",
              "module": "/src/globals/mixins/form"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-checkbox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSCheckbox",
            "module": "src/components/checkbox/checkbox.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/checkbox/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/code-snippet/code-snippet-skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Skeleton of code snippet.",
          "name": "CDSCodeSnippetSkeleton",
          "members": [
            {
              "kind": "field",
              "name": "type",
              "description": "The type of code snippet. Corresponds to the attribute with the same name."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSCodeSnippetSkeleton",
            "module": "src/components/code-snippet/code-snippet-skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/code-snippet/code-snippet-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "inline"
        },
        {
          "kind": "function",
          "name": "inlineWithLayer"
        },
        {
          "kind": "function",
          "name": "multiline"
        },
        {
          "kind": "function",
          "name": "multilineWithLayer"
        },
        {
          "kind": "function",
          "name": "singleline"
        },
        {
          "kind": "function",
          "name": "singlelineWithLayer"
        },
        {
          "kind": "function",
          "name": "skeleton"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "inline",
          "declaration": {
            "name": "inline",
            "module": "src/components/code-snippet/code-snippet-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "inlineWithLayer",
          "declaration": {
            "name": "inlineWithLayer",
            "module": "src/components/code-snippet/code-snippet-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "multiline",
          "declaration": {
            "name": "multiline",
            "module": "src/components/code-snippet/code-snippet-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "multilineWithLayer",
          "declaration": {
            "name": "multilineWithLayer",
            "module": "src/components/code-snippet/code-snippet-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "singleline",
          "declaration": {
            "name": "singleline",
            "module": "src/components/code-snippet/code-snippet-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "singlelineWithLayer",
          "declaration": {
            "name": "singlelineWithLayer",
            "module": "src/components/code-snippet/code-snippet-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "skeleton",
          "declaration": {
            "name": "skeleton",
            "module": "src/components/code-snippet/code-snippet-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/code-snippet/code-snippet-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/code-snippet/code-snippet-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/code-snippet/code-snippet.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Basic code snippet.",
          "name": "CDSCodeSnippet",
          "members": [
            {
              "kind": "field",
              "name": "_expandedCode",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`true` to expand multi-line variant of code snippet."
            },
            {
              "kind": "field",
              "name": "_hObserveResize",
              "type": {
                "text": "Handle | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "The handle for observing resize of the parent element of this element."
            },
            {
              "kind": "field",
              "name": "_rowHeightInPixels",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "16",
              "description": "Row height in pixels"
            },
            {
              "kind": "field",
              "name": "_hasRightOverflow",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "description": "`true` if code-snippet has right overflow"
            },
            {
              "kind": "field",
              "name": "_hasLeftOverflow",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`true` if code-snippet has left overflow"
            },
            {
              "kind": "field",
              "name": "_shouldShowMoreLessBtn",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`true` if show more or show less btn is visible"
            },
            {
              "kind": "method",
              "name": "_handleCopyClick",
              "privacy": "private",
              "description": "Handles `click` event on the copy button."
            },
            {
              "kind": "method",
              "name": "_getCodeRefDimensions",
              "privacy": "private",
              "parameters": [
                {
                  "name": "ref"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleScroll",
              "privacy": "private",
              "description": "Handles `scroll` event."
            },
            {
              "kind": "method",
              "name": "_handleClickExpanded",
              "privacy": "private",
              "description": "Handles `click` event on the show more or show less button."
            },
            {
              "kind": "field",
              "name": "_resizeObserver",
              "privacy": "private",
              "default": "new ResizeObserver(() => { const codeContainerRef = this.shadowRoot?.querySelector( `.${prefix}--snippet-container` ); const codeContentRef = codeContainerRef?.querySelector('code'); // PRE? const { type, maxCollapsedNumberOfRows, maxExpandedNumberOfRows, minExpandedNumberOfRows, _rowHeightInPixels: rowHeightInPixels, _handleScroll: handleScroll, } = this; if (codeContentRef && type === CODE_SNIPPET_TYPE.MULTI) { const { height } = codeContentRef.getBoundingClientRect(); if ( maxCollapsedNumberOfRows > 0 && (maxExpandedNumberOfRows <= 0 || maxExpandedNumberOfRows > maxCollapsedNumberOfRows) && height > maxCollapsedNumberOfRows * rowHeightInPixels ) { this._shouldShowMoreLessBtn = true; } else { this._shouldShowMoreLessBtn = false; } if ( this._expandedCode && minExpandedNumberOfRows > 0 && height <= minExpandedNumberOfRows * rowHeightInPixels ) { this._expandedCode = false; } } if ( (codeContentRef && type === CODE_SNIPPET_TYPE.MULTI) || (codeContainerRef && type === CODE_SNIPPET_TYPE.SINGLE) ) { handleScroll(); } this.requestUpdate(); })",
              "description": "The `ResizeObserver` instance for observing element resizes for re-positioning floating menu position."
            },
            {
              "kind": "field",
              "name": "copyText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Optional text to copy. If not specified, the `children` node's `innerText`\nwill be used as the copy value."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button should be disabled."
            },
            {
              "kind": "field",
              "name": "feedback",
              "type": {
                "text": "string"
              },
              "default": "'Copied!'",
              "description": "Specify the string displayed when the snippet is copied"
            },
            {
              "kind": "field",
              "name": "feedbackTimeout",
              "type": {
                "text": "number"
              },
              "default": "2000",
              "description": "Specify the time it takes for the feedback message to timeout"
            },
            {
              "kind": "field",
              "name": "hideCopyButton",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether or not a copy button should be used/rendered."
            },
            {
              "kind": "field",
              "name": "maxCollapsedNumberOfRows",
              "type": {
                "text": "number"
              },
              "default": "15",
              "description": "Specify the maximum number of rows to be shown when in collapsed view"
            },
            {
              "kind": "field",
              "name": "maxExpandedNumberOfRows",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Specify the maximum number of rows to be shown when in expanded view"
            },
            {
              "kind": "field",
              "name": "minCollapsedNumberOfRows",
              "type": {
                "text": "number"
              },
              "default": "3",
              "description": "Specify the minimum number of rows to be shown when in collapsed view"
            },
            {
              "kind": "field",
              "name": "minExpandedNumberOfRows",
              "type": {
                "text": "number"
              },
              "default": "16",
              "description": "Specify the minimum number of rows to be shown when in expanded view"
            },
            {
              "kind": "field",
              "name": "showLessText",
              "type": {
                "text": "string"
              },
              "default": "'Show less'",
              "description": "Specify a string that is displayed when the Code Snippet has been\ninteracted with to show less lines"
            },
            {
              "kind": "field",
              "name": "showMoreText",
              "type": {
                "text": "string"
              },
              "default": "'Show more'",
              "description": "Specify a string that is displayed when the Code Snippet text is more\nthan 15 lines"
            },
            {
              "kind": "field",
              "name": "tooltipContent",
              "type": {
                "text": "string"
              },
              "default": "'Copy to clipboard'",
              "description": "Tooltip content for the copy button."
            },
            {
              "kind": "field",
              "name": "wrapText",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button should be disabled."
            },
            {
              "kind": "field",
              "name": "type",
              "description": "The type of code snippet."
            },
            {
              "kind": "method",
              "name": "updated"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-code-snippet",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CODE_SNIPPET_COLOR_SCHEME",
          "declaration": {
            "name": "CODE_SNIPPET_COLOR_SCHEME",
            "module": "src/components/code-snippet/code-snippet.ts"
          }
        },
        {
          "kind": "js",
          "name": "CODE_SNIPPET_TYPE",
          "declaration": {
            "name": "CODE_SNIPPET_TYPE",
            "module": "src/components/code-snippet/code-snippet.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSCodeSnippet",
            "module": "src/components/code-snippet/code-snippet.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/code-snippet/defs.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "CODE_SNIPPET_COLOR_SCHEME",
          "declaration": {
            "name": "FORM_ELEMENT_COLOR_SCHEME",
            "module": "../../globals/shared-enums"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/code-snippet/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combo-box/combo-box-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Combo box item.",
          "name": "CDSComboBoxItem",
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSDropdownItem",
                "module": "src/components/dropdown/dropdown-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this dropdown item should be disabled.",
              "inheritedFrom": {
                "name": "CDSDropdownItem",
                "module": "src/components/dropdown/dropdown-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "highlighted",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this dropdown item should be highlighted.\nIf `true`, parent `<dropdown>` selects/deselects this dropdown item upon keyboard interaction.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSDropdownItem",
                "module": "src/components/dropdown/dropdown-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this dropdown item should be selected.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSDropdownItem",
                "module": "src/components/dropdown/dropdown-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Dropdown size.",
              "inheritedFrom": {
                "name": "CDSDropdownItem",
                "module": "src/components/dropdown/dropdown-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `value` attribute that is set to the parent `<cds-dropdown>` when this dropdown item is selected.",
              "inheritedFrom": {
                "name": "CDSDropdownItem",
                "module": "src/components/dropdown/dropdown-item.ts"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSDropdownItem",
                "module": "src/components/dropdown/dropdown-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "id",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "0",
              "description": "Store an identifier for use in composing this item's id.\n\nAuto-increments anytime a new dropdown-item appears.",
              "inheritedFrom": {
                "name": "CDSDropdownItem",
                "module": "src/components/dropdown/dropdown-item.ts"
              }
            }
          ],
          "superclass": {
            "name": "CDSDropdownItem",
            "module": "/src/components/dropdown/dropdown-item"
          },
          "tagName": "cds-combo-box-item",
          "customElement": true,
          "cssParts": [
            {
              "description": "The selected icon.",
              "name": "selected-icon",
              "inheritedFrom": {
                "name": "CDSDropdownItem",
                "module": "src/components/dropdown/dropdown-item.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSComboBoxItem",
            "module": "src/components/combo-box/combo-box-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combo-box/combo-box-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "WithLayer"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/combo-box/combo-box-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "WithLayer",
          "declaration": {
            "name": "WithLayer",
            "module": "src/components/combo-box/combo-box-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/combo-box/combo-box-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/combo-box/combo-box-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combo-box/combo-box.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Combo box.",
          "name": "CDSComboBox",
          "members": [
            {
              "kind": "field",
              "name": "_filterInputValue",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''",
              "description": "The text content that should be set to the `<input>` for filtering."
            },
            {
              "kind": "field",
              "name": "_shouldTriggerBeFocusable",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "description": "`true` if the trigger button should be focusable.\nDerived class can set `false` to this if the trigger button contains another primary focusable element (e.g. `<input>`).",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_filterInputNode",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private",
              "description": "The `<input>` for filtering."
            },
            {
              "kind": "field",
              "name": "_itemMenu",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "description": "The menu containing all selectable items."
            },
            {
              "kind": "field",
              "name": "_selectionButtonNode",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "description": "The selection button."
            },
            {
              "kind": "method",
              "name": "_testItemWithQueryText",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "item",
                  "description": "A combo box item."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_defaultItemMatches",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "CDSComboBoxItem"
                  },
                  "description": "The combo box item."
                },
                {
                  "name": "queryText",
                  "type": {
                    "text": "string"
                  },
                  "description": "The query text user types."
                }
              ],
              "description": "The default item matching callback."
            },
            {
              "kind": "method",
              "name": "_handleInput",
              "privacy": "protected",
              "description": "Handles `input` event on the `<input>` for filtering."
            },
            {
              "kind": "method",
              "name": "_handleClickInner",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "Handles `click` event on the top-level element in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleKeypressInner",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handler for the `keypress` event on the top-level element in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleUserInitiatedClearInput",
              "privacy": "protected",
              "description": "Handles user-initiated clearing the `<input>` for filtering."
            },
            {
              "kind": "method",
              "name": "_handleUserInitiatedSelectItem",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "CDSComboBoxItem"
                  }
                }
              ],
              "description": "Handles user-initiated selection of a dropdown item.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_selectionDidChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "itemToSelect",
                  "optional": true,
                  "type": {
                    "text": "CDSComboBoxItem"
                  }
                }
              ],
              "description": "A callback that runs after change in dropdown selection upon user interaction is confirmed.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderLabel",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderFollowingLabel",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | void"
                }
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "clearSelectionLabel",
              "type": {
                "text": "string"
              },
              "default": "'Clear selection'",
              "description": "The `aria-label` attribute for the icon to clear selection."
            },
            {
              "kind": "field",
              "name": "inputLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `aria-label` attribute for the `<input>` for filtering."
            },
            {
              "kind": "field",
              "name": "itemMatches",
              "type": {
                "text": "(item: CDSComboBoxItem, queryText: string) => boolean"
              },
              "description": "The custom item matching callback."
            },
            {
              "kind": "method",
              "name": "shouldUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "TRIGGER_KEYS",
              "static": true,
              "default": "new Set(['Enter'])",
              "description": "Symbols of keys that triggers opening/closing menu and selecting/deselecting menu item.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectorItemHighlighted",
              "static": true,
              "description": "A selector that will return highlighted items.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectorItem",
              "static": true,
              "description": "A selector that will return combo box items.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectorItemSelected",
              "static": true,
              "description": "A selector that will return selected items.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "eventBeforeToggle",
              "static": true,
              "description": "The name of the custom event fired before this combo box item is being toggled upon a user gesture.\nCancellation of this event stops the user-initiated action of toggling this combo box item.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "eventToggle",
              "static": true,
              "description": "The name of the custom event fired after this combo box item is toggled upon a user gesture.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "eventBeforeSelect",
              "static": true,
              "description": "The name of the custom event fired before a combo box item is selected upon a user gesture.\nCancellation of this event stops changing the user-initiated selection.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "eventSelect",
              "static": true,
              "description": "The name of the custom event fired after a a combo box item is selected upon a user gesture.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getValidityMessage",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string"
                  },
                  "description": "The form validation status."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "kind": "method",
              "name": "_testValidity",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Checks if the value meets the constraints.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` to show the UI of the invalid state.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the value is required.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "requiredValidityMessage",
              "type": {
                "text": "string"
              },
              "default": "'Please fill out this field.'",
              "description": "The special validity message for `required`.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "validityMessage",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The validity message.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Checks if the value meets the constraints.\nFires cancelable `invalid` event if it doesn't.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "validityMessage",
                  "type": {
                    "text": "string"
                  },
                  "description": "The custom validity message"
                }
              ],
              "description": "Sets the given custom validity message.",
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hFormdata",
              "type": {
                "text": "Handle | null"
              },
              "default": "null",
              "description": "The handle for `formdata` event listener on the containing form.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormMixin",
                "module": "src/globals/mixins/form.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleFormdata",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `formdata` event.",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasSlug",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "description": "`true` if there is a slug.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_activeDescendant",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_selectedItemContent",
              "type": {
                "text": "DocumentFragment | null"
              },
              "privacy": "protected",
              "default": "null",
              "description": "The content of the selected item.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_listBoxNode",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "protected",
              "description": "The list box `<div>` node.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_slotHelperTextNode",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "protected",
              "description": "The `<slot>` element for the helper text in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_slotTitleTextNode",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "protected",
              "description": "The `<slot>` element for the title text in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_selectionShouldChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "itemToSelect",
                  "optional": true,
                  "type": {
                    "text": "CDSDropdownItem"
                  },
                  "description": "A dropdown item. Absense of this argument means clearing selection."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleKeydownInner",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handler for the `keydown` event on the top-level element in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleFocusOut",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `blur` event handler on the document this element is in.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotchangeHelperText",
              "privacy": "protected",
              "description": "Handles `slotchange` event for the `<slot>` for helper text.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotchangeLabelText",
              "privacy": "protected",
              "description": "Handles `slotchange` event for the `<slot>` for label text.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlugSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleUserInitiatedToggle",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "force",
                  "default": "!this.open",
                  "description": "If specified, forces the open state to the given one.",
                  "optional": true
                }
              ],
              "description": "Handles user-initiated toggling the open state.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_clearHighlight",
              "privacy": "protected",
              "description": "Clears the selection of dropdown items.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_navigate",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "number"
                  },
                  "description": "`-1` to navigate backward, `1` to navigate forward."
                }
              ],
              "description": "Navigate through dropdown items.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderPrecedingLabel",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderTitleLabel",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "'aria-label' of the ListBox component.\nSpecify a label to be read by screen readers on the container node",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "direction",
              "description": "Specify the direction of the dropdown. Can be either top or bottom.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this dropdown should be disabled.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "helperText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The helper text.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the title text should be hidden or not",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalidText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Message which is displayed if the value is invalid.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "titleText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Provide the title text that will be read by a screen reader when visiting this control",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Name for the dropdown in the `FormData`",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this dropdown should be open.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the Dropdown is readonly",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Dropdown size.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "toggleLabelClosed",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `aria-label` attribute for the UI indicating the closed state.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "toggleLabelOpen",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `aria-label` attribute for the UI indicating the open state.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Generic label that will be used as the textual representation of what this field is for",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "`true` if this dropdown should use the inline UI variant.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "warn",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the control is currently in warning state",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "warnText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Provide the text that is displayed when the control is in warning state",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_classes",
              "privacy": "protected",
              "description": "The CSS class list for dropdown listbox",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "slugItem",
              "static": true,
              "description": "A selector that will return the slug item.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "getAction",
              "static": true,
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            }
          ],
          "events": [
            {
              "description": "The custom event fired before a combo box item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection.",
              "name": "cds-combo-box-beingselected"
            },
            {
              "description": "The custom event fired before the open state of this combo box is toggled upon a user gesture. Cancellation of this event stops the user-initiated toggling.",
              "name": "cds-combo-box-beingtoggled"
            },
            {
              "description": "The custom event fired after a combo box item is selected upon a user gesture.",
              "name": "cds-combo-box-selected"
            },
            {
              "description": "The custom event fired after the open state of this combo box is toggled upon a user gesture.",
              "name": "cds-combo-box-toggled"
            },
            {
              "name": "invalid",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "name": "eventBeforeToggle",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "name": "eventToggle",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "description": "The custom event fired before a dropdown item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection.",
              "name": "cds-dropdown-beingselected",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "description": "The custom event fired before the open state of this dropdown is toggled upon a user gesture. Cancellation of this event stops the user-initiated toggling.",
              "name": "cds-dropdown-beingtoggled",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "description": "The custom event fired after a dropdown item is selected upon a user gesture.",
              "name": "cds-dropdown-selected",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "description": "The custom event fired after the open state of this dropdown is toggled upon a user gesture.",
              "name": "cds-dropdown-toggled",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            }
          ],
          "superclass": {
            "name": "CDSDropdown",
            "module": "/src/components/dropdown/dropdown"
          },
          "tagName": "cds-combo-box",
          "customElement": true,
          "cssParts": [
            {
              "description": "The label text.",
              "name": "label-text",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "description": "The helper text.",
              "name": "helper-text",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "description": "The trigger button.",
              "name": "trigger-button",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "description": "The menu body.",
              "name": "menu-body",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "description": "The validity message.",
              "name": "validity-message",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DROPDOWN_DIRECTION",
          "declaration": {
            "name": "DROPDOWN_DIRECTION",
            "module": "../dropdown/dropdown"
          }
        },
        {
          "kind": "js",
          "name": "DROPDOWN_SIZE",
          "declaration": {
            "name": "DROPDOWN_SIZE",
            "module": "../dropdown/dropdown"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSComboBox",
            "module": "src/components/combo-box/combo-box.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combo-box/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/content-switcher/content-switcher-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Content switcher button.",
          "name": "CDSContentSwitcherItem",
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this content switcher item should be disabled."
            },
            {
              "kind": "field",
              "name": "hideDivider",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` to hide the divider at the left.",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the content switcher button should be selected.",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "string"
              },
              "description": "The element ID of target panel."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `value` attribute that is set to the parent `<cds-content-switcher>`\nwhen this content switcher item is selected."
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the content switcher button should be icon-only."
            },
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "string"
              },
              "default": "'top'",
              "description": "Specify how the trigger should align with the tooltip for icon-only\nswitcher item"
            },
            {
              "kind": "field",
              "name": "closeOnActivation",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Determines whether the tooltip should close when inner content is\nactivated (click, Enter or Space)"
            },
            {
              "kind": "field",
              "name": "enterDelayMs",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "Specify the duration in milliseconds to delay before displaying the\ntooltip for icon-only switcher item"
            },
            {
              "kind": "field",
              "name": "leaveDelayMs",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "Specify the duration in milliseconds to delay before hiding the tooltip\nfor icon-only switcher-item\n\nTODO: match upstream value once #10471 is resolved"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderTooltipContent",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "shouldUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-content-switcher-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSContentSwitcherItem",
            "module": "src/components/content-switcher/content-switcher-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/content-switcher/content-switcher-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "IconOnly"
        },
        {
          "kind": "function",
          "name": "IconOnlyWithLayer"
        },
        {
          "kind": "function",
          "name": "WithLayer"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/content-switcher/content-switcher-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/content-switcher/content-switcher-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "IconOnly",
          "declaration": {
            "name": "IconOnly",
            "module": "src/components/content-switcher/content-switcher-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "IconOnlyWithLayer",
          "declaration": {
            "name": "IconOnlyWithLayer",
            "module": "src/components/content-switcher/content-switcher-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "WithLayer",
          "declaration": {
            "name": "WithLayer",
            "module": "src/components/content-switcher/content-switcher-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/content-switcher/content-switcher-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/content-switcher/content-switcher.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Content switcher.",
          "name": "CDSContentSwitcher",
          "members": [
            {
              "kind": "method",
              "name": "_handleHover",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ target, type }",
                  "type": {
                    "text": "MouseEvent"
                  }
                },
                {
                  "description": "The event.",
                  "name": "event"
                },
                {
                  "description": "The event target.",
                  "name": "event.target"
                },
                {
                  "description": "The event type.",
                  "name": "event.type"
                }
              ],
              "description": "Handles `mouseover`/`mouseout` events on `<slot>`."
            },
            {
              "kind": "method",
              "name": "_getCurrentItem",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "The current event target."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_getNextItem",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "currentItem",
                  "type": {
                    "text": "CDSContentSwitcherItem"
                  },
                  "description": "The currently selected item."
                },
                {
                  "name": "direction",
                  "type": {
                    "text": "number"
                  },
                  "description": "The navigation direction."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "MouseEvent"
                  }
                },
                {
                  "description": "The event.",
                  "name": "event"
                },
                {
                  "description": "The event target.",
                  "name": "event.target"
                }
              ],
              "description": "Handles `click` event on content switcher item."
            },
            {
              "kind": "method",
              "name": "_handleKeydown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ key }",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                },
                {
                  "description": "The event.",
                  "name": "event"
                },
                {
                  "description": "The event key.",
                  "name": "event.key"
                }
              ],
              "description": "Handles `keydown` event on the top-level element in the shadow DOM."
            },
            {
              "kind": "method",
              "name": "_handleUserInitiatedSelectItem",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "CDSContentSwitcherItem"
                  },
                  "description": "The content switcher item user wants to select.",
                  "optional": true
                }
              ],
              "description": "Handles user-initiated selection of a content switcher item."
            },
            {
              "kind": "method",
              "name": "_navigate",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "number"
                  },
                  "description": "`-1` to navigate backward, `1` to navigate forward."
                }
              ],
              "description": "Navigates through content switcher items."
            },
            {
              "kind": "method",
              "name": "_selectionDidChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "itemToSelect",
                  "type": {
                    "text": "CDSContentSwitcherItem"
                  },
                  "description": "A content switcher item."
                }
              ],
              "description": "A callback that runs after change in content switcher selection upon user interaction is confirmed."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value of the selected item."
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Content switcher size."
            },
            {
              "kind": "field",
              "name": "iconOnly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Icon only."
            },
            {
              "kind": "method",
              "name": "shouldUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleSlotchange"
            },
            {
              "kind": "field",
              "name": "selectorItem",
              "static": true,
              "description": "A selector that will return content switcher items.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorIconItem",
              "static": true,
              "description": "A selector that will return content switcher icon items.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorItemEnabled",
              "static": true,
              "description": "A selector that will return enabled content switcher items.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorItemSelected",
              "static": true,
              "description": "A selector that will return selected items.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventBeforeSelect",
              "static": true,
              "description": "The name of the custom event fired before a content switcher item is selected upon a user gesture.\nCancellation of this event stops changing the user-initiated selection.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventSelect",
              "static": true,
              "description": "The name of the custom event fired after a a content switcher item is selected upon a user gesture.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "events": [
            {
              "description": "The custom event fired before a content switcher item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection.",
              "name": "cds-content-switcher-beingselected"
            },
            {
              "description": "The custom event fired after a a content switcher item is selected upon a user gesture.",
              "name": "cds-content-switcher-selected"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-content-switcher",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NAVIGATION_DIRECTION",
          "declaration": {
            "name": "NAVIGATION_DIRECTION",
            "module": "src/components/content-switcher/content-switcher.ts"
          }
        },
        {
          "kind": "js",
          "name": "CONTENT_SWITCHER_SIZE",
          "declaration": {
            "name": "CONTENT_SWITCHER_SIZE",
            "module": "src/components/content-switcher/content-switcher.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSContentSwitcher",
            "module": "src/components/content-switcher/content-switcher.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/content-switcher/defs.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "NAVIGATION_DIRECTION",
          "type": {
            "text": "object"
          },
          "default": "{ Left: -1, ArrowLeft: -1, Right: 1, ArrowRight: 1, }",
          "description": "Navigation direction, associated with key symbols."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NAVIGATION_DIRECTION",
          "declaration": {
            "name": "NAVIGATION_DIRECTION",
            "module": "src/components/content-switcher/defs.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/content-switcher/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/copy/copy.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Copy.",
          "name": "CDSCopy",
          "members": [
            {
              "kind": "field",
              "name": "_showFeedback",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`true` to show the feedback tooltip."
            },
            {
              "kind": "field",
              "name": "_animation",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''",
              "description": "`true` to show the feedback tooltip."
            },
            {
              "kind": "field",
              "name": "_createHandleFeedbackTooltip",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleFeedbackTooltip",
              "privacy": "private",
              "description": "Handles showing/hiding the feedback tooltip."
            },
            {
              "kind": "method",
              "name": "_handleClickButton",
              "privacy": "private",
              "description": "Handles `click` event on the copy button."
            },
            {
              "kind": "field",
              "name": "feedback",
              "type": {
                "text": "string"
              },
              "default": "'Copied!'",
              "description": "Specify the string that is displayed when the button is clicked and the content is copi"
            },
            {
              "kind": "field",
              "name": "feedbackTimeout",
              "type": {
                "text": "number"
              },
              "default": "2000",
              "description": "The number in milliseconds to determine how long the tooltip should remain."
            },
            {
              "kind": "method",
              "name": "_renderTooltipContent",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "CDSIconButton",
                "module": "src/components/icon-button/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "CDSIconButton",
                "module": "src/components/icon-button/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "string"
              },
              "default": "'top'",
              "description": "Specify how the trigger should align with the tooltip",
              "inheritedFrom": {
                "name": "CDSIconButton",
                "module": "src/components/icon-button/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoalign",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether a auto align functionality should be applied",
              "inheritedFrom": {
                "name": "CDSIconButton",
                "module": "src/components/icon-button/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "closeOnActivation",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Determines whether the tooltip should close when inner content is activated (click, Enter or Space)",
              "inheritedFrom": {
                "name": "CDSIconButton",
                "module": "src/components/icon-button/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the tooltip should be open when it first renders",
              "inheritedFrom": {
                "name": "CDSIconButton",
                "module": "src/components/icon-button/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "enterDelayMs",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "Specify the duration in milliseconds to delay before displaying the tooltip",
              "inheritedFrom": {
                "name": "CDSIconButton",
                "module": "src/components/icon-button/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "leaveDelayMs",
              "type": {
                "text": "number"
              },
              "default": "300",
              "description": "Specify the duration in milliseconds to delay before hiding the tooltip",
              "inheritedFrom": {
                "name": "CDSIconButton",
                "module": "src/components/icon-button/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "string"
              },
              "default": "'md'",
              "description": "Specify the size of the Button. Defaults to `md`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasIcon",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`true` if there is an icon.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleDisabledClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleOver",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleHoverOut",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocus",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocusout",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button should have input focus when the page loads.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "batchAction",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button is being used within a data table batch action toolbar",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "buttonClassName",
              "description": "Specify an optional className to be added to your Button",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "dangerDescriptor",
              "description": "Specify the message read by screen readers for the danger button variant",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button should be disabled.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "description": "The default file name, used if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasMainContent",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if there is a non-icon content.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Link `href`. If present, this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "hreflang",
              "type": {
                "text": "string"
              },
              "description": "The language of what `href` points to, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "isExpressive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if expressive theme enabled.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "isSelected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the Button is currently selected.\nOnly applies to the Ghost variant.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "Button kind.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "linkRole",
              "type": {
                "text": "string"
              },
              "default": "'button'",
              "description": "The a11y role for `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "openTooltip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to determine if tooltip is open.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "ping",
              "type": {
                "text": "string"
              },
              "description": "URLs to ping, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "description": "The link type, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "string"
              },
              "description": "The link target, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipAlignment",
              "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipPosition",
              "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipText",
              "type": {
                "text": "string"
              },
              "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Button type.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            }
          ],
          "superclass": {
            "name": "CDSIconButton",
            "module": "/src/components/icon-button/icon-button"
          },
          "tagName": "cds-copy",
          "customElement": true,
          "cssParts": [
            {
              "description": "The button.",
              "name": "button",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSCopy",
            "module": "src/components/copy/copy.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/copy-button/copy-button-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/copy-button/copy-button-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/copy-button/copy-button-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/copy-button/copy-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Copy button.",
          "name": "CDSCopyButton",
          "members": [
            {
              "kind": "field",
              "name": "buttonClassName",
              "description": "Specify an optional className to be added to your Button"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button should be disabled."
            },
            {
              "kind": "field",
              "name": "feedback",
              "type": {
                "text": "string"
              },
              "default": "'Copied!'",
              "description": "Specify the string that is displayed when the button is clicked and the content is copi"
            },
            {
              "kind": "field",
              "name": "feedbackTimeout",
              "type": {
                "text": "number"
              },
              "default": "2000",
              "description": "The number in milliseconds to determine how long the tooltip should remain."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-copy-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSCopyButton",
            "module": "src/components/copy-button/copy-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/copy-button/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/defs.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "TABLE_SORT_CYCLES",
          "type": {
            "text": "object"
          },
          "default": "{ [TABLE_SORT_CYCLE.BI_STATES_FROM_ASCENDING]: [ TABLE_SORT_DIRECTION.ASCENDING, TABLE_SORT_DIRECTION.DESCENDING, ], [TABLE_SORT_CYCLE.BI_STATES_FROM_DESCENDING]: [ TABLE_SORT_DIRECTION.DESCENDING, TABLE_SORT_DIRECTION.ASCENDING, ], [TABLE_SORT_CYCLE.TRI_STATES_FROM_ASCENDING]: [ TABLE_SORT_DIRECTION.NONE, TABLE_SORT_DIRECTION.ASCENDING, TABLE_SORT_DIRECTION.DESCENDING, ], [TABLE_SORT_CYCLE.TRI_STATES_FROM_DESCENDING]: [ TABLE_SORT_DIRECTION.NONE, TABLE_SORT_DIRECTION.DESCENDING, TABLE_SORT_DIRECTION.ASCENDING, ], }",
          "description": "Mapping of table sort cycles to table sort states."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TABLE_SORT_CYCLES",
          "declaration": {
            "name": "TABLE_SORT_CYCLES",
            "module": "src/components/data-table/defs.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/table-batch-actions.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Table batch actions.",
          "name": "CDSTableBatchActions",
          "members": [
            {
              "kind": "method",
              "name": "_handleCancel",
              "privacy": "private",
              "description": "Handles `click` event on the Cancel button."
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this batch actions bar should be active."
            },
            {
              "kind": "field",
              "name": "formatSelectedItemsCount",
              "description": "The formatter for selected items. Should be changed upon the locale the UI is rendered with."
            },
            {
              "kind": "field",
              "name": "selectedRowsCount",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Numeric representation of the total number of items selected in a table.\nThis number is used to derive the selection message."
            },
            {
              "kind": "method",
              "name": "firstUpdated"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selectorButtons",
              "static": true,
              "description": "The CSS selector to find the action buttons.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventClickCancel",
              "static": true,
              "description": "The name of the custom event fired after the Cancel button is clicked.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "events": [
            {
              "name": "eventClickCancel",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The custom event fired after the Cancel button is clicked.",
              "name": "cds-table-batch-actions-cancel-clicked"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-table-batch-actions",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTableBatchActions",
            "module": "src/components/data-table/table-batch-actions.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/table-body.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Data table body.",
          "name": "CDSTableBody",
          "members": [
            {
              "kind": "field",
              "name": "_slotNode",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private",
              "description": "The `<slot>` element in the shadow DOM."
            },
            {
              "kind": "method",
              "name": "_updateZebra",
              "privacy": "private",
              "description": "Updates `even`/`odd` properties of the child `<cds-table-row>`s."
            },
            {
              "kind": "field",
              "name": "_handleSlotChange",
              "privacy": "private",
              "description": "Handles `slotchange` event in the `<slot>` element in the shadow DOM."
            },
            {
              "kind": "field",
              "name": "useZebraStyles",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The color scheme."
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-table-body",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTableBody",
            "module": "src/components/data-table/table-body.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/table-cell-content.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Data table cell content.",
          "name": "CDSTableCellContent",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-table-cell-content",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTableCellContent",
            "module": "src/components/data-table/table-cell-content.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/table-cell.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Data table cell.",
          "name": "CDSTableCell",
          "members": [
            {
              "kind": "field",
              "name": "overflowMenuOnHover",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the overflow menu (if it exists) should be shown always, or only on hover"
            },
            {
              "kind": "field",
              "name": "size",
              "description": "The table size."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-table-cell",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTableCell",
            "module": "src/components/data-table/table-cell.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/table-expanded-row.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Table row of collapsible details.",
          "name": "CDSTableExpandedRow",
          "members": [
            {
              "kind": "method",
              "name": "_handleMouseOverOut",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `mouseover`/`mouseout` event handler on this element."
            },
            {
              "kind": "field",
              "name": "colSpan",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The colspan."
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the table row should be expanded."
            },
            {
              "kind": "field",
              "name": "filtered",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the table row should be filtered."
            },
            {
              "kind": "field",
              "name": "highlighted",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the table row should be highlighted."
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the previous table row has been selected"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "method",
              "name": "updated"
            },
            {
              "kind": "field",
              "name": "selectorRow",
              "static": true,
              "description": "A selector that will return the previous sibling row.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-table-expanded-row",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTableExpandedRow",
            "module": "src/components/data-table/table-expanded-row.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/table-head.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Data table header.",
          "name": "CDSTableHead",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-table-head",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTableHead",
            "module": "src/components/data-table/table-head.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/table-header-cell.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Data table header cell.",
          "name": "CDSTableHeaderCell",
          "members": [
            {
              "kind": "method",
              "name": "_handleClickSortButton",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event"
                }
              ],
              "description": "Handles `click` event on the sort button."
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "description": "Handles `slotchange` event."
            },
            {
              "kind": "method",
              "name": "_handleSlugSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event."
            },
            {
              "kind": "method",
              "name": "_getNextSort",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "_hasSlug",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "description": "`true` if there is a slug."
            },
            {
              "kind": "field",
              "name": "isExpandable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the table has expandable rows"
            },
            {
              "kind": "field",
              "name": "isSelectable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this table has selectable rows"
            },
            {
              "kind": "field",
              "name": "isSortable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this table header column should be sortable"
            },
            {
              "kind": "field",
              "name": "sortActive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this table header cell is of a primary sorting column."
            },
            {
              "kind": "field",
              "name": "sortCycle",
              "type": {
                "text": "TABLE_SORT_CYCLE | undefined"
              },
              "description": "The table sort cycle in use."
            },
            {
              "kind": "field",
              "name": "sortDirection",
              "type": {
                "text": "TABLE_SORT_DIRECTION | undefined"
              },
              "description": "The table sort direction.\nIf present, this table header cell will have a sorting UI. Choose between `ascending` or `descending`."
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "slugItem",
              "static": true,
              "description": "A selector that will return the slug item.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventBeforeSort",
              "static": true,
              "description": "The name of the custom event fired before a new sort direction is set upon a user gesture.\nCancellation of this event stops the user-initiated change in sort direction.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "TABLE_SORT_CYCLES",
              "static": true,
              "default": "TABLE_SORT_CYCLES",
              "description": "Mapping of table sort cycles to table sort states."
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The custom event fired before a new sort direction is set upon a user gesture. Cancellation of this event stops the user-initiated change in sort direction.",
              "name": "cds-table-header-cell-sort"
            }
          ],
          "mixins": [
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-table-header-cell",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TABLE_SORT_CYCLE",
          "declaration": {
            "name": "TABLE_SORT_CYCLE",
            "module": "src/components/data-table/table-header-cell.ts"
          }
        },
        {
          "kind": "js",
          "name": "TABLE_SORT_CYCLES",
          "declaration": {
            "name": "TABLE_SORT_CYCLES",
            "module": "src/components/data-table/table-header-cell.ts"
          }
        },
        {
          "kind": "js",
          "name": "TABLE_SORT_DIRECTION",
          "declaration": {
            "name": "TABLE_SORT_DIRECTION",
            "module": "src/components/data-table/table-header-cell.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTableHeaderCell",
            "module": "src/components/data-table/table-header-cell.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/table-header-description.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Data table header description",
          "name": "CDSTableHeaderDescription",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-table-header-description",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTableHeaderDescription",
            "module": "src/components/data-table/table-header-description.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/table-header-row.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Data table header row.",
          "name": "CDSTableHeaderRow",
          "members": [
            {
              "kind": "field",
              "name": "eventBeforeChangeSelection",
              "static": true,
              "description": "The name of the custom event fired before this row is selected/unselected upon a user gesture.\nCancellation of this event stops the user-initiated change in selection.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasSlug",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "description": "`true` if there is a slug.",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleClickSelectionRadio",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `click` event on the radio button.",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleClickSelectionCheckbox",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `click` event on the check box.",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleClickExpando",
              "privacy": "private",
              "description": "Handles `click` event on the expando button.",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleMouseOverOut",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `mouseover`/`mouseout` event handler on this element.",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleUserInitiatedToggleExpando",
              "parameters": [
                {
                  "name": "expanded",
                  "default": "!this.expanded",
                  "description": "The new expanded state."
                }
              ],
              "description": "Handles user-initiated toggle request of the expando button in this table row.",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderExpandButton",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event.",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderFirstCells",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "batchExpansion",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this table should support batch expansion",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this table row should be disabled.",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "even",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this table row is placed at an even position in parent `<cds-table-body>`.\n`<cds-table-body>` sets this property, _only_ in zebra stripe mode.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "expandable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this table row can be expanded to show content underneath",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` when the table row expanded is showing",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "filtered",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this table row should be filtered out.",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideCheckbox",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the checkbox should be present in the DOM,\nbut invisible and uninteractable.",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "highlighted",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the table row should be highlighted.",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "odd",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this table row is placed at an odd position in parent `<cds-table-body>`.\n`<cds-table-body>` sets this property, _only_ in zebra stripe mode.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "overflowMenuOnHover",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the overflow menu (if it exists) should be shown always, or only on hover",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "radio",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the control should be a radio button or inline checkbox",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this table row should be selected.",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `aria-label` attribute for the `<label>` for selection.",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `name` attribute for the `<input>` for selection.\nIf present, this table row will be a selectable one.",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectionValue",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `value` attribute for the `<input>` for selection.",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "eventRadioChange",
              "static": true,
              "description": "The name of the custom event fired after this radio button changes its checked state.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "eventCheckboxChange",
              "static": true,
              "description": "The name of the custom event fired after this radio button changes its checked state.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectorTable",
              "static": true,
              "description": "A selector that will return the parent table",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectorTableCellOverflowMenu",
              "static": true,
              "description": "The CSS selector to find the overflow menu on the table cell",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectorExpandedRow",
              "static": true,
              "description": "A selector that will return the corresponding expanded row.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "slugItem",
              "static": true,
              "description": "A selector that will return the slug item.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "eventBeforeExpandoToggle",
              "static": true,
              "description": "The name of the custom event fired before the expanded state this row is being toggled upon a user gesture.\nCancellation of this event stops the user-initiated action of toggling the expanded state.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "eventExpandoToggle",
              "static": true,
              "description": "The name of the custom event fired after the expanded state this row is toggled upon a user gesture.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            }
          ],
          "events": [
            {
              "description": "The name of the custom event fired before this row is selected/unselected upon a user gesture. Cancellation of this event stops the user-initiated change in selection.",
              "name": "cds-table-change-selection-all"
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "description": "The custom event fired before this row is selected/unselected upon a user gesture. Cancellation of this event stops the user-initiated change in selection.",
              "name": "cds-table-row-change-selection",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "description": "The name of the custom event fired after this radio button changes its checked state.",
              "name": "cds-radio-button-changed",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "description": "The name of the custom event fired after this checkbox changes its checked state.",
              "name": "cds-checkbox-changed",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "description": "The name of the custom event fired before the expanded state of this row is being toggled upon a user gesture. Cancellation of this event stops the user-initiated action of toggling the expanded state.",
              "name": "cds-table-row-expando-beingtoggled",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "description": "The name of the custom event fired after the expanded state of this row is toggled upon a user gesture.",
              "name": "cds-table-row-expando-toggled",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            }
          ],
          "superclass": {
            "name": "CDSTableRow",
            "module": "/src/components/data-table/table-row"
          },
          "tagName": "cds-table-header-row",
          "customElement": true,
          "cssParts": [
            {
              "description": "The container of the checkbox.",
              "name": "selection-container",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            },
            {
              "description": "The checkbox.",
              "name": "selection",
              "inheritedFrom": {
                "name": "CDSTableRow",
                "module": "src/components/data-table/table-row.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTableHeaderRow",
            "module": "src/components/data-table/table-header-row.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/table-header-title.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Data table header title",
          "name": "CDSTableHeader",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-table-header-title",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTableHeader",
            "module": "src/components/data-table/table-header-title.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/table-row.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Data table row.",
          "name": "CDSTableRow",
          "cssParts": [
            {
              "description": "The container of the checkbox.",
              "name": "selection-container"
            },
            {
              "description": "The checkbox.",
              "name": "selection"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_hasSlug",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "description": "`true` if there is a slug."
            },
            {
              "kind": "method",
              "name": "_handleClickSelectionRadio",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `click` event on the radio button."
            },
            {
              "kind": "method",
              "name": "_handleClickSelectionCheckbox",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `click` event on the check box."
            },
            {
              "kind": "method",
              "name": "_handleClickExpando",
              "privacy": "private",
              "description": "Handles `click` event on the expando button."
            },
            {
              "kind": "method",
              "name": "_handleMouseOverOut",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `mouseover`/`mouseout` event handler on this element."
            },
            {
              "kind": "method",
              "name": "_handleUserInitiatedToggleExpando",
              "parameters": [
                {
                  "name": "expanded",
                  "default": "!this.expanded",
                  "description": "The new expanded state."
                }
              ],
              "description": "Handles user-initiated toggle request of the expando button in this table row."
            },
            {
              "kind": "method",
              "name": "_renderExpandButton",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event."
            },
            {
              "kind": "method",
              "name": "_renderFirstCells",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "batchExpansion",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this table should support batch expansion"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this table row should be disabled."
            },
            {
              "kind": "field",
              "name": "even",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this table row is placed at an even position in parent `<cds-table-body>`.\n`<cds-table-body>` sets this property, _only_ in zebra stripe mode.",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "expandable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this table row can be expanded to show content underneath",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` when the table row expanded is showing",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "filtered",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this table row should be filtered out."
            },
            {
              "kind": "field",
              "name": "hideCheckbox",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the checkbox should be present in the DOM,\nbut invisible and uninteractable."
            },
            {
              "kind": "field",
              "name": "highlighted",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the table row should be highlighted."
            },
            {
              "kind": "field",
              "name": "odd",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this table row is placed at an odd position in parent `<cds-table-body>`.\n`<cds-table-body>` sets this property, _only_ in zebra stripe mode.",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "overflowMenuOnHover",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the overflow menu (if it exists) should be shown always, or only on hover"
            },
            {
              "kind": "field",
              "name": "radio",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the control should be a radio button or inline checkbox",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this table row should be selected."
            },
            {
              "kind": "field",
              "name": "selectionLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `aria-label` attribute for the `<label>` for selection."
            },
            {
              "kind": "field",
              "name": "selectionName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `name` attribute for the `<input>` for selection.\nIf present, this table row will be a selectable one."
            },
            {
              "kind": "field",
              "name": "selectionValue",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `value` attribute for the `<input>` for selection."
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "eventRadioChange",
              "static": true,
              "description": "The name of the custom event fired after this radio button changes its checked state.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventCheckboxChange",
              "static": true,
              "description": "The name of the custom event fired after this radio button changes its checked state.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventBeforeChangeSelection",
              "static": true,
              "description": "The name of the custom event fired before this row is selected/unselected upon a user gesture.\nCancellation of this event stops the user-initiated change in selection.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorTable",
              "static": true,
              "description": "A selector that will return the parent table",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorTableCellOverflowMenu",
              "static": true,
              "description": "The CSS selector to find the overflow menu on the table cell",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorExpandedRow",
              "static": true,
              "description": "A selector that will return the corresponding expanded row.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "slugItem",
              "static": true,
              "description": "A selector that will return the slug item.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventBeforeExpandoToggle",
              "static": true,
              "description": "The name of the custom event fired before the expanded state this row is being toggled upon a user gesture.\nCancellation of this event stops the user-initiated action of toggling the expanded state.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventExpandoToggle",
              "static": true,
              "description": "The name of the custom event fired after the expanded state this row is toggled upon a user gesture.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The custom event fired before this row is selected/unselected upon a user gesture. Cancellation of this event stops the user-initiated change in selection.",
              "name": "cds-table-row-change-selection"
            },
            {
              "description": "The name of the custom event fired after this radio button changes its checked state.",
              "name": "cds-radio-button-changed"
            },
            {
              "description": "The name of the custom event fired after this checkbox changes its checked state.",
              "name": "cds-checkbox-changed"
            },
            {
              "description": "The name of the custom event fired before the expanded state of this row is being toggled upon a user gesture. Cancellation of this event stops the user-initiated action of toggling the expanded state.",
              "name": "cds-table-row-expando-beingtoggled"
            },
            {
              "description": "The name of the custom event fired after the expanded state of this row is toggled upon a user gesture.",
              "name": "cds-table-row-expando-toggled"
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            },
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-table-row",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTableRow",
            "module": "src/components/data-table/table-row.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/table-skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Data table skeleton",
          "name": "CDSTableSkeleton",
          "members": [
            {
              "kind": "field",
              "name": "headers",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "default": "[]",
              "description": "Optionally specify the displayed headers"
            },
            {
              "kind": "field",
              "name": "compact",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Optionally specify whether you want the Skeleton to be rendered as a compact DataTable"
            },
            {
              "kind": "field",
              "name": "columnCount",
              "type": {
                "text": "number"
              },
              "default": "5",
              "description": "Specify the number of columns that you want to render in the skeleton state"
            },
            {
              "kind": "field",
              "name": "rowCount",
              "type": {
                "text": "number"
              },
              "default": "5",
              "description": "Specify the number of rows that you want to render in the skeleton state"
            },
            {
              "kind": "field",
              "name": "showHeader",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Specify if the table header should be rendered as part of the skeleton."
            },
            {
              "kind": "field",
              "name": "showToolbar",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Specify if the table toolbar should be rendered as part of the skeleton."
            },
            {
              "kind": "field",
              "name": "zebra",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "true to add useZebraStyles striping."
            },
            {
              "kind": "method",
              "name": "_renderHeader",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderToolbar",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "updated"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-table-skeleton",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTableSkeleton",
            "module": "src/components/data-table/table-skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/table-toolbar-content.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Table toolbar content.",
          "name": "CDSTableToolbarContent",
          "members": [
            {
              "kind": "field",
              "name": "hasBatchActions",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this batch actions bar is active."
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Table toolbar contents size"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-table-toolbar-content",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTableToolbarContent",
            "module": "src/components/data-table/table-toolbar-content.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/table-toolbar-search.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Table toolbar search.",
          "name": "CDSTableToolbarSearch",
          "members": [
            {
              "kind": "field",
              "name": "_inputNode",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleUserInitiatedExpand",
              "privacy": "private",
              "description": "Handles user-initiated gestures for expanding the search box."
            },
            {
              "kind": "method",
              "name": "_handleFocusIn",
              "privacy": "private",
              "description": "Handles `focus` event handler on this element."
            },
            {
              "kind": "method",
              "name": "_handleFocusOut",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `blur` event handler on this element."
            },
            {
              "kind": "method",
              "name": "_handleSearchClick",
              "privacy": "private",
              "description": "Handles `click` event handler on the search box."
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the search box should be expanded.",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "persistent",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the search box should be always be open."
            },
            {
              "kind": "field",
              "name": "size",
              "description": "The search box size.",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "eventInput",
              "static": true,
              "description": "The name of the custom event fired after the search content is changed upon a user gesture.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hFormdata",
              "type": {
                "text": "Handle | null"
              },
              "default": "null",
              "description": "The handle for `formdata` event listener on the containing form.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormMixin",
                "module": "src/globals/mixins/form.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleFormdata",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  },
                  "description": "The event."
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handles `formdata` event.",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleInput",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `input` event on the `<input>` in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleClearInputButtonClick",
              "privacy": "private",
              "description": "Handles `click` event on the button to clear search box content.",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleExpand",
              "privacy": "private",
              "description": "Handles `focus` event on the button when the button can be expanded",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleClose",
              "privacy": "private",
              "description": "Handles `focusout` event on the component to be closed after being expanded\nWill not close if there is a value typed within.",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "description": "Handler for",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoComplete",
              "type": {
                "text": "string"
              },
              "default": "'off'",
              "description": "Specify an optional value for the autocomplete property on the underlying <input>,\ndefaults to \"off\"",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "closeButtonLabelText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Specify a label to be read by screen readers on the \"close\" button",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the search box should be disabled.",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "expandable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the search bar can be expandable",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasCustomIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label text.",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The form name in `FormData`.",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Specify the role for the underlying <input>, defaults to searchbox",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "'Search'",
              "description": "The placeholder text.",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `<input>` name.",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value.",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            }
          ],
          "events": [
            {
              "description": "The custom event fired after the search content is changed upon a user gesture.",
              "name": "cds-search-input",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            }
          ],
          "superclass": {
            "name": "CDSSearch",
            "module": "/src/components/search/search"
          },
          "tagName": "cds-table-toolbar-search",
          "customElement": true,
          "cssParts": [
            {
              "description": "The search icon.",
              "name": "search-icon",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "description": "The label text.",
              "name": "label-text",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "description": "The input box.",
              "name": "input",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "description": "The close button.",
              "name": "close-button",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            },
            {
              "description": "The close icon.",
              "name": "close-icon",
              "inheritedFrom": {
                "name": "CDSSearch",
                "module": "src/components/search/search.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTableToolbarSearch",
            "module": "src/components/data-table/table-toolbar-search.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/table-toolbar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Table toolbar.",
          "name": "CDSTableToolbar",
          "members": [
            {
              "kind": "field",
              "name": "size",
              "description": "Toolbar size"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selectorToolbarContent",
              "static": true,
              "description": "The CSS selector to find the toolbar contents",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-table-toolbar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTableToolbar",
            "module": "src/components/data-table/table-toolbar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/table.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Data table.",
          "name": "CDSTable",
          "members": [
            {
              "kind": "field",
              "name": "collationFactors",
              "type": {
                "text": "object"
              },
              "privacy": "private",
              "default": "{ [TABLE_SORT_DIRECTION.ASCENDING]: 1, [TABLE_SORT_DIRECTION.DESCENDING]: -1, }",
              "description": "The map of how sorting direction affects sorting order."
            },
            {
              "kind": "field",
              "name": "_downloadButton",
              "privacy": "private",
              "description": "Reference to download button"
            },
            {
              "kind": "field",
              "name": "_searchValue",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''",
              "description": "Current search value for filtering"
            },
            {
              "kind": "field",
              "name": "_tableHeaderRow",
              "privacy": "private",
              "description": "Table header row within component"
            },
            {
              "kind": "field",
              "name": "_tableBody",
              "privacy": "private",
              "description": "Table body"
            },
            {
              "kind": "field",
              "name": "_tableExpandedRows",
              "privacy": "private",
              "description": "Table expanded row within component"
            },
            {
              "kind": "field",
              "name": "_tableRows",
              "privacy": "private",
              "description": "Table rows within component"
            },
            {
              "kind": "field",
              "name": "_tableBatchActions",
              "privacy": "private",
              "description": "Reference to the component containing batch actions"
            },
            {
              "kind": "field",
              "name": "_tableToolbar",
              "privacy": "private",
              "description": "Reference to the table toolbar"
            },
            {
              "kind": "field",
              "name": "_tableToolbarContent",
              "privacy": "private",
              "description": "Reference to the table toolbar content"
            },
            {
              "kind": "field",
              "name": "_selectedRows",
              "type": {
                "text": "CDSTableRow[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "batchExpansion",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this table should support batch expansion"
            },
            {
              "kind": "field",
              "name": "collator",
              "description": "The g11n collator to use."
            },
            {
              "kind": "method",
              "name": "customSortRow",
              "parameters": [
                {
                  "name": "lhs",
                  "description": "A value."
                },
                {
                  "name": "rhs",
                  "description": "Another value."
                },
                {
                  "name": "collator",
                  "description": "A custom collator."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "expandable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the rows should be able to be expandable"
            },
            {
              "kind": "field",
              "name": "filterRows",
              "description": "The method used when filtering the table with the search bar.\nCan be replaced with custom method.",
              "parameters": [
                {
                  "description": "A table row.",
                  "name": "rowText"
                },
                {
                  "description": "A search string.",
                  "name": "searchString"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "headerCount",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The total headers"
            },
            {
              "kind": "field",
              "name": "isSelectable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this table contains selectable rows"
            },
            {
              "kind": "field",
              "name": "isSortable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this table should support sorting."
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "description": "The table size."
            },
            {
              "kind": "field",
              "name": "overflowMenuOnHover",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the overflow menu (if it exists) should be shown always, or only on hover"
            },
            {
              "kind": "field",
              "name": "radio",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the control should be a radio button or inline checkbox"
            },
            {
              "kind": "field",
              "name": "size",
              "description": "The table size."
            },
            {
              "kind": "field",
              "name": "useStaticWidth",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If true, will use a width of 'auto' instead of 100%"
            },
            {
              "kind": "field",
              "name": "useZebraStyles",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "true to add useZebraStyles striping."
            },
            {
              "kind": "field",
              "name": "withHeader"
            },
            {
              "kind": "field",
              "name": "withRowSlugs",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "true if slugs are added in the rows"
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleSortAction",
              "privacy": "private",
              "parameters": [
                {
                  "name": "columnIndex"
                },
                {
                  "name": "sortDirection"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleFilterRows",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleDownload",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ target }"
                }
              ],
              "description": "Download manager for selected rows."
            },
            {
              "kind": "field",
              "name": "_handleBatchExpansion",
              "privacy": "private",
              "description": "Handles batch expansion"
            },
            {
              "kind": "field",
              "name": "_handleSort",
              "privacy": "private",
              "description": "Handles sorting the table depending on the column selected"
            },
            {
              "kind": "field",
              "name": "_handleSearchInput",
              "privacy": "private",
              "description": "Handles search input within the toolbar actions"
            },
            {
              "kind": "field",
              "name": "_handleRowSelect",
              "privacy": "private",
              "description": "Handles row selection"
            },
            {
              "kind": "field",
              "name": "_handleAllRowsSelect",
              "privacy": "private",
              "description": "Handles header row selection, selecting/unselecting all rows"
            },
            {
              "kind": "field",
              "name": "_handleCancelSelection",
              "privacy": "private",
              "description": "Handles cancel button within the toolbar actions"
            },
            {
              "kind": "method",
              "name": "firstUpdated"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "method",
              "name": "_enableSortAction",
              "description": "Adds isSortable value for table header cells."
            },
            {
              "kind": "field",
              "name": "eventBeforeSort",
              "static": true,
              "description": "The name of the custom event fired before a new sort direction is set upon a user gesture.\nCancellation of this event stops the user-initiated change in sort direction.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventSearchInput",
              "static": true,
              "description": "The name of the custom event fired during search bar input",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventBeforeChangeSelectionAll",
              "static": true,
              "description": "The name of the custom event fired before header row is selected/unselected upon a user gesture.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventBeforeChangeSelection",
              "static": true,
              "description": "The name of the custom event fired before a row is selected/unselected upon a user gesture.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventClickCancel",
              "static": true,
              "description": "The name of the custom event fired after the Cancel button is clicked.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventExpandoToggle",
              "static": true,
              "description": "The name of the custom event fired after the expanded state a row is toggled upon a user gesture.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventTableRowSelect",
              "static": true,
              "description": "The name of the custom event fired after a row has been selected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventTableRowSelectAll",
              "static": true,
              "description": "The name of the custom event fired after all rows have been selected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventTableSorted",
              "static": true,
              "description": "The name of the custom event fired after the table has been sorted",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventTableFiltered",
              "static": true,
              "description": "The name of the custom event fired after the table has been filtered containing remaining rows.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorTableCellOverflowMenu",
              "static": true,
              "description": "The CSS selector to find the overflow menu on the table cell",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorToolbarDownload",
              "static": true,
              "description": "The CSS selector to find the download button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorTableBatchActions",
              "static": true,
              "description": "The CSS selector to find the table batch actions",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorTableToolbar",
              "static": true,
              "description": "The CSS selector to find the table toolbar",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorTableToolbarContent",
              "static": true,
              "description": "The CSS selector to find the table toolbar content",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorTableToolbarSearch",
              "static": true,
              "description": "The CSS selector to find the table toolbar search",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorTableHead",
              "static": true,
              "description": "The CSS selector to find the table head",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorTableBody",
              "static": true,
              "description": "The CSS selector to find the table body",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorTableExpandedRows",
              "static": true,
              "description": "The CSS selector to find the table expanded rows",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorTableRow",
              "static": true,
              "description": "The CSS selector to find the table rows",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorTableRowCells",
              "static": true,
              "description": "The CSS selector to find the rows cells.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorTableCells",
              "static": true,
              "description": "The CSS selector to find the rows cells, including header cells.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorHeaderCell",
              "static": true,
              "description": "The CSS selector to find the header cell",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorRowsWithHeader",
              "static": true,
              "description": "The CSS selector to find the rows, including header rows.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorAllRows",
              "static": true,
              "description": "The CSS selector to find all rows",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The name of the custom event fired before a new sort direction is set upon a user gesture. Cancellation of this event stops the user-initiated change in sort direction.",
              "name": "cds-table-header-cell-sort"
            },
            {
              "description": "input The name of the custom event fired during search bar input",
              "name": "cds-search"
            },
            {
              "description": "The name of the custom event fired before header row is selected/unselected upon a user gesture.",
              "name": "cds-table-change-selection-all"
            },
            {
              "description": "The name of the custom event fired before a row is selected/unselected upon a user gesture.",
              "name": "cds-table-row-change-selection"
            },
            {
              "description": "The name of the custom event fired after the Cancel button is clicked.",
              "name": "cds-table-batch-actions-cancel-clicked"
            },
            {
              "description": "The name of the custom event fired after the expanded state of a row is toggled upon a user gesture.",
              "name": "cds-table-row-expando-toggled"
            },
            {
              "description": "The name of the custom event fired after a row has been selected.",
              "name": "cds-table-row-selected"
            },
            {
              "description": "The name of the custom event fired after all rows have been selected.",
              "name": "cds-table-row-all-selected"
            },
            {
              "description": "The name of the custom event fired after the table has been sorted.",
              "name": "cds-table-sorted"
            },
            {
              "description": "The name of the custom event fired after the table has been filtered containing remaining rows.",
              "name": "cds-table-filtered"
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-table",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TABLE_SIZE",
          "declaration": {
            "name": "TABLE_SIZE",
            "module": "src/components/data-table/table.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTable",
            "module": "src/components/data-table/table.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/append-to-plugin.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/date-picker/append-to-plugin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/css-class-plugin.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/date-picker/css-class-plugin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/date-picker-input-skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Skeleton version of the input box for date picker.",
          "name": "CDSDatePickerInputSkeleton",
          "members": [
            {
              "kind": "field",
              "name": "kind",
              "description": "Date picker input kind. Corresponds to the attribute with the same name."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSDatePickerInputSkeleton",
            "module": "src/components/date-picker/date-picker-input-skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/date-picker-input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The input box for date picker.",
          "name": "CDSDatePickerInput",
          "members": [
            {
              "kind": "field",
              "name": "_hasSlug",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`true` if there is a slug."
            },
            {
              "kind": "method",
              "name": "_handleSlugSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event."
            },
            {
              "kind": "field",
              "name": "_iconNode",
              "type": {
                "text": "SVGElement"
              },
              "privacy": "private",
              "description": "The calendar icon."
            },
            {
              "kind": "method",
              "name": "_handleClickWrapper",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `click` event on the calendar icon."
            },
            {
              "kind": "method",
              "name": "_handleInput",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "description": "The event.",
                  "name": "event"
                },
                {
                  "description": "The event target.",
                  "name": "event.target"
                }
              ],
              "description": "Handles `input` event on `<input>` in the shadow DOM."
            },
            {
              "kind": "method",
              "name": "_renderIcon",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "_hasHelperText",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "description": "`true` if there is helper text content."
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event on the default `<slot>`."
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              },
              "description": "The `<input>`, used for Flatpickr to grab."
            },
            {
              "kind": "field",
              "name": "colorScheme",
              "description": "The color scheme."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the check box should be disabled."
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the label should be hidden."
            },
            {
              "kind": "field",
              "name": "warn",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the control is currently in warning state"
            },
            {
              "kind": "field",
              "name": "warnText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Provide the text that is displayed when the control is in warning state"
            },
            {
              "kind": "field",
              "name": "invalidText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Message which is displayed if the value is invalid."
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Controls the invalid state and visibility of the `validityMessage`."
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "Date picker input kind."
            },
            {
              "kind": "field",
              "name": "labelText",
              "type": {
                "text": "string"
              },
              "description": "The label text."
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "description": "The `pattern` attribute for the `<input>` in the shadow DOM."
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "The placeholder text."
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify if the component should be read-only"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the value is required."
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Vertical size of this date picker input."
            },
            {
              "kind": "field",
              "name": "short",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "true to use the short version."
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "description": "The `type` attribute for the `<input>` in the shadow DOM."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The value."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "method",
              "name": "updated"
            },
            {
              "kind": "field",
              "name": "defaultPattern",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'\\\\d{1,2}\\\\/\\\\d{1,2}\\\\/\\\\d{4}'",
              "description": "The default value for `pattern` property."
            },
            {
              "kind": "field",
              "name": "defaultType",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'text'",
              "description": "The default value for `type` property."
            },
            {
              "kind": "field",
              "name": "selectorParent",
              "static": true,
              "description": "A selector that will return the parent date picker.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "slugItem",
              "static": true,
              "description": "A selector that will return the slug item.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-date-picker-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DATE_PICKER_INPUT_COLOR_SCHEME",
          "declaration": {
            "name": "DATE_PICKER_INPUT_COLOR_SCHEME",
            "module": "src/components/date-picker/date-picker-input.ts"
          }
        },
        {
          "kind": "js",
          "name": "DATE_PICKER_INPUT_KIND",
          "declaration": {
            "name": "DATE_PICKER_INPUT_KIND",
            "module": "src/components/date-picker/date-picker-input.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSDatePickerInput",
            "module": "src/components/date-picker/date-picker-input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/date-picker-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Simple"
        },
        {
          "kind": "function",
          "name": "SimpleWithLayer"
        },
        {
          "kind": "function",
          "name": "singleWithCalendar"
        },
        {
          "kind": "function",
          "name": "singleWithCalendarWithLayer"
        },
        {
          "kind": "function",
          "name": "rangeWithCalendar"
        },
        {
          "kind": "function",
          "name": "rangeWithCalendarWithLayer"
        },
        {
          "kind": "function",
          "name": "Skeleton"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Simple",
          "declaration": {
            "name": "Simple",
            "module": "src/components/date-picker/date-picker-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "SimpleWithLayer",
          "declaration": {
            "name": "SimpleWithLayer",
            "module": "src/components/date-picker/date-picker-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "singleWithCalendar",
          "declaration": {
            "name": "singleWithCalendar",
            "module": "src/components/date-picker/date-picker-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "singleWithCalendarWithLayer",
          "declaration": {
            "name": "singleWithCalendarWithLayer",
            "module": "src/components/date-picker/date-picker-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "rangeWithCalendar",
          "declaration": {
            "name": "rangeWithCalendar",
            "module": "src/components/date-picker/date-picker-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "rangeWithCalendarWithLayer",
          "declaration": {
            "name": "rangeWithCalendarWithLayer",
            "module": "src/components/date-picker/date-picker-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Skeleton",
          "declaration": {
            "name": "Skeleton",
            "module": "src/components/date-picker/date-picker-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/date-picker/date-picker-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/date-picker/date-picker-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/date-picker.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Date picker.",
          "name": "CDSDatePicker",
          "members": [
            {
              "kind": "field",
              "name": "_dateInteractNode",
              "type": {
                "text": "CDSDatePickerInput | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "The slotted `<cds-date-input kind=\"from\">`."
            },
            {
              "kind": "field",
              "name": "_floatingMenuContainerNode",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private",
              "description": "The element to put calendar dropdown in."
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "description": "The internal placeholder for the `value` property."
            },
            {
              "kind": "field",
              "name": "_mode",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_datePickerPlugins",
              "type": {
                "text": "FlatpickrPlugin[]"
              },
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_datePickerOptions",
              "type": {
                "text": "FlatpickrOptions"
              },
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_handleChange",
              "privacy": "private",
              "description": "Handles `${prefix}-date-picker-changed` event on this element."
            },
            {
              "kind": "method",
              "name": "_handleFormdata",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `formdata` event.",
              "inheritedFrom": {
                "name": "FormMixin",
                "module": "src/globals/mixins/form.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event in the `<slot>`."
            },
            {
              "kind": "field",
              "name": "_handleFlatpickrError",
              "privacy": "private",
              "description": "Fires a custom event to notify an error in Flatpickr."
            },
            {
              "kind": "method",
              "name": "_instantiateDatePicker",
              "privacy": "private",
              "description": "Instantiates Flatpickr.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_releaseDatePicker",
              "privacy": "private",
              "description": "Releases Flatpickr instances."
            },
            {
              "kind": "field",
              "name": "calendar",
              "type": {
                "text": "FlatpickrInstance | null"
              },
              "default": "null",
              "description": "The Flatpickr instance."
            },
            {
              "kind": "field",
              "name": "allowInput",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "flatpickr prop passthrough. Allows the user to enter a date directly into the input field"
            },
            {
              "kind": "field",
              "name": "closeOnSelect",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "flatpickr prop passthrough. Controls whether the calendar dropdown closes upon selection."
            },
            {
              "kind": "field",
              "name": "dateFormat",
              "type": {
                "text": "string"
              },
              "description": "The date format to let Flatpickr use."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Controls the disabled state of the input"
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "FlatpickrLocale"
              },
              "description": "The localization data."
            },
            {
              "kind": "field",
              "name": "enabledRange",
              "type": {
                "text": "string"
              },
              "description": "The date range that a user can pick in calendar dropdown."
            },
            {
              "kind": "field",
              "name": "minDate",
              "type": {
                "text": "string"
              },
              "description": "The minimum date that a user can start picking from."
            },
            {
              "kind": "field",
              "name": "maxDate",
              "type": {
                "text": "string"
              },
              "description": "The maximum date that a user can start picking from."
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Name for the input in the `FormData`"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the date picker should be open."
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify if the component should be read-only"
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The date(s) in ISO8601 format (date portion only), for range mode, '/' is used for separate start/end dates."
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "_selectorFlatpickrMonthYearContainer",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "default": "'.flatpickr-current-month'",
              "description": "The CSS selector for Flatpickr's month/year portion."
            },
            {
              "kind": "field",
              "name": "_selectorFlatpickrYearContainer",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "default": "'.numInputWrapper'",
              "description": "The CSS selector for Flatpickr's year portion."
            },
            {
              "kind": "field",
              "name": "_selectorFlatpickrCurrentMonth",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "default": "'.cur-month'",
              "description": "The CSS selector for the inner element of Flatpickr's month portion."
            },
            {
              "kind": "field",
              "name": "_selectorFlatpickrMonth",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "default": "'.flatpickr-month'",
              "description": "The CSS selector for Flatpickr's month navigator."
            },
            {
              "kind": "field",
              "name": "_selectorFlatpickrWeekdays",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "default": "'.flatpickr-weekdays'",
              "description": "The CSS selector for Flatpickr's container of the weekdays."
            },
            {
              "kind": "field",
              "name": "_selectorFlatpickrDays",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "default": "'.flatpickr-days'",
              "description": "The CSS selector for Flatpickr's container of the days."
            },
            {
              "kind": "field",
              "name": "_selectorFlatpickrWeekday",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "default": "'.flatpickr-weekday'",
              "description": "The CSS selector applied to Flatpickr's each weekdays."
            },
            {
              "kind": "field",
              "name": "_selectorFlatpickrDay",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "default": "'.flatpickr-day'",
              "description": "The CSS selector applied to Flatpickr's each days."
            },
            {
              "kind": "field",
              "name": "_classFlatpickrCurrentMonth",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "default": "'cur-month'",
              "description": "The CSS class for the inner element of Flatpickr's month portion."
            },
            {
              "kind": "field",
              "name": "_classFlatpickrToday",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "static": true,
              "default": "'today'",
              "description": "The CSS class applied to Flatpickr's \"today\" highlight."
            },
            {
              "kind": "field",
              "name": "classCalendarContainer",
              "static": true,
              "description": "The CSS class for the calendar dropdown.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "classMonth",
              "static": true,
              "description": "The CSS class for the month navigator.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "classWeekdays",
              "static": true,
              "description": "The CSS class for the container of the weekdays.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "classDays",
              "static": true,
              "description": "The CSS class for the container of the days.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "classWeekday",
              "static": true,
              "description": "The CSS class applied to each weekdays.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "classDay",
              "static": true,
              "description": "The CSS class applied to each days.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "classNoBorder",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'no-border'",
              "description": "The CSS class applied to the \"today\" highlight if there are any dates selected."
            },
            {
              "kind": "field",
              "name": "defaultDateFormat",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'m/d/Y'",
              "description": "The default date format."
            },
            {
              "kind": "field",
              "name": "defaultLocale",
              "static": true,
              "description": "The default localization data."
            },
            {
              "kind": "field",
              "name": "selectorInputFrom",
              "static": true,
              "description": "A selector that will return the `<input>` to enter starting date.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorInputTo",
              "static": true,
              "description": "A selector that will return the `<input>` to enter end date.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventFlatpickrError",
              "static": true,
              "description": "The name of the custom event when Flatpickr throws an error.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventChange",
              "static": true,
              "description": "The name of the custom event fired on this element when Flatpickr updates its value.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hFormdata",
              "type": {
                "text": "Handle | null"
              },
              "default": "null",
              "description": "The handle for `formdata` event listener on the containing form.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormMixin",
                "module": "src/globals/mixins/form.ts"
              }
            }
          ],
          "events": [
            {
              "description": "The custom event fired on this element when Flatpickr updates its value.",
              "name": "cds-date-picker-changed"
            },
            {
              "description": "The name of the custom event when Flatpickr throws an error.",
              "name": "cds-date-picker-flatpickr-error"
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            },
            {
              "name": "FormMixin",
              "module": "/src/globals/mixins/form"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-date-picker",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSDatePicker",
            "module": "src/components/date-picker/date-picker.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/defs.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "DATE_PICKER_INPUT_COLOR_SCHEME",
          "declaration": {
            "name": "FORM_ELEMENT_COLOR_SCHEME",
            "module": "../../globals/shared-enums"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/fix-events-plugin.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/date-picker/fix-events-plugin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/focus-plugin.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/date-picker/focus-plugin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/icon-plugin.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/date-picker/icon-plugin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/iso-date.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getISODateString",
          "parameters": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              },
              "description": "A date."
            }
          ],
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "parseISODateString",
          "parameters": [
            {
              "name": "s",
              "type": {
                "text": "string"
              },
              "description": "A date portion of an ISO8601 string, based on the local timezone."
            }
          ],
          "return": {
            "type": {
              "text": ""
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getISODateString",
          "declaration": {
            "name": "getISODateString",
            "module": "src/components/date-picker/iso-date.ts"
          }
        },
        {
          "kind": "js",
          "name": "parseISODateString",
          "declaration": {
            "name": "parseISODateString",
            "module": "src/components/date-picker/iso-date.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/month-select-plugin.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/date-picker/month-select-plugin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/range-plugin.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/date-picker/range-plugin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/shadow-dom-events-plugin.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/date-picker/shadow-dom-events-plugin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/state-handshake-plugin.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/date-picker/state-handshake-plugin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dropdown/defs.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "NAVIGATION_DIRECTION",
          "type": {
            "text": "object"
          },
          "default": "{ Up: -1, ArrowUp: -1, Down: 1, ArrowDown: 1, }",
          "description": "Navigation direction, associated with key symbols."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DROPDOWN_COLOR_SCHEME",
          "declaration": {
            "name": "FORM_ELEMENT_COLOR_SCHEME",
            "module": "../../globals/shared-enums"
          }
        },
        {
          "kind": "js",
          "name": "NAVIGATION_DIRECTION",
          "declaration": {
            "name": "NAVIGATION_DIRECTION",
            "module": "src/components/dropdown/defs.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dropdown/dropdown-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Dropdown item.",
          "name": "CDSDropdownItem",
          "cssParts": [
            {
              "description": "The selected icon.",
              "name": "selected-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this dropdown item should be disabled."
            },
            {
              "kind": "field",
              "name": "highlighted",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this dropdown item should be highlighted.\nIf `true`, parent `<dropdown>` selects/deselects this dropdown item upon keyboard interaction.",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this dropdown item should be selected.",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Dropdown size."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `value` attribute that is set to the parent `<cds-dropdown>` when this dropdown item is selected."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "id",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "0",
              "description": "Store an identifier for use in composing this item's id.\n\nAuto-increments anytime a new dropdown-item appears."
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-dropdown-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSDropdownItem",
            "module": "src/components/dropdown/dropdown-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dropdown/dropdown-skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Skeleton version of dropdown.",
          "name": "CDSDropdownSkeleton",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSDropdownSkeleton",
            "module": "src/components/dropdown/dropdown-skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dropdown/dropdown-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Inline"
        },
        {
          "kind": "function",
          "name": "InlineWithLayer"
        },
        {
          "kind": "function",
          "name": "WithLayer"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "skeleton"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/dropdown/dropdown-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Inline",
          "declaration": {
            "name": "Inline",
            "module": "src/components/dropdown/dropdown-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "InlineWithLayer",
          "declaration": {
            "name": "InlineWithLayer",
            "module": "src/components/dropdown/dropdown-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "WithLayer",
          "declaration": {
            "name": "WithLayer",
            "module": "src/components/dropdown/dropdown-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/dropdown/dropdown-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "skeleton",
          "declaration": {
            "name": "skeleton",
            "module": "src/components/dropdown/dropdown-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/dropdown/dropdown-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dropdown/dropdown.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Dropdown.",
          "name": "CDSDropdown",
          "cssParts": [
            {
              "description": "The label text.",
              "name": "label-text"
            },
            {
              "description": "The helper text.",
              "name": "helper-text"
            },
            {
              "description": "The trigger button.",
              "name": "trigger-button"
            },
            {
              "description": "The menu body.",
              "name": "menu-body"
            },
            {
              "description": "The validity message.",
              "name": "validity-message"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_hasSlug",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "description": "`true` if there is a slug."
            },
            {
              "kind": "field",
              "name": "_activeDescendant",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_selectedItemContent",
              "type": {
                "text": "DocumentFragment | null"
              },
              "privacy": "protected",
              "default": "null",
              "description": "The content of the selected item."
            },
            {
              "kind": "field",
              "name": "_shouldTriggerBeFocusable",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "description": "`true` if the trigger button should be focusable.\nDerived class can set `false` to this if the trigger button contains another primary focusable element (e.g. `<input>`)."
            },
            {
              "kind": "field",
              "name": "_listBoxNode",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "protected",
              "description": "The list box `<div>` node."
            },
            {
              "kind": "field",
              "name": "_slotHelperTextNode",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "protected",
              "description": "The `<slot>` element for the helper text in the shadow DOM."
            },
            {
              "kind": "field",
              "name": "_slotTitleTextNode",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "protected",
              "description": "The `<slot>` element for the title text in the shadow DOM."
            },
            {
              "kind": "method",
              "name": "_selectionShouldChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "itemToSelect",
                  "optional": true,
                  "type": {
                    "text": "CDSDropdownItem"
                  },
                  "description": "A dropdown item. Absense of this argument means clearing selection."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_selectionDidChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "itemToSelect",
                  "optional": true,
                  "type": {
                    "text": "CDSDropdownItem"
                  },
                  "description": "  A dropdown item.\n  Absense of this argument means clearing selection, which may be handled by a derived class."
                }
              ],
              "description": "A callback that runs after change in dropdown selection upon user interaction is confirmed."
            },
            {
              "kind": "method",
              "name": "_handleClickInner",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `click` event on the top-level element in the shadow DOM."
            },
            {
              "kind": "method",
              "name": "_handleKeydownInner",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handler for the `keydown` event on the top-level element in the shadow DOM."
            },
            {
              "kind": "method",
              "name": "_handleKeypressInner",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handler for the `keypress` event on the top-level element in the shadow DOM."
            },
            {
              "kind": "method",
              "name": "_handleFocusOut",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `blur` event handler on the document this element is in."
            },
            {
              "kind": "method",
              "name": "_handleSlotchangeHelperText",
              "privacy": "protected",
              "description": "Handles `slotchange` event for the `<slot>` for helper text."
            },
            {
              "kind": "method",
              "name": "_handleSlotchangeLabelText",
              "privacy": "protected",
              "description": "Handles `slotchange` event for the `<slot>` for label text."
            },
            {
              "kind": "method",
              "name": "_handleSlugSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event."
            },
            {
              "kind": "method",
              "name": "_handleUserInitiatedSelectItem",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "CDSDropdownItem"
                  },
                  "description": "The dropdown item user wants to select. Absense of this argument means clearing selection."
                }
              ],
              "description": "Handles user-initiated selection of a dropdown item."
            },
            {
              "kind": "method",
              "name": "_handleUserInitiatedToggle",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "force",
                  "default": "!this.open",
                  "description": "If specified, forces the open state to the given one.",
                  "optional": true
                }
              ],
              "description": "Handles user-initiated toggling the open state."
            },
            {
              "kind": "method",
              "name": "_clearHighlight",
              "privacy": "protected",
              "description": "Clears the selection of dropdown items."
            },
            {
              "kind": "method",
              "name": "_navigate",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "number"
                  },
                  "description": "`-1` to navigate backward, `1` to navigate forward."
                }
              ],
              "description": "Navigate through dropdown items."
            },
            {
              "kind": "method",
              "name": "_renderPrecedingLabel",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderLabel",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderTitleLabel",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderFollowingLabel",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleFormdata",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles event to include selected value on the parent form.",
              "inheritedFrom": {
                "name": "FormMixin",
                "module": "src/globals/mixins/form.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "'aria-label' of the ListBox component.\nSpecify a label to be read by screen readers on the container node"
            },
            {
              "kind": "field",
              "name": "direction",
              "description": "Specify the direction of the dropdown. Can be either top or bottom."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this dropdown should be disabled."
            },
            {
              "kind": "field",
              "name": "helperText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The helper text."
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the title text should be hidden or not"
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "description": "`true` to show the UI of the invalid state.",
              "default": "false",
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalidText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Message which is displayed if the value is invalid."
            },
            {
              "kind": "field",
              "name": "titleText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Provide the title text that will be read by a screen reader when visiting this control"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Name for the dropdown in the `FormData`"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this dropdown should be open."
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the Dropdown is readonly"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "`true` if the value is required.",
              "default": "false",
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "kind": "field",
              "name": "requiredValidityMessage",
              "type": {
                "text": "string"
              },
              "description": "The special validity message for `required`.",
              "default": "'Please fill out this field.'",
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Dropdown size."
            },
            {
              "kind": "field",
              "name": "toggleLabelClosed",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `aria-label` attribute for the UI indicating the closed state."
            },
            {
              "kind": "field",
              "name": "toggleLabelOpen",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `aria-label` attribute for the UI indicating the open state."
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Generic label that will be used as the textual representation of what this field is for"
            },
            {
              "kind": "field",
              "name": "type",
              "description": "`true` if this dropdown should use the inline UI variant."
            },
            {
              "kind": "field",
              "name": "validityMessage",
              "type": {
                "text": "string"
              },
              "description": "The validity message.",
              "default": "''",
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The value of the selected item.",
              "default": "''",
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "kind": "field",
              "name": "warn",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the control is currently in warning state"
            },
            {
              "kind": "field",
              "name": "warnText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Provide the text that is displayed when the control is in warning state"
            },
            {
              "kind": "method",
              "name": "shouldUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "_changedProperties"
                }
              ]
            },
            {
              "kind": "field",
              "name": "_classes",
              "privacy": "protected",
              "description": "The CSS class list for dropdown listbox",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "TRIGGER_KEYS",
              "static": true,
              "default": "new Set([' ', 'Enter'])",
              "description": "Symbols of keys that triggers opening/closing menu and selecting/deselecting menu item."
            },
            {
              "kind": "field",
              "name": "selectorItemHighlighted",
              "static": true,
              "description": "A selector that will return highlighted items.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorItem",
              "static": true,
              "description": "A selector that will return dropdown items.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorItemSelected",
              "static": true,
              "description": "A selector that will return selected items.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventBeforeSelect",
              "static": true,
              "description": "The name of the custom event fired before a dropdown item is selected upon a user gesture.\nCancellation of this event stops changing the user-initiated selection.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventSelect",
              "static": true,
              "description": "The name of the custom event fired after a a dropdown item is selected upon a user gesture.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventBeforeToggle",
              "static": true,
              "description": "The name of the custom event fired before this dropdown item is being toggled upon a user gesture.\nCancellation of this event stops the user-initiated action of toggling this dropdown item.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventToggle",
              "static": true,
              "description": "The name of the custom event fired after this dropdown item is toggled upon a user gesture.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "slugItem",
              "static": true,
              "description": "A selector that will return the slug item.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "method",
              "name": "getAction",
              "static": true,
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_getValidityMessage",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string"
                  },
                  "description": "The form validation status."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "kind": "method",
              "name": "_testValidity",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Checks if the value meets the constraints.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Checks if the value meets the constraints.\nFires cancelable `invalid` event if it doesn't.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "validityMessage",
                  "type": {
                    "text": "string"
                  },
                  "description": "The custom validity message"
                }
              ],
              "description": "Sets the given custom validity message.",
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hFormdata",
              "type": {
                "text": "Handle | null"
              },
              "default": "null",
              "description": "The handle for `formdata` event listener on the containing form.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormMixin",
                "module": "src/globals/mixins/form.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "events": [
            {
              "name": "eventBeforeToggle",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "eventToggle",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The custom event fired before a dropdown item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection.",
              "name": "cds-dropdown-beingselected"
            },
            {
              "description": "The custom event fired before the open state of this dropdown is toggled upon a user gesture. Cancellation of this event stops the user-initiated toggling.",
              "name": "cds-dropdown-beingtoggled"
            },
            {
              "description": "The custom event fired after a dropdown item is selected upon a user gesture.",
              "name": "cds-dropdown-selected"
            },
            {
              "description": "The custom event fired after the open state of this dropdown is toggled upon a user gesture.",
              "name": "cds-dropdown-toggled"
            },
            {
              "name": "invalid",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "ValidityMixin",
              "module": "/src/globals/mixins/validity"
            },
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            },
            {
              "name": "FormMixin",
              "module": "/src/globals/mixins/form"
            },
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-dropdown",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DROPDOWN_KEYBOARD_ACTION",
          "declaration": {
            "name": "DROPDOWN_KEYBOARD_ACTION",
            "module": "src/components/dropdown/dropdown.ts"
          }
        },
        {
          "kind": "js",
          "name": "DROPDOWN_DIRECTION",
          "declaration": {
            "name": "DROPDOWN_DIRECTION",
            "module": "src/components/dropdown/dropdown.ts"
          }
        },
        {
          "kind": "js",
          "name": "DROPDOWN_SIZE",
          "declaration": {
            "name": "DROPDOWN_SIZE",
            "module": "src/components/dropdown/dropdown.ts"
          }
        },
        {
          "kind": "js",
          "name": "DROPDOWN_TYPE",
          "declaration": {
            "name": "DROPDOWN_TYPE",
            "module": "src/components/dropdown/dropdown.ts"
          }
        },
        {
          "kind": "js",
          "name": "NAVIGATION_DIRECTION",
          "declaration": {
            "name": "NAVIGATION_DIRECTION",
            "module": "src/components/dropdown/dropdown.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSDropdown",
            "module": "src/components/dropdown/dropdown.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dropdown/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/file-uploader/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/file-uploader/demo-file-uploader.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A class to manage file uploading states, like sending file contents to server.\nDEMONSTRATION-PURPOSE ONLY.\nData/state handling in file uploading tends to involve lots of application-specific logics\nand thus abstracting everything in a library won't be a good return on investment\nvs. letting users copy code here and implement features that fit their needs.",
          "name": "CDSCEDemoFileUploader",
          "members": [
            {
              "kind": "field",
              "name": "_files",
              "type": {
                "text": "FileData[]"
              },
              "privacy": "private",
              "default": "[]",
              "description": "The files being uploaded."
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `cds-drop-container-changed` on `<cds-file-drop-container>`."
            },
            {
              "kind": "method",
              "name": "_handleDelete",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `cds-file-uploader-item-deleted` on `<cds-file-uploader-item>`."
            },
            {
              "kind": "method",
              "name": "_simulateUpload",
              "privacy": "private",
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "FileData"
                  },
                  "description": "The data of the file being uploaded."
                }
              ],
              "description": "Simulates updating file."
            },
            {
              "kind": "field",
              "name": "accept",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The file types the file input should accept, separated by space."
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the drop container should be disabled."
            },
            {
              "kind": "field",
              "name": "buttonKind",
              "type": {
                "text": "string"
              },
              "default": "'primary'",
              "description": "Button kind."
            },
            {
              "kind": "field",
              "name": "buttonLabel",
              "type": {
                "text": "string"
              },
              "default": "'Add file'",
              "description": "Button label."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the drop container should be disabled."
            },
            {
              "kind": "field",
              "name": "iconDescription",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Icon description."
            },
            {
              "kind": "field",
              "name": "inputName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input name."
            },
            {
              "kind": "field",
              "name": "labelDescription",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label description text."
            },
            {
              "kind": "field",
              "name": "labelTitle",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label title."
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the drop container should accept more than one files at once.\nNote that even with `false` set here, user _can_ select multiple files one by one."
            },
            {
              "kind": "field",
              "name": "size",
              "description": "The size of the button item."
            },
            {
              "kind": "field",
              "name": "inputState",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The state of this file uploader item."
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSCEDemoFileUploader",
            "module": "src/components/file-uploader/demo-file-uploader.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/file-uploader/file-uploader-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "File uploader button .",
          "name": "CDSFileUploaderButton",
          "members": [
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event"
                }
              ],
              "description": "Handles `click` event on the button."
            },
            {
              "kind": "method",
              "name": "_handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event"
                }
              ],
              "description": "Handles `keydown` event on the button."
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event | DragEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles user gesture to select files to upload."
            },
            {
              "kind": "method",
              "name": "_getFiles",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event | DragEvent"
                  },
                  "description": "The event."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "buttonKind",
              "description": "Button kind."
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Button size."
            },
            {
              "kind": "field",
              "name": "accept",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The file types the file input should accept, separated by space."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this drop container should be disabled."
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this drop container should accept more than one files at once.\nNote that even with `false` set here, user _can_ select multiple files one by one."
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the input."
            },
            {
              "kind": "field",
              "name": "slot",
              "type": {
                "text": "string"
              },
              "default": "'drop-container'",
              "description": "The shadow DOM slot to put this drop container in."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "eventChange",
              "static": true,
              "description": "The name of the custom event fired when there is a user gesture to select files to upload.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorInput",
              "static": true,
              "description": "A selector that will return the file `<input>`.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            }
          ],
          "events": [
            {
              "name": "eventChange",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The custom event fired when there is a user gesture to select files to upload.",
              "name": "cds-file-uploader-button-changed"
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-file-uploader-container",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TILE_COLOR_SCHEME",
          "declaration": {
            "name": "FORM_ELEMENT_COLOR_SCHEME",
            "module": "../../globals/shared-enums"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSFileUploaderButton",
            "module": "src/components/file-uploader/file-uploader-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/file-uploader/file-uploader-drop-container.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "File uploader drop container.",
          "name": "CDSFileUploaderDropContainer",
          "members": [
            {
              "kind": "field",
              "name": "_active",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`true` to show the active state of this UI."
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event | DragEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles user gesture to select files to upload."
            },
            {
              "kind": "method",
              "name": "_handleDrag",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "DragEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `dragover`, `dragleave` and `drop` events."
            },
            {
              "kind": "method",
              "name": "_getFiles",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "description": "The event."
                },
                {
                  "name": "files"
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "accept",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The file types the file input should accept, separated by space."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this drop container should be disabled."
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this drop container should accept more than one files at once.\nNote that even with `false` set here, user _can_ select multiple files one by one."
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the input."
            },
            {
              "kind": "field",
              "name": "slot",
              "type": {
                "text": "string"
              },
              "default": "'drop-container'",
              "description": "The shadow DOM slot to put this drop container in."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "eventChange",
              "static": true,
              "description": "The name of the custom event fired when there is a user gesture to select files to upload.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorInput",
              "static": true,
              "description": "A selector that will return the file `<input>`.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            }
          ],
          "events": [
            {
              "name": "eventChange",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The custom event fired when there is a user gesture to select files to upload.",
              "name": "cds-file-uploader-drop-container-changed"
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-file-uploader-drop-container",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TILE_COLOR_SCHEME",
          "declaration": {
            "name": "FORM_ELEMENT_COLOR_SCHEME",
            "module": "../../globals/shared-enums"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSFileUploaderDropContainer",
            "module": "src/components/file-uploader/file-uploader-drop-container.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/file-uploader/file-uploader-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "File uploader item.",
          "name": "CDSFileUploaderItem",
          "slots": [
            {
              "description": "The validity message.",
              "name": "validity-message"
            },
            {
              "description": "The supplemental validity message.",
              "name": "validity-message-supplement"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "_handleClickDeleteButton",
              "privacy": "private",
              "description": "Handles `click` event on the delete button."
            },
            {
              "kind": "method",
              "name": "_renderEditing",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderUploading",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderUploaded",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderStatus",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "iconDescription",
              "type": {
                "text": "string"
              },
              "default": "'Delete this file'",
              "description": "The `aria-label` attribute for the icon to delete this file uploader item."
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Controls the invalid state and visibility of the `validityMessage`."
            },
            {
              "kind": "field",
              "name": "size",
              "description": "The size of this file uploader item."
            },
            {
              "kind": "field",
              "name": "state",
              "description": "The state of this file uploader item."
            },
            {
              "kind": "field",
              "name": "errorSubject",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The error subject text."
            },
            {
              "kind": "field",
              "name": "errorBody",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The error body text"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "eventBeforeDelete",
              "static": true,
              "description": "The name of the custom event fired before this file uplodaer item is being deleted upon a user gesture.\nCancellation of this event stops the user-initiated action of deleting this file uploader item.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventDelete",
              "static": true,
              "description": "The name of the custom event fired after this file uplodaer item is deleted upon a user gesture.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "events": [
            {
              "name": "eventBeforeDelete",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "eventDelete",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The custom event fired before this file uploader item is being deleted upon a user gesture. Cancellation of this event stops the user-initiated action of deleting this file uploader item.",
              "name": "cds-file-uploader-item-beingdeleted"
            },
            {
              "description": "The custom event fired after this file uploader item is deleted upon a user gesture.",
              "name": "cds-file-uploader-item-deleted"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-file-uploader-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FILE_UPLOADER_ITEM_SIZE",
          "declaration": {
            "name": "FILE_UPLOADER_ITEM_SIZE",
            "module": "src/components/file-uploader/file-uploader-item.ts"
          }
        },
        {
          "kind": "js",
          "name": "FILE_UPLOADER_ITEM_STATE",
          "declaration": {
            "name": "FILE_UPLOADER_ITEM_STATE",
            "module": "src/components/file-uploader/file-uploader-item.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSFileUploaderItem",
            "module": "src/components/file-uploader/file-uploader-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/file-uploader/file-uploader-skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The File uploader skeleton.",
          "name": "CDSFileUploaderSkeleton",
          "members": [
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-file-uploader-skeleton",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSFileUploaderSkeleton",
            "module": "src/components/file-uploader/file-uploader-skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/file-uploader/file-uploader-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "DragAndDropUploadContainerExampleApplication"
        },
        {
          "kind": "function",
          "name": "FileUploaderDropContainer"
        },
        {
          "kind": "function",
          "name": "FileUploaderItem"
        },
        {
          "kind": "function",
          "name": "Skeleton"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/file-uploader/file-uploader-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "DragAndDropUploadContainerExampleApplication",
          "declaration": {
            "name": "DragAndDropUploadContainerExampleApplication",
            "module": "src/components/file-uploader/file-uploader-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "FileUploaderDropContainer",
          "declaration": {
            "name": "FileUploaderDropContainer",
            "module": "src/components/file-uploader/file-uploader-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "FileUploaderItem",
          "declaration": {
            "name": "FileUploaderItem",
            "module": "src/components/file-uploader/file-uploader-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Skeleton",
          "declaration": {
            "name": "Skeleton",
            "module": "src/components/file-uploader/file-uploader-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/file-uploader/file-uploader-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/file-uploader/file-uploader-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/file-uploader/file-uploader.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The shell UI for file uploader.",
          "name": "CDSFileUploader",
          "slots": [
            {
              "name": "label-title."
            },
            {
              "name": "lebel-description."
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the file uploader should disabled."
            },
            {
              "kind": "field",
              "name": "labelDescription",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The description text."
            },
            {
              "kind": "field",
              "name": "labelTitle",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label title."
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selectorUploaderItem",
              "static": true,
              "description": "A selector that will return the `<input>` to enter starting date.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-file-uploader",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSFileUploader",
            "module": "src/components/file-uploader/file-uploader.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/file-uploader/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/floating-menu/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/floating-menu/floating-menu-trigger.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSFloatingMenuTrigger",
            "module": "src/components/floating-menu/floating-menu-trigger.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/floating-menu/floating-menu.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Floating menu.",
          "name": "CDSFloatingMenu",
          "members": [
            {
              "kind": "field",
              "name": "_hObserveResizeParent",
              "type": {
                "text": "Handle | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "The handle for observing resize of the element containing the trigger button."
            },
            {
              "kind": "field",
              "name": "_hObserveResizeContainer",
              "type": {
                "text": "Handle | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "The handle for observing resize of the floating menu container."
            },
            {
              "kind": "field",
              "name": "_resizeObserver",
              "privacy": "private",
              "default": "new ResizeObserver(() => { const { container, open, parent, position } = this; if (container && open && parent) { const { direction, start, top } = position; this.style[ direction !== FLOATING_MENU_POSITION_DIRECTION.RTL ? 'left' : 'right' ] = `${start}px`; this.style.top = `${top}px`; } })",
              "description": "The `ResizeObserver` instance for observing element resizes for re-positioning floating menu position."
            },
            {
              "kind": "field",
              "name": "_handleBlur",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_click",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleKeyDown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "parent",
              "type": {
                "text": "CDSFloatingMenuTrigger | null"
              },
              "privacy": "protected",
              "default": "null",
              "description": "The DOM element, typically a custom element in this library, launching this floating menu."
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "FLOATING_MENU_DIRECTION"
              },
              "description": "The menu direction."
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "description": "`true` if the menu should be open."
            },
            {
              "kind": "field",
              "name": "flipped",
              "type": {
                "text": "boolean"
              },
              "description": "`true` if the menu alignment should be flipped."
            },
            {
              "kind": "field",
              "name": "container",
              "description": "The DOM element to put this menu into.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "FloatingMenuPosition"
              },
              "description": "The position of this floating menu.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "field",
              "name": "FLOATING_MENU",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "description": "A constant indicating that this class is a floating menu."
            },
            {
              "kind": "field",
              "name": "selectorContainer",
              "static": true,
              "description": "The CSS selector to find the element to put this floating menu in.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            },
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FLOATING_MENU_DIRECTION",
          "declaration": {
            "name": "FLOATING_MENU_DIRECTION",
            "module": "src/components/floating-menu/floating-menu.ts"
          }
        },
        {
          "kind": "js",
          "name": "FLOATING_MENU_POSITION_DIRECTION",
          "declaration": {
            "name": "FLOATING_MENU_POSITION_DIRECTION",
            "module": "src/components/floating-menu/floating-menu.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSFloatingMenu",
            "module": "src/components/floating-menu/floating-menu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/floating-menu/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/form/form-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Presentational element for form items",
          "name": "CDSFormItem",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-form-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSFormItem",
            "module": "src/components/form/form-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/form/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/form-group/form-group-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/form-group/form-group-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/form-group/form-group-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/form-group/form-group-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/form-group/form-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The shell UI for file uploader.",
          "name": "CDSFormGroup",
          "slots": [
            {
              "name": "label-title."
            },
            {
              "name": "lebel-description."
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the Form Group is invalid"
            },
            {
              "kind": "field",
              "name": "legendId",
              "description": "Provide id for the fieldset <legend> which corresponds to the fieldset\n`aria-labelledby`"
            },
            {
              "kind": "field",
              "name": "legendText",
              "type": {
                "text": "string"
              },
              "description": "Provide the text to be rendered inside of the fieldset <legend>"
            },
            {
              "kind": "field",
              "name": "message",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the message should be displayed in the Form Group"
            },
            {
              "kind": "field",
              "name": "messageText",
              "description": "Provide the text for the message in the Form Group"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-form-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSFormGroup",
            "module": "src/components/form-group/form-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/form-group/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/icon-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "withCustomClass"
        },
        {
          "kind": "function",
          "name": "withAriaLabel"
        },
        {
          "kind": "function",
          "name": "withTitle"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/icon/icon-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "withCustomClass",
          "declaration": {
            "name": "withCustomClass",
            "module": "src/components/icon/icon-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "withAriaLabel",
          "declaration": {
            "name": "withAriaLabel",
            "module": "src/components/icon/icon-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "withTitle",
          "declaration": {
            "name": "withTitle",
            "module": "src/components/icon/icon-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/icon/icon-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon-button/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon-button/icon-button-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/icon-button/icon-button-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/icon-button/icon-button-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/icon-button/icon-button-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon-button/icon-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Icon Button",
          "name": "CDSIconButton",
          "members": [
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "string"
              },
              "default": "'top'",
              "description": "Specify how the trigger should align with the tooltip"
            },
            {
              "kind": "field",
              "name": "autoalign",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether a auto align functionality should be applied"
            },
            {
              "kind": "field",
              "name": "closeOnActivation",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Determines whether the tooltip should close when inner content is activated (click, Enter or Space)"
            },
            {
              "kind": "field",
              "name": "defaultOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the tooltip should be open when it first renders"
            },
            {
              "kind": "field",
              "name": "enterDelayMs",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "Specify the duration in milliseconds to delay before displaying the tooltip"
            },
            {
              "kind": "field",
              "name": "leaveDelayMs",
              "type": {
                "text": "number"
              },
              "default": "300",
              "description": "Specify the duration in milliseconds to delay before hiding the tooltip"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "string"
              },
              "default": "'md'",
              "description": "Specify the size of the Button. Defaults to `md`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderTooltipContent",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasIcon",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`true` if there is an icon.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleDisabledClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleOver",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleHoverOut",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocus",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocusout",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button should have input focus when the page loads.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "batchAction",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button is being used within a data table batch action toolbar",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "buttonClassName",
              "description": "Specify an optional className to be added to your Button",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "dangerDescriptor",
              "description": "Specify the message read by screen readers for the danger button variant",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button should be disabled.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "description": "The default file name, used if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasMainContent",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if there is a non-icon content.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Link `href`. If present, this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "hreflang",
              "type": {
                "text": "string"
              },
              "description": "The language of what `href` points to, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "isExpressive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if expressive theme enabled.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "isSelected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the Button is currently selected.\nOnly applies to the Ghost variant.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "Button kind.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "linkRole",
              "type": {
                "text": "string"
              },
              "default": "'button'",
              "description": "The a11y role for `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "openTooltip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to determine if tooltip is open.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "ping",
              "type": {
                "text": "string"
              },
              "description": "URLs to ping, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "description": "The link type, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "string"
              },
              "description": "The link target, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipAlignment",
              "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipPosition",
              "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipText",
              "type": {
                "text": "string"
              },
              "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Button type.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            }
          ],
          "superclass": {
            "name": "CDSButton",
            "module": "/src/components/button/button"
          },
          "cssParts": [
            {
              "description": "The button.",
              "name": "button",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ICON_BUTTON_SIZE",
          "declaration": {
            "name": "ICON_BUTTON_SIZE",
            "module": "src/components/icon-button/icon-button.ts"
          }
        },
        {
          "kind": "js",
          "name": "ICON_BUTTON_TOOLTIP_ALIGNMENT",
          "declaration": {
            "name": "ICON_BUTTON_TOOLTIP_ALIGNMENT",
            "module": "src/components/icon-button/icon-button.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSIconButton",
            "module": "src/components/icon-button/icon-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon-button/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/inline-loading/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/inline-loading/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/inline-loading/inline-loading-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/inline-loading/inline-loading-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/inline-loading/inline-loading-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/inline-loading/inline-loading-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/inline-loading/inline-loading.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Lnline loading spinner.",
          "name": "CDSInlineLoading",
          "members": [
            {
              "kind": "field",
              "name": "assistiveText",
              "type": {
                "text": "string"
              },
              "default": "'Loading'",
              "description": "The assistive text for the spinner icon."
            },
            {
              "kind": "method",
              "name": "_renderIcon",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "status",
              "description": "The loading status."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-inline-loading",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "INLINE_LOADING_STATE",
          "declaration": {
            "name": "INLINE_LOADING_STATE",
            "module": "src/components/inline-loading/inline-loading.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSInlineLoading",
            "module": "src/components/inline-loading/inline-loading.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/layer/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/layer/layer-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "CustomLevel"
        },
        {
          "kind": "function",
          "name": "UseLayer"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/layer/layer-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "CustomLevel",
          "declaration": {
            "name": "CustomLevel",
            "module": "src/components/layer/layer-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "UseLayer",
          "declaration": {
            "name": "UseLayer",
            "module": "src/components/layer/layer-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/layer/layer-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/layer/layer-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/layer/layer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Basic layer",
          "name": "CDSLayer",
          "slots": [
            {
              "description": "The elements contained within the component.",
              "name": "children"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "level",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Specify the layer level and override any existing levels based on hierarchy"
            },
            {
              "kind": "field",
              "name": "layers"
            },
            {
              "kind": "method",
              "name": "updated"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selectorLayer",
              "static": true,
              "description": "A selector that selects a layer component.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventUseLayer",
              "static": true,
              "description": "A selector that selects a layer component.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The name of the custom event fired when the \"use layer\" action occurs.",
              "name": "cds-use-layer"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-layer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSLayer",
            "module": "src/components/layer/layer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/link/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/link/link-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Inline"
        },
        {
          "kind": "function",
          "name": "pairedWithIcon",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/link/link-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Inline",
          "declaration": {
            "name": "Inline",
            "module": "src/components/link/link-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "pairedWithIcon",
          "declaration": {
            "name": "pairedWithIcon",
            "module": "src/components/link/link-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/link/link-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/link/link-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/link/link.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "LINK_SIZE",
          "type": {
            "text": "object"
          },
          "default": "{ MEDIUM: '', SMALL: 'sm', LARGE: 'lg', }",
          "description": "Link size."
        },
        {
          "kind": "class",
          "description": "Link.",
          "name": "CDSLink",
          "cssParts": [
            {
              "description": "The link.",
              "name": "link"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_hasIcon",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`true` if there is an icon."
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event."
            },
            {
              "kind": "field",
              "name": "_linkNode",
              "type": {
                "text": "HTMLAnchorElement | HTMLParagraphElement | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_classes",
              "privacy": "protected",
              "description": "The CSS class list for the link node.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "_",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "Handles `click` event on the `<a>`."
            },
            {
              "kind": "method",
              "name": "_renderInner",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderDisabledLink",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderLink",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the link should be disabled."
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "description": "The default file name."
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Link `href`."
            },
            {
              "kind": "field",
              "name": "hreflang",
              "type": {
                "text": "string"
              },
              "description": "The language of what `href` points to."
            },
            {
              "kind": "field",
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the link should be inline."
            },
            {
              "kind": "field",
              "name": "linkRole",
              "type": {
                "text": "string"
              },
              "description": "The a11y role for `<a>`."
            },
            {
              "kind": "field",
              "name": "ping",
              "type": {
                "text": "string"
              },
              "description": "URLs to ping."
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "description": "The link type."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "LINK_SIZE_TYPE"
              },
              "description": "Link size."
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "string"
              },
              "description": "The link target."
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "description": "MIME type of the `target`."
            },
            {
              "kind": "field",
              "name": "visited",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the link has been visited."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-link",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LINK_SIZE",
          "declaration": {
            "name": "LINK_SIZE",
            "module": "src/components/link/link.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSLink",
            "module": "src/components/link/link.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/list/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/list/list-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "List item.",
          "name": "CDSListItem",
          "slots": [
            {
              "description": "The nested child list.",
              "name": "nested"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_hasNestedChild",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`true` if there is slotted nested child list."
            },
            {
              "kind": "method",
              "name": "_handleSlotChangeNested",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "description": "The event.",
                  "name": "event"
                },
                {
                  "description": "The event target.",
                  "name": "event.target"
                }
              ],
              "description": "Handles `slotchange` event for the `<slot>` for the nested child list."
            },
            {
              "kind": "field",
              "name": "nested",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this list item is a child of a nested list.\n`<cds-ordered-list>` or `<cds-unordered-list>` automatically sets this property."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selectorNestedList",
              "static": true,
              "description": "A selector that will return nested list.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-list-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSListItem",
            "module": "src/components/list/list-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/list/ordered-list-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "NativeListStyles"
        },
        {
          "kind": "function",
          "name": "Nested"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/list/ordered-list-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/list/ordered-list-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "NativeListStyles",
          "declaration": {
            "name": "NativeListStyles",
            "module": "src/components/list/ordered-list-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Nested",
          "declaration": {
            "name": "Nested",
            "module": "src/components/list/ordered-list-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/list/ordered-list-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/list/ordered-list.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Ordered list.",
          "name": "CDSOrderedList",
          "members": [
            {
              "kind": "field",
              "name": "native",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the ordered list should use native list styles instead of\ncustom counter"
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSUnorderedList",
                "module": "src/components/list/unordered-list.ts"
              }
            },
            {
              "kind": "field",
              "name": "isExpressive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if expressive theme enabled.",
              "inheritedFrom": {
                "name": "CDSUnorderedList",
                "module": "src/components/list/unordered-list.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectorListItem",
              "static": true,
              "description": "A selector that will return list item.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSUnorderedList",
                "module": "src/components/list/unordered-list.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSUnorderedList",
                "module": "src/components/list/unordered-list.ts"
              }
            }
          ],
          "superclass": {
            "name": "CDSUnorderedList",
            "module": "/src/components/list/unordered-list"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSOrderedList",
            "module": "src/components/list/ordered-list.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/list/unordered-list-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Nested"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/list/unordered-list-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/list/unordered-list-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Nested",
          "declaration": {
            "name": "Nested",
            "module": "src/components/list/unordered-list-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/list/unordered-list-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/list/unordered-list.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Ordered list.",
          "name": "CDSUnorderedList",
          "members": [
            {
              "kind": "field",
              "name": "isExpressive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if expressive theme enabled."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selectorListItem",
              "static": true,
              "description": "A selector that will return list item.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSUnorderedList",
            "module": "src/components/list/unordered-list.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/loading/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/loading/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/loading/loading-icon.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/loading/loading-icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/loading/loading-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/loading/loading-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/loading/loading-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/loading/loading-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/loading/loading.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Spinner indicating loading state.",
          "name": "CDSLoading",
          "members": [
            {
              "kind": "field",
              "name": "assistiveText",
              "type": {
                "text": "string"
              },
              "default": "'Loading'",
              "description": "The assistive text for the spinner icon."
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Spinner type."
            },
            {
              "kind": "field",
              "name": "overlay",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if overlay should be applied."
            },
            {
              "kind": "field",
              "name": "inactive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if spinner should stop."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-loading",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LOADING_TYPE",
          "declaration": {
            "name": "LOADING_TYPE",
            "module": "src/components/loading/loading.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSLoading",
            "module": "src/components/loading/loading.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/loading/types.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "LOADING_TYPE",
            "module": "src/components/loading/types.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/modal/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/modal/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/modal/modal-body-content.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Modal body content",
          "name": "CDSModalBodyContent",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-modal-body-content",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSModalBodyContent",
            "module": "src/components/modal/modal-body-content.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/modal/modal-body.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Modal body.",
          "name": "CDSModalBody",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-modal-body",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSModalBody",
            "module": "src/components/modal/modal-body.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/modal/modal-close-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Modal close button.",
          "name": "CDSModalCloseButton",
          "cssParts": [
            {
              "description": "The button.",
              "name": "button"
            },
            {
              "description": "The close icon.",
              "name": "close-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "closeButtonLabel",
              "type": {
                "text": "string"
              },
              "default": "'Close'",
              "description": "Specify a label for the close button of the modal; defaults to close"
            },
            {
              "kind": "method",
              "name": "updated"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-modal-close-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSModalCloseButton",
            "module": "src/components/modal/modal-close-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/modal/modal-footer-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Modal footer button.",
          "name": "CDSModalFooterButton",
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "[buttonStyles, styles]",
              "type": {
                "text": "array"
              },
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasIcon",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`true` if there is an icon.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleDisabledClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleOver",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleHoverOut",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocus",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocusout",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button should have input focus when the page loads.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "batchAction",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button is being used within a data table batch action toolbar",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "buttonClassName",
              "description": "Specify an optional className to be added to your Button",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "dangerDescriptor",
              "description": "Specify the message read by screen readers for the danger button variant",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button should be disabled.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "description": "The default file name, used if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasMainContent",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if there is a non-icon content.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Link `href`. If present, this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "hreflang",
              "type": {
                "text": "string"
              },
              "description": "The language of what `href` points to, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "isExpressive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if expressive theme enabled.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "isSelected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the Button is currently selected.\nOnly applies to the Ghost variant.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "Button kind.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "linkRole",
              "type": {
                "text": "string"
              },
              "default": "'button'",
              "description": "The a11y role for `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "openTooltip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to determine if tooltip is open.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "ping",
              "type": {
                "text": "string"
              },
              "description": "URLs to ping, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "description": "The link type, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "string"
              },
              "default": "'lg'",
              "description": "Button size.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "string"
              },
              "description": "The link target, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipAlignment",
              "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipPosition",
              "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipText",
              "type": {
                "text": "string"
              },
              "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Button type.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            }
          ],
          "superclass": {
            "name": "CDSButton",
            "module": "/src/components/button/button"
          },
          "tagName": "cds-modal-footer-button",
          "customElement": true,
          "cssParts": [
            {
              "description": "The button.",
              "name": "button",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSModalFooterButton",
            "module": "src/components/modal/modal-footer-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/modal/modal-footer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Modal footer.",
          "name": "CDSModalFooter",
          "members": [
            {
              "kind": "field",
              "name": "hasThreeButtons",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this modal footer has more than two buttons."
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selectorButtons",
              "static": true,
              "description": "A selector that selects the child buttons.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-modal-footer",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSModalFooter",
            "module": "src/components/modal/modal-footer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/modal/modal-header.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Modal header.",
          "name": "CDSModalHeader",
          "members": [
            {
              "kind": "field",
              "name": "_hasSlug",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "description": "`true` if there is a slug."
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event."
            },
            {
              "kind": "method",
              "name": "updated"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "slugItem",
              "static": true,
              "description": "A selector that will return the slug item.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-modal-header",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSModalHeader",
            "module": "src/components/modal/modal-header.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/modal/modal-heading.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Modal heading.",
          "name": "CDSModalHeading",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-modal-heading",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSModalHeading",
            "module": "src/components/modal/modal-heading.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/modal/modal-label.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Modal label.",
          "name": "CDSModalLabel",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-modal-label",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSModalLabel",
            "module": "src/components/modal/modal-label.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/modal/modal-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "DangerModal"
        },
        {
          "kind": "function",
          "name": "FullWidth"
        },
        {
          "kind": "function",
          "name": "PassiveModal"
        },
        {
          "kind": "function",
          "name": "WithStateManager"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/modal/modal-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "DangerModal",
          "declaration": {
            "name": "DangerModal",
            "module": "src/components/modal/modal-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "FullWidth",
          "declaration": {
            "name": "FullWidth",
            "module": "src/components/modal/modal-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "PassiveModal",
          "declaration": {
            "name": "PassiveModal",
            "module": "src/components/modal/modal-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "WithStateManager",
          "declaration": {
            "name": "WithStateManager",
            "module": "src/components/modal/modal-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/modal/modal-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/modal/modal-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/modal/modal.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Modal.",
          "name": "CDSModal",
          "cssParts": [
            {
              "description": "The dialog.",
              "name": "dialog"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_launcher",
              "type": {
                "text": "Element | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "The element that had focus before this modal gets open."
            },
            {
              "kind": "field",
              "name": "_startSentinelNode",
              "type": {
                "text": "HTMLAnchorElement"
              },
              "privacy": "private",
              "description": "Node to track focus going outside of modal content."
            },
            {
              "kind": "field",
              "name": "_endSentinelNode",
              "type": {
                "text": "HTMLAnchorElement"
              },
              "privacy": "private",
              "description": "Node to track focus going outside of modal content."
            },
            {
              "kind": "field",
              "name": "_handleClick",
              "privacy": "private",
              "description": "Handles `click` event on this element.",
              "parameters": [
                {
                  "description": "The event.",
                  "name": "event"
                }
              ]
            },
            {
              "kind": "field",
              "name": "_handleBlur",
              "privacy": "private",
              "description": "Handles `blur` event on this element.",
              "parameters": [
                {
                  "description": "The event.",
                  "name": "event"
                },
                {
                  "description": "The event target.",
                  "name": "event.target"
                },
                {
                  "description": "The event relatedTarget.",
                  "name": "event.relatedTarget"
                }
              ]
            },
            {
              "kind": "field",
              "name": "_handleKeydown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleClickContainer",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `click` event on the modal container."
            },
            {
              "kind": "method",
              "name": "_handleUserInitiatedClose",
              "privacy": "private",
              "parameters": [
                {
                  "name": "triggeredBy",
                  "type": {
                    "text": "EventTarget | null"
                  },
                  "description": "The element that triggered this close request."
                }
              ],
              "description": "Handles user-initiated close request of this modal."
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "description": "Handles `slotchange` event."
            },
            {
              "kind": "field",
              "name": "alert",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the Modal is displaying an alert, error or warning.\nShould go hand in hand with the danger prop."
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Specify text for the accessibility label of the header"
            },
            {
              "kind": "field",
              "name": "containerClass",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The additional CSS class names for the container <div> of the element."
            },
            {
              "kind": "field",
              "name": "fullWidth",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether or not the Modal content should have any inner padding."
            },
            {
              "kind": "field",
              "name": "hasScrollingContent",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the modal contains scrolling content"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the modal should be open."
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Modal size."
            },
            {
              "kind": "field",
              "name": "preventCloseOnClickOutside",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Prevent closing on click outside of modal"
            },
            {
              "kind": "field",
              "name": "preventClose",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Prevent the modal from closing after clicking the close button"
            },
            {
              "kind": "method",
              "name": "firstUpdated"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_delay",
              "privacy": "private",
              "static": true,
              "parameters": [
                {
                  "name": "ms",
                  "default": "0",
                  "description": "The number of milliseconds."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "selectorCloseButton",
              "static": true,
              "description": "A selector selecting buttons that should close this modal.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorTabbable",
              "static": true,
              "description": "A selector selecting tabbable nodes.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorPrimaryFocus",
              "static": true,
              "description": "A selector selecting the nodes that should be focused when modal gets open.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorModalBody",
              "static": true,
              "description": "A selector selecting the modal body component",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventBeforeClose",
              "static": true,
              "description": "The name of the custom event fired before this modal is being closed upon a user gesture.\nCancellation of this event stops the user-initiated action of closing this modal.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventClose",
              "static": true,
              "description": "The name of the custom event fired after this modal is closed upon a user gesture.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The custom event fired before this modal is being closed upon a user gesture. Cancellation of this event stops the user-initiated action of closing this modal.",
              "name": "cds-modal-beingclosed"
            },
            {
              "description": "The custom event fired after this modal is closed upon a user gesture.",
              "name": "cds-modal-closed"
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-modal",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MODAL_SIZE",
          "declaration": {
            "name": "MODAL_SIZE",
            "module": "src/components/modal/modal.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSModal",
            "module": "src/components/modal/modal.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/multi-select/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/multi-select/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/multi-select/multi-select-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Multi select item.",
          "name": "CDSMultiSelectItem",
          "members": [
            {
              "kind": "field",
              "name": "filtered",
              "description": "The property to hide when item is filtered from input"
            },
            {
              "kind": "field",
              "name": "selectionName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `name` attribute for the `<input>` for selection."
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSDropdownItem",
                "module": "src/components/dropdown/dropdown-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectorList",
              "static": true,
              "description": "A selector that will return multi select.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSDropdownItem",
                "module": "src/components/dropdown/dropdown-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this dropdown item should be disabled.",
              "inheritedFrom": {
                "name": "CDSDropdownItem",
                "module": "src/components/dropdown/dropdown-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "highlighted",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this dropdown item should be highlighted.\nIf `true`, parent `<dropdown>` selects/deselects this dropdown item upon keyboard interaction.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSDropdownItem",
                "module": "src/components/dropdown/dropdown-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this dropdown item should be selected.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSDropdownItem",
                "module": "src/components/dropdown/dropdown-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Dropdown size.",
              "inheritedFrom": {
                "name": "CDSDropdownItem",
                "module": "src/components/dropdown/dropdown-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `value` attribute that is set to the parent `<cds-dropdown>` when this dropdown item is selected.",
              "inheritedFrom": {
                "name": "CDSDropdownItem",
                "module": "src/components/dropdown/dropdown-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "id",
              "type": {
                "text": "number"
              },
              "static": true,
              "default": "0",
              "description": "Store an identifier for use in composing this item's id.\n\nAuto-increments anytime a new dropdown-item appears.",
              "inheritedFrom": {
                "name": "CDSDropdownItem",
                "module": "src/components/dropdown/dropdown-item.ts"
              }
            }
          ],
          "superclass": {
            "name": "CDSDropdownItem",
            "module": "/src/components/dropdown/dropdown-item"
          },
          "tagName": "cds-multi-select-item",
          "customElement": true,
          "cssParts": [
            {
              "description": "The selected icon.",
              "name": "selected-icon",
              "inheritedFrom": {
                "name": "CDSDropdownItem",
                "module": "src/components/dropdown/dropdown-item.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSMultiSelectItem",
            "module": "src/components/multi-select/multi-select-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/multi-select/multi-select-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Filterable"
        },
        {
          "kind": "function",
          "name": "FilterableWithLayer"
        },
        {
          "kind": "function",
          "name": "WithInitialSelectedItems"
        },
        {
          "kind": "function",
          "name": "WithLayer"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/multi-select/multi-select-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Filterable",
          "declaration": {
            "name": "Filterable",
            "module": "src/components/multi-select/multi-select-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "FilterableWithLayer",
          "declaration": {
            "name": "FilterableWithLayer",
            "module": "src/components/multi-select/multi-select-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "WithInitialSelectedItems",
          "declaration": {
            "name": "WithInitialSelectedItems",
            "module": "src/components/multi-select/multi-select-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "WithLayer",
          "declaration": {
            "name": "WithLayer",
            "module": "src/components/multi-select/multi-select-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/multi-select/multi-select-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/multi-select/multi-select-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/multi-select/multi-select.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Multi select.",
          "name": "CDSMultiSelect",
          "members": [
            {
              "kind": "field",
              "name": "filterable"
            },
            {
              "kind": "field",
              "name": "_selectedItemsCount",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0",
              "description": "The count of selected items."
            },
            {
              "kind": "field",
              "name": "_clearButtonNode",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "description": "The clear button."
            },
            {
              "kind": "field",
              "name": "_selectionButtonNode",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "description": "The selection button."
            },
            {
              "kind": "field",
              "name": "_menuBodyNode",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "description": "The menu body."
            },
            {
              "kind": "field",
              "name": "_filterInputNode",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private",
              "description": "The `<input>` for filtering."
            },
            {
              "kind": "field",
              "name": "_triggerNode",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private",
              "description": "The trigger button."
            },
            {
              "kind": "method",
              "name": "_selectionShouldChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "itemToSelect",
                  "optional": true,
                  "type": {
                    "text": "CDSMultiSelectItem"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_selectionDidChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "itemToSelect",
                  "optional": true,
                  "type": {
                    "text": "CDSMultiSelectItem"
                  }
                }
              ],
              "description": "A callback that runs after change in dropdown selection upon user interaction is confirmed.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleClickInner",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "Handles `click` event on the top-level element in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleKeypressInner",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handler for the `keypress` event, ensures filter still works upon entering space",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleKeypressInnerFlterable",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Special andler for the `keypress` event, ensures space selection for filterable\nvariation is disabled"
            },
            {
              "kind": "method",
              "name": "_renderTitleLabel",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderPrecedingLabel",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderLabel",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderFollowingLabel",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | void"
                }
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleInput",
              "privacy": "protected",
              "description": "Handles `input` event on the `<input>` for filtering."
            },
            {
              "kind": "method",
              "name": "_navigate",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "number"
                  },
                  "description": "`-1` to navigate backward, `1` to navigate forward."
                }
              ],
              "description": "Navigate through dropdown items.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleUserInitiatedClearInput",
              "privacy": "protected",
              "description": "Handles user-initiated clearing the `<input>` for filtering."
            },
            {
              "kind": "field",
              "name": "clearSelectionLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `aria-label` attribute for the icon to clear selection."
            },
            {
              "kind": "field",
              "name": "clearSelectionDescription",
              "type": {
                "text": "string"
              },
              "default": "'Total items selected: '",
              "description": "Specify the text that should be read for screen readers that describes total items selected"
            },
            {
              "kind": "field",
              "name": "clearSelectionText",
              "type": {
                "text": "string"
              },
              "default": "'To clear selection, press Delete or Backspace.'",
              "description": "Specify the text that should be read for screen readers to clear selection."
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "default": "'en'",
              "description": "Specify the locale of the control. Used for the default compareItems used for sorting the list of items in the control."
            },
            {
              "kind": "field",
              "name": "selectionFeedback",
              "description": "Specify feedback (mode) of the selection.\n`top`: selected item jumps to top\n`fixed`: selected item stays at it's position\n`top-after-reopen`: selected item jump to top after reopen dropdown"
            },
            {
              "kind": "field",
              "name": "_classes",
              "privacy": "protected",
              "description": "The CSS class list for multi-select listbox",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "compareItems",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "sortItems",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "shouldUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectorMenuBody",
              "static": true,
              "description": "A selector that will return menu body.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorItemHighlighted",
              "static": true,
              "description": "A selector that will return highlighted items.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectorItem",
              "static": true,
              "description": "A selector that will return multi select items.\nWe use a separate property from `.itemTagName` due to the nature in difference of tag name vs. selector.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectorItemFiltered",
              "static": true,
              "description": "A selector that will return remaining items after a filter.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorItemResults",
              "static": true,
              "description": "A selector that will return remaining items after a filter.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorItemSelected",
              "static": true,
              "description": "A selector that will return selected items.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "eventBeforeToggle",
              "static": true,
              "description": "The name of the custom event fired before this multi select item is being toggled upon a user gesture.\nCancellation of this event stops the user-initiated action of toggling this multi select item.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "eventToggle",
              "static": true,
              "description": "The name of the custom event fired after this multi select item is toggled upon a user gesture.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "eventBeforeSelect",
              "static": true,
              "description": "The name of the custom event fired before a multi select item is selected upon a user gesture.\nCancellation of this event stops changing the user-initiated selection.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "eventSelect",
              "static": true,
              "description": "The name of the custom event fired after a a multi select item is selected upon a user gesture.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getValidityMessage",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string"
                  },
                  "description": "The form validation status."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_testValidity",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Checks if the value meets the constraints.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "description": "`true` to show the UI of the invalid state.",
              "default": "false",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "`true` if the value is required.",
              "default": "false",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "requiredValidityMessage",
              "type": {
                "text": "string"
              },
              "description": "The special validity message for `required`.",
              "default": "'Please fill out this field.'",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "validityMessage",
              "type": {
                "text": "string"
              },
              "description": "The validity message.",
              "default": "''",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The value.",
              "default": "''",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Checks if the value meets the constraints.\nFires cancelable `invalid` event if it doesn't.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "validityMessage",
                  "type": {
                    "text": "string"
                  },
                  "description": "The custom validity message"
                }
              ],
              "description": "Sets the given custom validity message.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hFormdata",
              "type": {
                "text": "Handle | null"
              },
              "default": "null",
              "description": "The handle for `formdata` event listener on the containing form.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleFormdata",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `formdata` event.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasSlug",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "description": "`true` if there is a slug.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_activeDescendant",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_selectedItemContent",
              "type": {
                "text": "DocumentFragment | null"
              },
              "privacy": "protected",
              "default": "null",
              "description": "The content of the selected item.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_shouldTriggerBeFocusable",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "description": "`true` if the trigger button should be focusable.\nDerived class can set `false` to this if the trigger button contains another primary focusable element (e.g. `<input>`).",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_listBoxNode",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "protected",
              "description": "The list box `<div>` node.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_slotHelperTextNode",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "protected",
              "description": "The `<slot>` element for the helper text in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_slotTitleTextNode",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "protected",
              "description": "The `<slot>` element for the title text in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleKeydownInner",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handler for the `keydown` event on the top-level element in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleFocusOut",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `blur` event handler on the document this element is in.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotchangeHelperText",
              "privacy": "protected",
              "description": "Handles `slotchange` event for the `<slot>` for helper text.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotchangeLabelText",
              "privacy": "protected",
              "description": "Handles `slotchange` event for the `<slot>` for label text.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlugSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleUserInitiatedSelectItem",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "CDSDropdownItem"
                  },
                  "description": "The dropdown item user wants to select. Absense of this argument means clearing selection."
                }
              ],
              "description": "Handles user-initiated selection of a dropdown item.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleUserInitiatedToggle",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "force",
                  "default": "!this.open",
                  "description": "If specified, forces the open state to the given one.",
                  "optional": true
                }
              ],
              "description": "Handles user-initiated toggling the open state.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_clearHighlight",
              "privacy": "protected",
              "description": "Clears the selection of dropdown items.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "'aria-label' of the ListBox component.\nSpecify a label to be read by screen readers on the container node",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "direction",
              "description": "Specify the direction of the dropdown. Can be either top or bottom.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this dropdown should be disabled.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "helperText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The helper text.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the title text should be hidden or not",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalidText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Message which is displayed if the value is invalid.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "titleText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Provide the title text that will be read by a screen reader when visiting this control",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Name for the dropdown in the `FormData`",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this dropdown should be open.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the Dropdown is readonly",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Dropdown size.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "toggleLabelClosed",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `aria-label` attribute for the UI indicating the closed state.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "toggleLabelOpen",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `aria-label` attribute for the UI indicating the open state.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Generic label that will be used as the textual representation of what this field is for",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "`true` if this dropdown should use the inline UI variant.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "warn",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the control is currently in warning state",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "warnText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Provide the text that is displayed when the control is in warning state",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "TRIGGER_KEYS",
              "static": true,
              "default": "new Set([' ', 'Enter'])",
              "description": "Symbols of keys that triggers opening/closing menu and selecting/deselecting menu item.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "slugItem",
              "static": true,
              "description": "A selector that will return the slug item.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "getAction",
              "static": true,
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            }
          ],
          "events": [
            {
              "description": "The custom event fired before a multi select item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection.",
              "name": "cds-multi-select-beingselected"
            },
            {
              "description": "The custom event fired after a multi select item is selected upon a user gesture.",
              "name": "cds-multi-select-selected"
            },
            {
              "description": "The custom event fired before the open state of this multi select is toggled upon a user gesture. Cancellation of this event stops the user-initiated toggling.",
              "name": "cds-multi-select-beingtoggled"
            },
            {
              "description": "The custom event fired after the open state of this multi select is toggled upon a user gesture.",
              "name": "cds-multi-select-toggled"
            },
            {
              "name": "invalid",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "name": "eventBeforeToggle",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "name": "eventToggle",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "description": "The custom event fired before a dropdown item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection.",
              "name": "cds-dropdown-beingselected",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "description": "The custom event fired before the open state of this dropdown is toggled upon a user gesture. Cancellation of this event stops the user-initiated toggling.",
              "name": "cds-dropdown-beingtoggled",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "description": "The custom event fired after a dropdown item is selected upon a user gesture.",
              "name": "cds-dropdown-selected",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "description": "The custom event fired after the open state of this dropdown is toggled upon a user gesture.",
              "name": "cds-dropdown-toggled",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            }
          ],
          "superclass": {
            "name": "CDSDropdown",
            "module": "/src/components/dropdown/dropdown"
          },
          "tagName": "cds-multi-select",
          "customElement": true,
          "cssParts": [
            {
              "description": "The label text.",
              "name": "label-text",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "description": "The helper text.",
              "name": "helper-text",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "description": "The trigger button.",
              "name": "trigger-button",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "description": "The menu body.",
              "name": "menu-body",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "description": "The validity message.",
              "name": "validity-message",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DROPDOWN_SIZE",
          "declaration": {
            "name": "DROPDOWN_SIZE",
            "module": "../dropdown/dropdown"
          }
        },
        {
          "kind": "js",
          "name": "DROPDOWN_TYPE",
          "declaration": {
            "name": "DROPDOWN_TYPE",
            "module": "../dropdown/dropdown"
          }
        },
        {
          "kind": "js",
          "name": "DROPDOWN_DIRECTION",
          "declaration": {
            "name": "DROPDOWN_DIRECTION",
            "module": "../dropdown/dropdown"
          }
        },
        {
          "kind": "js",
          "name": "SELECTION_FEEDBACK_OPTION",
          "declaration": {
            "name": "SELECTION_FEEDBACK_OPTION",
            "module": "src/components/multi-select/multi-select.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSMultiSelect",
            "module": "src/components/multi-select/multi-select.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/notification/actionable-notification-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Actionable notification action button.",
          "name": "CDSActionableNotificationButton",
          "members": [
            {
              "kind": "method",
              "name": "update",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasIcon",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`true` if there is an icon.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleDisabledClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleOver",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleHoverOut",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocus",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocusout",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button should have input focus when the page loads.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "batchAction",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button is being used within a data table batch action toolbar",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "buttonClassName",
              "description": "Specify an optional className to be added to your Button",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "dangerDescriptor",
              "description": "Specify the message read by screen readers for the danger button variant",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button should be disabled.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "description": "The default file name, used if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasMainContent",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if there is a non-icon content.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Link `href`. If present, this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "hreflang",
              "type": {
                "text": "string"
              },
              "description": "The language of what `href` points to, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "isExpressive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if expressive theme enabled.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "isSelected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the Button is currently selected.\nOnly applies to the Ghost variant.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "Button kind.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "linkRole",
              "type": {
                "text": "string"
              },
              "default": "'button'",
              "description": "The a11y role for `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "openTooltip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to determine if tooltip is open.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "ping",
              "type": {
                "text": "string"
              },
              "description": "URLs to ping, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "description": "The link type, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "string"
              },
              "default": "'lg'",
              "description": "Button size.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "string"
              },
              "description": "The link target, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipAlignment",
              "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipPosition",
              "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipText",
              "type": {
                "text": "string"
              },
              "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Button type.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            }
          ],
          "superclass": {
            "name": "CDSButton",
            "module": "/src/components/button/button"
          },
          "tagName": "cds-actionable-notification-button",
          "customElement": true,
          "cssParts": [
            {
              "description": "The button.",
              "name": "button",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSActionableNotificationButton",
            "module": "src/components/notification/actionable-notification-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/notification/actionable-notification-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/notification/actionable-notification-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/notification/actionable-notification-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/notification/actionable-notification-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/notification/actionable-notification.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Actionable notification.",
          "name": "CDSActionableNotification",
          "slots": [
            {
              "description": "The subtitle.",
              "name": "subtitle",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "description": "The title.",
              "name": "title",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_type",
              "privacy": "protected",
              "description": "Notification type.",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Inline notification type."
            },
            {
              "kind": "field",
              "name": "actionButtonLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Pass in the action button label that will be rendered within the ActionableNotification."
            },
            {
              "kind": "field",
              "name": "closeOnEscape",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Specify if pressing the escape key should close notifications"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Specify if focus should be moved to the component when the notification contains actions"
            },
            {
              "kind": "field",
              "name": "_handleKeyDown",
              "privacy": "private",
              "description": "Handles `keydown` event on this event.\nEscape will close the notification if `closeOnEscape` is true"
            },
            {
              "kind": "method",
              "name": "_renderIcon",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderText",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "caption",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The caption."
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectorActionButton",
              "static": true,
              "description": "A selector that will return the action button element",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            },
            {
              "kind": "field",
              "name": "_timeoutID",
              "type": {
                "text": "number | null"
              },
              "privacy": "protected",
              "default": "null",
              "description": "Current timeout identifier",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "method",
              "name": "_cancelTimeout",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "timeoutID",
                  "type": {
                    "text": "number"
                  },
                  "description": "current timeout's identifier"
                }
              ],
              "description": "Cancels the current timeout configured for the notification",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "method",
              "name": "_initializeTimeout",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "timeout",
                  "type": {
                    "text": "number"
                  },
                  "description": "the time in ms"
                }
              ],
              "description": "Overrides (if exists) the timeout to close the notification",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleClickCloseButton",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "MouseEvent"
                  }
                },
                {
                  "description": "The event.",
                  "name": "event"
                },
                {
                  "description": "The event target.",
                  "name": "event.target"
                }
              ],
              "description": "Handles `click` event on the close button.",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleUserOrTimerInitiatedClose",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "triggeredBy",
                  "type": {
                    "text": "EventTarget | null"
                  },
                  "description": "The element that triggered this close request, if there is one."
                }
              ],
              "description": "Handles user-initiated or through timer close request of this modal.",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderButton",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "description": "Provide a description for \"close\" icon button that can be read by screen readers",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideCloseButton",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` to hide the close button.",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "statusIconDescription",
              "type": {
                "text": "string"
              },
              "description": "Provide a description for \"status\" icon that can be read by screen readers",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "Notification kind.",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "lowContrast",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Low contrast mode",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "`true` if the notification should be open.",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "timeout",
              "type": {
                "text": "number | null"
              },
              "default": "null",
              "description": "Specify an optional duration the notification should be closed in",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "subtitle",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The subtitle.",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The title.",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "eventBeforeClose",
              "static": true,
              "description": "The name of the custom event fired before this notification is being closed upon a user gesture.\nCancellation of this event stops the user-initiated action of closing this notification.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "eventClose",
              "static": true,
              "description": "The name of the custom event fired after this notification is closed upon a user gesture.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            }
          ],
          "events": [
            {
              "description": "The custom event fired before this notification is being closed upon a user gesture. Cancellation of this event stops the user-initiated action of closing this notification.",
              "name": "cds-notification-beingclosed",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "description": "The custom event fired after this notification is closed upon a user gesture.",
              "name": "cds-notification-closed",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            }
          ],
          "superclass": {
            "name": "CDSInlineNotification",
            "module": "/src/components/notification/inline-notification"
          },
          "tagName": "cds-actionable-notification",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSActionableNotification",
            "module": "src/components/notification/actionable-notification.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/notification/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/notification/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/notification/inline-notification-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/notification/inline-notification-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/notification/inline-notification-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/notification/inline-notification-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/notification/inline-notification.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Inline notification.",
          "name": "CDSInlineNotification",
          "slots": [
            {
              "description": "The subtitle.",
              "name": "subtitle"
            },
            {
              "description": "The title.",
              "name": "title"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_timeoutID",
              "type": {
                "text": "number | null"
              },
              "privacy": "protected",
              "default": "null",
              "description": "Current timeout identifier"
            },
            {
              "kind": "field",
              "name": "_type",
              "privacy": "protected",
              "description": "Notification type."
            },
            {
              "kind": "method",
              "name": "_cancelTimeout",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "timeoutID",
                  "type": {
                    "text": "number"
                  },
                  "description": "current timeout's identifier"
                }
              ],
              "description": "Cancels the current timeout configured for the notification"
            },
            {
              "kind": "method",
              "name": "_initializeTimeout",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "timeout",
                  "type": {
                    "text": "number"
                  },
                  "description": "the time in ms"
                }
              ],
              "description": "Overrides (if exists) the timeout to close the notification"
            },
            {
              "kind": "method",
              "name": "_handleClickCloseButton",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "MouseEvent"
                  }
                },
                {
                  "description": "The event.",
                  "name": "event"
                },
                {
                  "description": "The event target.",
                  "name": "event.target"
                }
              ],
              "description": "Handles `click` event on the close button."
            },
            {
              "kind": "method",
              "name": "_handleUserOrTimerInitiatedClose",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "triggeredBy",
                  "type": {
                    "text": "EventTarget | null"
                  },
                  "description": "The element that triggered this close request, if there is one."
                }
              ],
              "description": "Handles user-initiated or through timer close request of this modal."
            },
            {
              "kind": "method",
              "name": "_renderButton",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderText",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderIcon",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "description": "Provide a description for \"close\" icon button that can be read by screen readers"
            },
            {
              "kind": "field",
              "name": "hideCloseButton",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` to hide the close button."
            },
            {
              "kind": "field",
              "name": "statusIconDescription",
              "type": {
                "text": "string"
              },
              "description": "Provide a description for \"status\" icon that can be read by screen readers"
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "Notification kind."
            },
            {
              "kind": "field",
              "name": "lowContrast",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Low contrast mode"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "`true` if the notification should be open."
            },
            {
              "kind": "field",
              "name": "timeout",
              "type": {
                "text": "number | null"
              },
              "default": "null",
              "description": "Specify an optional duration the notification should be closed in"
            },
            {
              "kind": "field",
              "name": "subtitle",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The subtitle."
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The title."
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "eventBeforeClose",
              "static": true,
              "description": "The name of the custom event fired before this notification is being closed upon a user gesture.\nCancellation of this event stops the user-initiated action of closing this notification.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventClose",
              "static": true,
              "description": "The name of the custom event fired after this notification is closed upon a user gesture.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The custom event fired before this notification is being closed upon a user gesture. Cancellation of this event stops the user-initiated action of closing this notification.",
              "name": "cds-notification-beingclosed"
            },
            {
              "description": "The custom event fired after this notification is closed upon a user gesture.",
              "name": "cds-notification-closed"
            }
          ],
          "mixins": [
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-inline-notification",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NOTIFICATION_KIND",
          "declaration": {
            "name": "NOTIFICATION_KIND",
            "module": "src/components/notification/inline-notification.ts"
          }
        },
        {
          "kind": "js",
          "name": "NOTIFICATION_TYPE",
          "declaration": {
            "name": "NOTIFICATION_TYPE",
            "module": "src/components/notification/inline-notification.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSInlineNotification",
            "module": "src/components/notification/inline-notification.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/notification/toast-notification-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/notification/toast-notification-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/notification/toast-notification-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/notification/toast-notification-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/notification/toast-notification.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Toast notification.",
          "name": "CDSToastNotification",
          "slots": [
            {
              "description": "The subtitle.",
              "name": "subtitle",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "description": "The title.",
              "name": "title",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_type",
              "privacy": "protected",
              "description": "Notification type.",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderText",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "caption",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Specify the caption"
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "_timeoutID",
              "type": {
                "text": "number | null"
              },
              "privacy": "protected",
              "default": "null",
              "description": "Current timeout identifier",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "method",
              "name": "_cancelTimeout",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "timeoutID",
                  "type": {
                    "text": "number"
                  },
                  "description": "current timeout's identifier"
                }
              ],
              "description": "Cancels the current timeout configured for the notification",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "method",
              "name": "_initializeTimeout",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "timeout",
                  "type": {
                    "text": "number"
                  },
                  "description": "the time in ms"
                }
              ],
              "description": "Overrides (if exists) the timeout to close the notification",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleClickCloseButton",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "MouseEvent"
                  }
                },
                {
                  "description": "The event.",
                  "name": "event"
                },
                {
                  "description": "The event target.",
                  "name": "event.target"
                }
              ],
              "description": "Handles `click` event on the close button.",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleUserOrTimerInitiatedClose",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "triggeredBy",
                  "type": {
                    "text": "EventTarget | null"
                  },
                  "description": "The element that triggered this close request, if there is one."
                }
              ],
              "description": "Handles user-initiated or through timer close request of this modal.",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderButton",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderIcon",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "description": "Provide a description for \"close\" icon button that can be read by screen readers",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideCloseButton",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` to hide the close button.",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "statusIconDescription",
              "type": {
                "text": "string"
              },
              "description": "Provide a description for \"status\" icon that can be read by screen readers",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "Notification kind.",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "lowContrast",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Low contrast mode",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "`true` if the notification should be open.",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "timeout",
              "type": {
                "text": "number | null"
              },
              "default": "null",
              "description": "Specify an optional duration the notification should be closed in",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "subtitle",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The subtitle.",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The title.",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "eventBeforeClose",
              "static": true,
              "description": "The name of the custom event fired before this notification is being closed upon a user gesture.\nCancellation of this event stops the user-initiated action of closing this notification.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "kind": "field",
              "name": "eventClose",
              "static": true,
              "description": "The name of the custom event fired after this notification is closed upon a user gesture.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            }
          ],
          "events": [
            {
              "description": "The custom event fired before this notification is being closed upon a user gesture. Cancellation of this event stops the user-initiated action of closing this notification.",
              "name": "cds-notification-beingclosed",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "description": "The custom event fired after this notification is closed upon a user gesture.",
              "name": "cds-notification-closed",
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "CDSInlineNotification",
                "module": "src/components/notification/inline-notification.ts"
              }
            }
          ],
          "superclass": {
            "name": "CDSInlineNotification",
            "module": "/src/components/notification/inline-notification"
          },
          "tagName": "cds-toast-notification",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSToastNotification",
            "module": "src/components/notification/toast-notification.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/number-input/defs.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "NUMBER_INPUT_COLOR_SCHEME",
          "declaration": {
            "name": "FORM_ELEMENT_COLOR_SCHEME",
            "module": "../../globals/shared-enums"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/number-input/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/number-input/number-input-skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Skeleton of number input.",
          "name": "CDSNumberInputSkeleton",
          "members": [
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the label should be hidden. Corresponds to the attribute with the same name."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSNumberInputSkeleton",
            "module": "src/components/number-input/number-input-skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/number-input/number-input-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "skeleton"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/number-input/number-input-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "skeleton",
          "declaration": {
            "name": "skeleton",
            "module": "src/components/number-input/number-input-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/number-input/number-input-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/number-input/number-input-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/number-input/number-input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Number input.",
          "name": "CDSNumberInput",
          "slots": [
            {
              "description": "The helper text.",
              "name": "helper-text",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "description": "The label text.",
              "name": "label-text",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "description": "The validity message. If present and non-empty, this input shows the UI of its invalid state.",
              "name": "validity-message",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "_handleInput",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `input` event on the `<input>` in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleUserInitiatedStepDown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "_",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `click` event on the up button in the shadow DOM."
            },
            {
              "kind": "method",
              "name": "_handleUserInitiatedStepUp",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "_",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `click` event on the down button in the shadow DOM."
            },
            {
              "kind": "field",
              "name": "_input",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "protected",
              "description": "The underlying input element",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getInputValidity"
            },
            {
              "kind": "field",
              "name": "_min",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "_max",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "_step",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "'1'"
            },
            {
              "kind": "field",
              "name": "min",
              "description": "The minimum value allowed in the input"
            },
            {
              "kind": "field",
              "name": "max",
              "description": "The maximum value allowed in the input"
            },
            {
              "kind": "field",
              "name": "step",
              "description": "The amount the value should increase or decrease by"
            },
            {
              "kind": "field",
              "name": "incrementButtonAssistiveText",
              "type": {
                "text": "string"
              },
              "default": "'increase number input'",
              "description": "Aria text for the button that increments the value"
            },
            {
              "kind": "field",
              "name": "decrementButtonAssistiveText",
              "type": {
                "text": "string"
              },
              "default": "'decrease number input'",
              "description": "Aria text for the button that decrements the value"
            },
            {
              "kind": "field",
              "name": "hideSteppers",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether you want the steppers to be hidden"
            },
            {
              "kind": "field",
              "name": "allowEmpty",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` to allow empty string."
            },
            {
              "kind": "field",
              "name": "size",
              "description": "The input box size.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "stepUp",
              "description": "Handles incrementing the value in the input"
            },
            {
              "kind": "method",
              "name": "stepDown",
              "description": "Handles decrementing the value in the input"
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "eventInput",
              "static": true,
              "description": "The name of the custom event fired after the value is changed upon a user gesture.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getValidityMessage",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string"
                  },
                  "description": "The form validation status."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "kind": "method",
              "name": "_testValidity",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Checks if the value meets the constraints.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` to show the UI of the invalid state.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the value is required.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "requiredValidityMessage",
              "type": {
                "text": "string"
              },
              "default": "'Please fill out this field.'",
              "description": "The special validity message for `required`.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "validityMessage",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The validity message.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The value.",
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Checks if the value meets the constraints.\nFires cancelable `invalid` event if it doesn't.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "validityMessage",
                  "type": {
                    "text": "string"
                  },
                  "description": "The custom validity message"
                }
              ],
              "description": "Sets the given custom validity message.",
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hFormdata",
              "type": {
                "text": "Handle | null"
              },
              "default": "null",
              "description": "The handle for `formdata` event listener on the containing form.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormMixin",
                "module": "src/globals/mixins/form.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleFormdata",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  },
                  "description": "The event."
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handles `formdata` event.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasSlug",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "description": "`true` if there is a slug.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''",
              "description": "The internal value.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "May be any of the standard HTML autocomplete options",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the input to be focussed automatically on page load. Defaults to false",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Controls the disabled state of the input",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "enableCounter",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether to display the character counter",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "helperText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The helper text.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalidText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Message which is displayed if the value is invalid.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "maxCount",
              "description": "Max character count allowed for input. This is needed in order for enableCounter to display",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "warn",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the control is currently in warning state",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "warnText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Provide the text that is displayed when the control is in warning state",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether you want the underlying label to be visually hidden",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Generic label that will be used as the textual representation of what this field is for",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Name for the input in the `FormData`",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Pattern to validate the input against for HTML validity checking",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Value to display when the input has an empty `value`",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify if the component should be read-only",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "hidePasswordLabel",
              "type": {
                "text": "string"
              },
              "default": "'Hide password'",
              "description": "\"Hide password\" tooltip text on password visibility toggle",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "showPasswordLabel",
              "type": {
                "text": "string"
              },
              "default": "'Show password'",
              "description": "\"Show password\" tooltip text on password visibility toggle",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "showPasswordVisibilityToggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean property to render password visibility toggle",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "true to use the inline version.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipAlignment",
              "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipDirection",
              "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "The type of the input. Can be one of the types listed in the INPUT_TYPE enum",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleTogglePasswordVisibility",
              "privacy": "private",
              "description": "Handles password visibility toggle button click",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "slugItem",
              "static": true,
              "description": "A selector that will return the slug item.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The name of the custom event fired after the value is changed upon a user gesture.",
              "name": "cds-number-input"
            },
            {
              "name": "invalid",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            }
          ],
          "superclass": {
            "name": "CDSTextInput",
            "module": "/src/components/text-input/text-input"
          },
          "tagName": "cds-number-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NUMBER_INPUT_VALIDATION_STATUS",
          "declaration": {
            "name": "NUMBER_INPUT_VALIDATION_STATUS",
            "module": "src/components/number-input/number-input.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSNumberInput",
            "module": "src/components/number-input/number-input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/overflow-menu/defs.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "NAVIGATION_DIRECTION",
          "type": {
            "text": "object"
          },
          "default": "{ ArrowDown: 1, ArrowUp: -1, }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NAVIGATION_DIRECTION",
          "declaration": {
            "name": "NAVIGATION_DIRECTION",
            "module": "src/components/overflow-menu/defs.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/overflow-menu/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/overflow-menu/overflow-menu-body.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Overflow menu body.",
          "name": "CDSOverflowMenuBody",
          "members": [
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "FLOATING_MENU_DIRECTION"
              },
              "description": "The menu direction.",
              "inheritedFrom": {
                "name": "CDSFloatingMenu",
                "module": "src/components/floating-menu/floating-menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "flipped",
              "type": {
                "text": "boolean"
              },
              "description": "How the menu is aligned to the trigger button.",
              "default": "false",
              "inheritedFrom": {
                "name": "CDSFloatingMenu",
                "module": "src/components/floating-menu/floating-menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "description": "`true` if the menu should be open.",
              "default": "false",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSFloatingMenu",
                "module": "src/components/floating-menu/floating-menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "CDSOverflowMenuItem | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "size",
              "description": "The overflow menu size."
            },
            {
              "kind": "method",
              "name": "_getNextItem",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "currentItem",
                  "type": {
                    "text": "CDSOverflowMenuItem"
                  },
                  "description": "The currently selected item."
                },
                {
                  "name": "direction",
                  "type": {
                    "text": "number"
                  },
                  "description": "The navigation direction."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_navigate",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "number"
                  },
                  "description": "`-1` to navigate backward, `1` to navigate forward."
                }
              ],
              "description": "Navigates through overflow menu items."
            },
            {
              "kind": "field",
              "name": "_handleKeydown",
              "privacy": "protected",
              "description": "Handles `keydown` event on the menu body."
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "CDSFloatingMenu",
                "module": "src/components/floating-menu/floating-menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selectorMenuItem",
              "static": true,
              "description": "A selector that will return menu items.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorItemEnabled",
              "static": true,
              "description": "A selector that will return enabled menu items.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSFloatingMenu",
                "module": "src/components/floating-menu/floating-menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSFloatingMenu",
                "module": "src/components/floating-menu/floating-menu.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSFloatingMenu",
                "module": "src/components/floating-menu/floating-menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hObserveResizeParent",
              "type": {
                "text": "Handle | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "The handle for observing resize of the element containing the trigger button.",
              "inheritedFrom": {
                "name": "CDSFloatingMenu",
                "module": "src/components/floating-menu/floating-menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hObserveResizeContainer",
              "type": {
                "text": "Handle | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "The handle for observing resize of the floating menu container.",
              "inheritedFrom": {
                "name": "CDSFloatingMenu",
                "module": "src/components/floating-menu/floating-menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "_resizeObserver",
              "privacy": "private",
              "default": "new ResizeObserver(() => { const { container, open, parent, position } = this; if (container && open && parent) { const { direction, start, top } = position; this.style[ direction !== FLOATING_MENU_POSITION_DIRECTION.RTL ? 'left' : 'right' ] = `${start}px`; this.style.top = `${top}px`; } })",
              "description": "The `ResizeObserver` instance for observing element resizes for re-positioning floating menu position.",
              "inheritedFrom": {
                "name": "CDSFloatingMenu",
                "module": "src/components/floating-menu/floating-menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleBlur",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSFloatingMenu",
                "module": "src/components/floating-menu/floating-menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "_click",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSFloatingMenu",
                "module": "src/components/floating-menu/floating-menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKeyDown",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSFloatingMenu",
                "module": "src/components/floating-menu/floating-menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "parent",
              "type": {
                "text": "CDSFloatingMenuTrigger | null"
              },
              "privacy": "protected",
              "default": "null",
              "description": "The DOM element, typically a custom element in this library, launching this floating menu.",
              "inheritedFrom": {
                "name": "CDSFloatingMenu",
                "module": "src/components/floating-menu/floating-menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "container",
              "description": "The DOM element to put this menu into.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSFloatingMenu",
                "module": "src/components/floating-menu/floating-menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "FloatingMenuPosition"
              },
              "description": "The position of this floating menu.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSFloatingMenu",
                "module": "src/components/floating-menu/floating-menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "FLOATING_MENU",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "description": "A constant indicating that this class is a floating menu.",
              "inheritedFrom": {
                "name": "CDSFloatingMenu",
                "module": "src/components/floating-menu/floating-menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectorContainer",
              "static": true,
              "description": "The CSS selector to find the element to put this floating menu in.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSFloatingMenu",
                "module": "src/components/floating-menu/floating-menu.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "CDSFloatingMenu",
                "module": "src/components/floating-menu/floating-menu.ts"
              }
            }
          ],
          "superclass": {
            "name": "CDSFloatingMenu",
            "module": "/src/components/floating-menu/floating-menu"
          },
          "tagName": "cds-overflow-menu-body",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSOverflowMenuBody",
            "module": "src/components/overflow-menu/overflow-menu-body.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/overflow-menu/overflow-menu-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Overflow menu item.",
          "name": "CDSOverflowMenuItem",
          "members": [
            {
              "kind": "field",
              "name": "danger",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the action is danger."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the overflow menu item should be disabled."
            },
            {
              "kind": "field",
              "name": "divider",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the item has a divider"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The link href of the overflow menu item."
            },
            {
              "kind": "field",
              "name": "size",
              "description": "The size of the overflow menu item."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-overflow-menu-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSOverflowMenuItem",
            "module": "src/components/overflow-menu/overflow-menu-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/overflow-menu/overflow-menu-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "renderCustomIcon"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/overflow-menu/overflow-menu-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "renderCustomIcon",
          "declaration": {
            "name": "renderCustomIcon",
            "module": "src/components/overflow-menu/overflow-menu-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/overflow-menu/overflow-menu-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/overflow-menu/overflow-menu-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/overflow-menu/overflow-menu.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Overflow menu.",
          "name": "CDSOverflowMenu",
          "slots": [
            {
              "description": "The icon for the trigger button.",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_menuBody",
              "type": {
                "text": "CDSOverflowMenuBody | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "The menu body."
            },
            {
              "kind": "method",
              "name": "_handleUserInitiatedToggle",
              "privacy": "private",
              "description": "Handles user-initiated toggling of the menu."
            },
            {
              "kind": "field",
              "name": "_handleClickTrigger",
              "privacy": "private",
              "description": "Handles `click` event on the trigger button."
            },
            {
              "kind": "field",
              "name": "_handleKeydownTrigger",
              "privacy": "private",
              "description": "Handles `keydown` event on the trigger button."
            },
            {
              "kind": "field",
              "name": "dataTable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this tooltip is in a data table row"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this overflow menu should be disabled.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "flipped",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this overflow menu body should be flipped."
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the dropdown should be open."
            },
            {
              "kind": "field",
              "name": "index",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Index (starting at 1) of overflow menu item to focus on open."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "string"
              },
              "default": "'md'",
              "description": "Overflow menu size.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "toolbarAction",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this menu is a toolbar action"
            },
            {
              "kind": "field",
              "name": "triggerPosition",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "CDSIconButton",
                "module": "src/components/icon-button/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "string"
              },
              "default": "'top'",
              "description": "Specify how the trigger should align with the tooltip",
              "inheritedFrom": {
                "name": "CDSIconButton",
                "module": "src/components/icon-button/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoalign",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether a auto align functionality should be applied",
              "inheritedFrom": {
                "name": "CDSIconButton",
                "module": "src/components/icon-button/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "closeOnActivation",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Determines whether the tooltip should close when inner content is activated (click, Enter or Space)",
              "inheritedFrom": {
                "name": "CDSIconButton",
                "module": "src/components/icon-button/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the tooltip should be open when it first renders",
              "inheritedFrom": {
                "name": "CDSIconButton",
                "module": "src/components/icon-button/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "enterDelayMs",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "Specify the duration in milliseconds to delay before displaying the tooltip",
              "inheritedFrom": {
                "name": "CDSIconButton",
                "module": "src/components/icon-button/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "leaveDelayMs",
              "type": {
                "text": "number"
              },
              "default": "300",
              "description": "Specify the duration in milliseconds to delay before hiding the tooltip",
              "inheritedFrom": {
                "name": "CDSIconButton",
                "module": "src/components/icon-button/icon-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderTooltipContent",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "CDSIconButton",
                "module": "src/components/icon-button/icon-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasIcon",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`true` if there is an icon.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleDisabledClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleOver",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleHoverOut",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocus",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocusout",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button should have input focus when the page loads.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "batchAction",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button is being used within a data table batch action toolbar",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "buttonClassName",
              "description": "Specify an optional className to be added to your Button",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "dangerDescriptor",
              "description": "Specify the message read by screen readers for the danger button variant",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "description": "The default file name, used if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasMainContent",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if there is a non-icon content.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Link `href`. If present, this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "hreflang",
              "type": {
                "text": "string"
              },
              "description": "The language of what `href` points to, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "isExpressive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if expressive theme enabled.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "isSelected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the Button is currently selected.\nOnly applies to the Ghost variant.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "Button kind.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "linkRole",
              "type": {
                "text": "string"
              },
              "default": "'button'",
              "description": "The a11y role for `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "openTooltip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to determine if tooltip is open.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "ping",
              "type": {
                "text": "string"
              },
              "description": "URLs to ping, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "description": "The link type, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "string"
              },
              "description": "The link target, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipAlignment",
              "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipPosition",
              "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipText",
              "type": {
                "text": "string"
              },
              "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Button type.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            },
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "CDSIconButton",
            "module": "/src/components/icon-button/icon-button"
          },
          "tagName": "cds-overflow-menu",
          "customElement": true,
          "cssParts": [
            {
              "description": "The button.",
              "name": "button",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OVERFLOW_MENU_SIZE",
          "declaration": {
            "name": "OVERFLOW_MENU_SIZE",
            "module": "src/components/overflow-menu/overflow-menu.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSOverflowMenu",
            "module": "src/components/overflow-menu/overflow-menu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/pagination/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/pagination/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/pagination/pagination-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "MultiplePaginationComponents"
        },
        {
          "kind": "function",
          "name": "PaginationCustomPageSizeLabel"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/pagination/pagination-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "MultiplePaginationComponents",
          "declaration": {
            "name": "MultiplePaginationComponents",
            "module": "src/components/pagination/pagination-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "PaginationCustomPageSizeLabel",
          "declaration": {
            "name": "PaginationCustomPageSizeLabel",
            "module": "src/components/pagination/pagination-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/pagination/pagination-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/pagination/pagination-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/pagination/pagination.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Pagination UI.",
          "name": "CDSPagination",
          "slots": [
            {
              "description": "Where to put in the `<page-sizes-select>`.",
              "name": "page-sizes-select"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_pageSizeSelect",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderStatusText",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleUserInitiatedChangeStart",
              "privacy": "private",
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  },
                  "description": "The new current row number, index that starts with zero."
                }
              ],
              "description": "Handles user-initiated change in the row number the current page starts with."
            },
            {
              "kind": "method",
              "name": "_handleClickPrevButton",
              "privacy": "private",
              "description": "Handles `click` event on the previous button."
            },
            {
              "kind": "method",
              "name": "_handleClickNextButton",
              "privacy": "private",
              "description": "Handles `click` event on the next button."
            },
            {
              "kind": "method",
              "name": "_handleChangeSelector",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "description": "The event."
                }
              ],
              "description": "Handles user-initiated change in number of rows per page."
            },
            {
              "kind": "field",
              "name": "backwardText",
              "type": {
                "text": "string"
              },
              "default": "'Previous page'",
              "description": "The assistive text for the button to go to previous page."
            },
            {
              "kind": "field",
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The current page"
            },
            {
              "kind": "field",
              "name": "formatLabelText",
              "description": "The formatter for the assistive text for screen readers to announce.\nShould be changed upon the locale the UI is rendered with."
            },
            {
              "kind": "field",
              "name": "formatStatusWithDeterminateTotal",
              "description": "The formatter, used with determinate the total pages. Should be changed upon the locale the UI is rendered with."
            },
            {
              "kind": "field",
              "name": "formatStatusWithIndeterminateTotal",
              "description": "The formatter, used with indeterminate the total pages. Should be changed upon the locale the UI is rendered with."
            },
            {
              "kind": "field",
              "name": "formatSupplementalText",
              "description": "The formatter for the text next to the select box. Should be changed upon the locale the UI is rendered with."
            },
            {
              "kind": "field",
              "name": "isLastPage",
              "type": {
                "text": "boolean"
              },
              "description": "`true` to explicitly state that user is at the last page."
            },
            {
              "kind": "field",
              "name": "itemsPerPageText",
              "type": {
                "text": "string"
              },
              "default": "'Items per page:'",
              "description": "The translatable text indicating the number of items per page."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the pagination UI should be disabled."
            },
            {
              "kind": "field",
              "name": "forwardText",
              "type": {
                "text": "string"
              },
              "default": "'Next page'",
              "description": "The assistive text for the button to go to next page."
            },
            {
              "kind": "field",
              "name": "pageInputDisabled",
              "description": "true if the select box to change the page should be disabled."
            },
            {
              "kind": "field",
              "name": "pageSize",
              "type": {
                "text": "number"
              },
              "default": "10",
              "description": "Number of items per page."
            },
            {
              "kind": "field",
              "name": "pageSizeInputDisabled",
              "description": "true if the select box to change the items per page should be disabled."
            },
            {
              "kind": "field",
              "name": "pageSizeLabelText",
              "type": {
                "text": "string"
              },
              "description": "The label text for the UI to select page size."
            },
            {
              "kind": "field",
              "name": "pagesUnknown",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "true if the total number of items is unknown."
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Specify the size of the Pagination."
            },
            {
              "kind": "field",
              "name": "start",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The row number where current page start with, index that starts with zero."
            },
            {
              "kind": "field",
              "name": "totalItems",
              "type": {
                "text": "number"
              },
              "description": "The number of total items."
            },
            {
              "kind": "field",
              "name": "totalPages",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "The number of total pages."
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selectorPagesSelect",
              "static": true,
              "description": "A selector that will return the select box for the current page.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorPageSizesSelect",
              "static": true,
              "description": "A selector that will return the select box for page sizes.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventChangeCurrent",
              "static": true,
              "description": "The name of the custom event fired after the current row number is changed.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventChangeSelect",
              "static": true,
              "description": "The name of the custom event fired after the number of rows per page is changed from `<cds-page-sizes-select>`.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The custom event fired after the current page is changed from `<cds-pages-select>`.",
              "name": "cds-pages-select-changed"
            },
            {
              "description": "The custom event fired after the number of rows per page is changed from `<cds-page-sizes-select>`.",
              "name": "cds-page-sizes-select-changed"
            }
          ],
          "mixins": [
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            },
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-pagination",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSPagination",
            "module": "src/components/pagination/pagination.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/popover/autoalign-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Popover",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "Toggletip",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "Tooltip",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "Slug",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Popover",
          "declaration": {
            "name": "Popover",
            "module": "src/components/popover/autoalign-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Toggletip",
          "declaration": {
            "name": "Toggletip",
            "module": "src/components/popover/autoalign-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Tooltip",
          "declaration": {
            "name": "Tooltip",
            "module": "src/components/popover/autoalign-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Slug",
          "declaration": {
            "name": "Slug",
            "module": "src/components/popover/autoalign-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/popover/autoalign-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/popover/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/popover/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/popover/popover-content.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Popover.",
          "name": "CDSPopoverContent",
          "members": [
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Specify the popover alignment"
            },
            {
              "kind": "field",
              "name": "autoalign",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether a auto align functionality should be applied"
            },
            {
              "kind": "field",
              "name": "caret",
              "description": "Specify whether a caret should be rendered"
            },
            {
              "kind": "field",
              "name": "dropShadow",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Specify whether a dropShadow should be rendered"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the component is currently open or closed"
            },
            {
              "kind": "field",
              "name": "tabTip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Render the component using the tab tip variant"
            },
            {
              "kind": "field",
              "name": "slot",
              "type": {
                "text": "string"
              },
              "default": "'content'",
              "description": "The shadow slot this popover content should be in."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-popover",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSPopoverContent",
            "module": "src/components/popover/popover-content.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/popover/popover-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "TabTip"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/popover/popover-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "TabTip",
          "declaration": {
            "name": "TabTip",
            "module": "src/components/popover/popover-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/popover/popover-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/popover/popover.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Popover.",
          "name": "CDSPopover",
          "members": [
            {
              "kind": "field",
              "name": "popoverController",
              "privacy": "private",
              "default": "new PopoverController(this)",
              "description": "Create popover controller instance"
            },
            {
              "kind": "field",
              "name": "_triggerSlotNode",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private",
              "description": "The `<slot>` element in the shadow DOM."
            },
            {
              "kind": "field",
              "name": "_contentSlotNode",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private",
              "description": "The `<slot>` element in the shadow DOM."
            },
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Specify direction of alignment"
            },
            {
              "kind": "field",
              "name": "autoalign",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether a auto align functionality should be applied"
            },
            {
              "kind": "field",
              "name": "caret",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Specify whether a caret should be rendered"
            },
            {
              "kind": "field",
              "name": "dropShadow",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Specify whether a dropShadow should be rendered"
            },
            {
              "kind": "field",
              "name": "highContrast",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Render the component using the high-contrast variant"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the component is currently open or closed"
            },
            {
              "kind": "field",
              "name": "tabTip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Render the component using the tab tip variant"
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event."
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selectorPopoverContentClass",
              "static": true,
              "description": "A selector that will return popover content element within\nCDSPopoverContent's shadowRoot.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorPopoverCaret",
              "static": true,
              "description": "A selector that will return popover caret element within\nCDSPopoverContent's shadowRoot.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorPopoverContent",
              "static": true,
              "description": "A selector that will return the CDSPopoverContent.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-popover",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSPopover",
            "module": "src/components/popover/popover.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress-bar/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress-bar/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress-bar/progress-bar-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Example"
        },
        {
          "kind": "function",
          "name": "Indeterminate"
        },
        {
          "kind": "function",
          "name": "WithLayer"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/progress-bar/progress-bar-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Example",
          "declaration": {
            "name": "Example",
            "module": "src/components/progress-bar/progress-bar-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Indeterminate",
          "declaration": {
            "name": "Indeterminate",
            "module": "src/components/progress-bar/progress-bar-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "WithLayer",
          "declaration": {
            "name": "WithLayer",
            "module": "src/components/progress-bar/progress-bar-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/progress-bar/progress-bar-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/progress-bar/progress-bar-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress-bar/progress-bar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Progress bar.",
          "name": "CDSProgressBar",
          "members": [
            {
              "kind": "field",
              "name": "helperText",
              "description": "The current progress as a textual representation."
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "description": "Whether the label should be visually hidden."
            },
            {
              "kind": "field",
              "name": "label",
              "description": "A label describing the progress bar."
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "The maximum value."
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Specify the size of the ProgressBar."
            },
            {
              "kind": "field",
              "name": "status",
              "description": "Specify the status."
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Defines the alignment variant of the progress bar."
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The current value."
            },
            {
              "kind": "field",
              "name": "_cappedValue",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-progress-bar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PROGRESS_BAR_SIZE",
          "declaration": {
            "name": "PROGRESS_BAR_SIZE",
            "module": "src/components/progress-bar/progress-bar.ts"
          }
        },
        {
          "kind": "js",
          "name": "PROGRESS_BAR_STATUS",
          "declaration": {
            "name": "PROGRESS_BAR_STATUS",
            "module": "src/components/progress-bar/progress-bar.ts"
          }
        },
        {
          "kind": "js",
          "name": "PROGRESS_BAR_TYPE",
          "declaration": {
            "name": "PROGRESS_BAR_TYPE",
            "module": "src/components/progress-bar/progress-bar.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSProgressBar",
            "module": "src/components/progress-bar/progress-bar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress-indicator/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress-indicator/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress-indicator/progress-indicator-skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Skeleton of progress indicator.",
          "name": "CDSProgressIndicatorSkeleton",
          "members": [
            {
              "kind": "field",
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the progress indicator should be vertical. Corresponds to the attribute with the same name."
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selectorStep",
              "static": true,
              "description": "A selector that will return progress steps.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSProgressIndicatorSkeleton",
            "module": "src/components/progress-indicator/progress-indicator-skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress-indicator/progress-indicator-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Interactive"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "skeleton",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/progress-indicator/progress-indicator-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Interactive",
          "declaration": {
            "name": "Interactive",
            "module": "src/components/progress-indicator/progress-indicator-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/progress-indicator/progress-indicator-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "skeleton",
          "declaration": {
            "name": "skeleton",
            "module": "src/components/progress-indicator/progress-indicator-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/progress-indicator/progress-indicator-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress-indicator/progress-indicator.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Progress indicator.",
          "name": "CDSProgressIndicator",
          "members": [
            {
              "kind": "field",
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether or not the progress indicator should be rendered\nvertically."
            },
            {
              "kind": "field",
              "name": "spaceEqually",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the progress steps should be split equally in size in the\ndiv"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selectorStep",
              "static": true,
              "description": "A selector that will return progress steps.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-progress-indicator",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSProgressIndicator",
            "module": "src/components/progress-indicator/progress-indicator.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress-indicator/progress-step-skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Skeleton of progress step.",
          "name": "CDSProgressStepSkeleton",
          "members": [
            {
              "kind": "field",
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the progress indicator should be vertical. Corresponds to the attribute with the same name."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSProgressStepSkeleton",
            "module": "src/components/progress-indicator/progress-step-skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress-indicator/progress-step.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Progress step.",
          "name": "CDSProgressStep",
          "slots": [
            {
              "description": "The secondary progress label.",
              "name": "secondary-label-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the progress step should be disabled."
            },
            {
              "kind": "field",
              "name": "iconLabel",
              "type": {
                "text": "string"
              },
              "description": "The a11y text for the icon."
            },
            {
              "kind": "field",
              "name": "description",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "labelText",
              "type": {
                "text": "string"
              },
              "description": "The primary progress label."
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "secondaryLabelText",
              "type": {
                "text": "string"
              },
              "description": "The secondary progress label."
            },
            {
              "kind": "field",
              "name": "secondaryLabel",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "state",
              "description": "The progress state."
            },
            {
              "kind": "field",
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the progress step should be vertical.",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "spaceEqually",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the progress step should be spaced equally.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-progress-step",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PROGRESS_STEP_STAT",
          "declaration": {
            "name": "PROGRESS_STEP_STAT",
            "module": "src/components/progress-indicator/progress-step.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSProgressStep",
            "module": "src/components/progress-indicator/progress-step.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio-button/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio-button/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio-button/radio-button-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Radio button group.",
          "name": "CDSRadioButtonGroup",
          "members": [
            {
              "kind": "field",
              "name": "_handleAfterChangeRadioButton",
              "privacy": "private",
              "description": "Handles user-initiated change in selected radio button."
            },
            {
              "kind": "method",
              "name": "_handleFormdata",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `formdata` event.",
              "inheritedFrom": {
                "name": "FormMixin",
                "module": "src/globals/mixins/form.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event."
            },
            {
              "kind": "field",
              "name": "_hasSlug",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "description": "`true` if there is a slug."
            },
            {
              "kind": "field",
              "name": "defaultSelected",
              "type": {
                "text": "string"
              },
              "description": "The `value` attribute for the `<input>` for selection."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the radio button group should be disabled."
            },
            {
              "kind": "field",
              "name": "labelPosition",
              "description": "The label position."
            },
            {
              "kind": "field",
              "name": "legendText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label position."
            },
            {
              "kind": "field",
              "name": "helperText",
              "description": "The helper text."
            },
            {
              "kind": "field",
              "name": "warn",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the control is currently in warning state"
            },
            {
              "kind": "field",
              "name": "warnText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Provide the text that is displayed when the control is in warning state"
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify if the currently value is invalid."
            },
            {
              "kind": "field",
              "name": "invalidText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Message which is displayed if the value is invalid."
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The `name` attribute for the `<input>` for selection."
            },
            {
              "kind": "field",
              "name": "orientation",
              "description": "The orientation to lay out radio buttons."
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Controls the readonly state of the radio button group."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The `value` attribute for the `<input>` for selection."
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selectorRadioButton",
              "static": true,
              "description": "A selector that will return the radio buttons.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "slugItem",
              "static": true,
              "description": "A selector that will return the slug item.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventChange",
              "static": true,
              "description": "The name of the custom event fired after this radio button group changes its selected item.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventChangeRadioButton",
              "static": true,
              "description": "The name of the custom event fired after a radio button changes its checked state.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "_hFormdata",
              "type": {
                "text": "Handle | null"
              },
              "default": "null",
              "description": "The handle for `formdata` event listener on the containing form.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormMixin",
                "module": "src/globals/mixins/form.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            }
          ],
          "events": [
            {
              "description": "The custom event fired after this radio button group changes its selected item.",
              "name": "cds-radio-button-group-changed"
            },
            {
              "description": "The name of the custom event fired after a radio button changes its checked state.",
              "name": "cds-radio-button-changed"
            }
          ],
          "mixins": [
            {
              "name": "FormMixin",
              "module": "/src/globals/mixins/form"
            },
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-radio-button-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RADIO_BUTTON_ORIENTATION",
          "declaration": {
            "name": "RADIO_BUTTON_ORIENTATION",
            "module": "src/components/radio-button/radio-button-group.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSRadioButtonGroup",
            "module": "src/components/radio-button/radio-button-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio-button/radio-button-skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Skeleton of radio button.",
          "name": "CDSRadioButtonSkeleton",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSRadioButtonSkeleton",
            "module": "src/components/radio-button/radio-button-skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio-button/radio-button-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "skeleton"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/radio-button/radio-button-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "skeleton",
          "declaration": {
            "name": "skeleton",
            "module": "src/components/radio-button/radio-button-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/radio-button/radio-button-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/radio-button/radio-button-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio-button/radio-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Radio button.",
          "name": "CDSRadioButton",
          "members": [
            {
              "kind": "field",
              "name": "_manager",
              "type": {
                "text": "RadioGroupManager | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "The radio group manager associated with the radio button."
            },
            {
              "kind": "field",
              "name": "_radioButtonDelegate",
              "type": {
                "text": "RadioButtonDelegate"
              },
              "privacy": "private",
              "description": "The interface for `RadioGroupManager` for radio button."
            },
            {
              "kind": "field",
              "name": "_inputNode",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private",
              "description": "The hidden radio button."
            },
            {
              "kind": "field",
              "name": "_handleClick",
              "privacy": "private",
              "description": "Handles `click` event on this element."
            },
            {
              "kind": "field",
              "name": "_handleKeydown",
              "privacy": "private",
              "description": "Handles `keydown` event on this element."
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event."
            },
            {
              "kind": "field",
              "name": "_hasSlug",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "description": "`true` if there is a slug."
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this radio button should be checked."
            },
            {
              "kind": "field",
              "name": "dataTable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the radio button is used in a data table"
            },
            {
              "kind": "field",
              "name": "disabledItem",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the radio button item should be disabled."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the radio button group should be disabled."
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the label should be hidden."
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify if the currently value is invalid."
            },
            {
              "kind": "field",
              "name": "labelPosition",
              "description": "The label position."
            },
            {
              "kind": "field",
              "name": "labelText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label text."
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The `name` attribute for the `<input>` for selection."
            },
            {
              "kind": "field",
              "name": "orientation",
              "description": "The orientation to lay out radio buttons."
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the radio button group should be disabled."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The `value` attribute for the `<input>` for selection."
            },
            {
              "kind": "method",
              "name": "firstUpdated"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "slugItem",
              "static": true,
              "description": "A selector that will return the slug item.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventChange",
              "static": true,
              "description": "The name of the custom event fired after this radio button changes its checked state.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "events": [
            {
              "description": "The custom event fired after this radio button changes its checked state.",
              "name": "cds-radio-button-changed"
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            },
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-radio-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RADIO_BUTTON_LABEL_POSITION",
          "declaration": {
            "name": "RADIO_BUTTON_LABEL_POSITION",
            "module": "src/components/radio-button/radio-button.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSRadioButton",
            "module": "src/components/radio-button/radio-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/search/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/search/search-skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Skeleton of search.",
          "name": "CDSSearchSkeleton",
          "members": [
            {
              "kind": "field",
              "name": "size",
              "description": "The search box size. Corresponds to the attribute with the same name."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSSearchSkeleton",
            "module": "src/components/search/search-skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/search/search-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Disabled"
        },
        {
          "kind": "function",
          "name": "Expandable"
        },
        {
          "kind": "function",
          "name": "ExpandableWithLayer"
        },
        {
          "kind": "function",
          "name": "WithLayer"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/search/search-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Disabled",
          "declaration": {
            "name": "Disabled",
            "module": "src/components/search/search-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Expandable",
          "declaration": {
            "name": "Expandable",
            "module": "src/components/search/search-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "ExpandableWithLayer",
          "declaration": {
            "name": "ExpandableWithLayer",
            "module": "src/components/search/search-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "WithLayer",
          "declaration": {
            "name": "WithLayer",
            "module": "src/components/search/search-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/search/search-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/search/search-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/search/search.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Search box.",
          "name": "CDSSearch",
          "cssParts": [
            {
              "description": "The search icon.",
              "name": "search-icon"
            },
            {
              "description": "The label text.",
              "name": "label-text"
            },
            {
              "description": "The input box.",
              "name": "input"
            },
            {
              "description": "The close button.",
              "name": "close-button"
            },
            {
              "description": "The close icon.",
              "name": "close-icon"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "_handleInput",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `input` event on the `<input>` in the shadow DOM."
            },
            {
              "kind": "method",
              "name": "_handleClearInputButtonClick",
              "privacy": "private",
              "description": "Handles `click` event on the button to clear search box content."
            },
            {
              "kind": "method",
              "name": "_handleExpand",
              "privacy": "private",
              "description": "Handles `focus` event on the button when the button can be expanded"
            },
            {
              "kind": "method",
              "name": "_handleClose",
              "privacy": "private",
              "description": "Handles `focusout` event on the component to be closed after being expanded\nWill not close if there is a value typed within."
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "description": "Handler for"
            },
            {
              "kind": "method",
              "name": "_handleFormdata",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `formdata` event.",
              "inheritedFrom": {
                "name": "FormMixin",
                "module": "src/globals/mixins/form.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoComplete",
              "type": {
                "text": "string"
              },
              "default": "'off'",
              "description": "Specify an optional value for the autocomplete property on the underlying <input>,\ndefaults to \"off\""
            },
            {
              "kind": "field",
              "name": "closeButtonLabelText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Specify a label to be read by screen readers on the \"close\" button"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the search box should be disabled."
            },
            {
              "kind": "field",
              "name": "expandable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the search bar can be expandable"
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the expandable search has been expanded"
            },
            {
              "kind": "field",
              "name": "hasCustomIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "labelText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label text."
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The form name in `FormData`."
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Specify the role for the underlying <input>, defaults to searchbox"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "'Search'",
              "description": "The placeholder text."
            },
            {
              "kind": "field",
              "name": "size",
              "description": "The search box size."
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `<input>` name."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "eventInput",
              "static": true,
              "description": "The name of the custom event fired after the search content is changed upon a user gesture.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hFormdata",
              "type": {
                "text": "Handle | null"
              },
              "default": "null",
              "description": "The handle for `formdata` event listener on the containing form.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormMixin",
                "module": "src/globals/mixins/form.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The custom event fired after the search content is changed upon a user gesture.",
              "name": "cds-search-input"
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            },
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            },
            {
              "name": "FormMixin",
              "module": "/src/globals/mixins/form"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-search",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSSearch",
            "module": "src/components/search/search.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select-item-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An option group in select box.",
          "name": "CDSSelectItemGroup",
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` to disable this option."
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label."
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-select-item-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSSelectItemGroup",
            "module": "src/components/select/select-item-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An option in select box.",
          "name": "CDSSelectItem",
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` to disable this option."
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label. If this is not specified, the child text content is used."
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` to select this option."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value."
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-select-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSSelectItem",
            "module": "src/components/select/select-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select-skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Skeleton of number input.",
          "name": "CDSSelectSkeleton",
          "members": [
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the label should be hidden. Corresponds to the attribute with the same name."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSSelectSkeleton",
            "module": "src/components/select/select-skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Inline"
        },
        {
          "kind": "function",
          "name": "skeleton"
        },
        {
          "kind": "function",
          "name": "WithLayer"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/select/select-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Inline",
          "declaration": {
            "name": "Inline",
            "module": "src/components/select/select-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "skeleton",
          "declaration": {
            "name": "skeleton",
            "module": "src/components/select/select-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "WithLayer",
          "declaration": {
            "name": "WithLayer",
            "module": "src/components/select/select-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/select/select-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/select/select-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Select box.",
          "name": "CDSSelect",
          "slots": [
            {
              "description": "The helper text.",
              "name": "helper-text"
            },
            {
              "description": "The label text.",
              "name": "label-text"
            },
            {
              "description": "The validity message. If present and non-empty, this input shows the UI of its invalid state.",
              "name": "validity-message"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_hasSlug",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "description": "`true` if there is a slug."
            },
            {
              "kind": "field",
              "name": "_observerMutation",
              "type": {
                "text": "MutationObserver | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "The mutation observer DOM mutation."
            },
            {
              "kind": "field",
              "name": "_placeholderItemValue",
              "privacy": "private",
              "default": "`__${prefix}-select-placeholder_${Math.random() .toString(36) .slice(2)}`",
              "description": "The `value` for placeholder `<option>`."
            },
            {
              "kind": "field",
              "name": "_selectNode",
              "type": {
                "text": "HTMLSelectElement"
              },
              "privacy": "private",
              "description": "The select box."
            },
            {
              "kind": "method",
              "name": "_handleInput",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "description": "The event.",
                  "name": "event"
                },
                {
                  "description": "The event target.",
                  "name": "event.target"
                }
              ],
              "description": "Handles `oninput` event on the `<input>`."
            },
            {
              "kind": "field",
              "name": "_handleMutation",
              "privacy": "private",
              "description": "Handles DOM mutation of `<cds-select-item>` or `<cds-select-item-group>` put in `<cds-select>`, or their changes.\nIn such event, `<cds-select>` creates the corresponding `<option>` and `<optgroup>`, respectively, into shadow DOM,\nwith `._renderItems()`.\nDoing so allows the shadow DOM style of `<cds-select>` to control the style of the `<option>` and `<optgroup>`,\nnotably the disabled ones."
            },
            {
              "kind": "method",
              "name": "_renderItems",
              "privacy": "private",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "CDSSelect | HTMLOptGroupElement"
                  },
                  "description": "The parent element containing pseudo `<optgroup>`/`<option>`."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleFormdata",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `formdata` event.",
              "inheritedFrom": {
                "name": "FormMixin",
                "module": "src/globals/mixins/form.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlugSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event."
            },
            {
              "kind": "field",
              "name": "length",
              "description": "The count of child `<option>`s.\nIf the placeholder is in effect, it includes the `<option>` for the placeholder.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "options",
              "description": "The child `<option>`s.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "description": "This form control's type.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the select to be focussed automatically on page load. Defaults to false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Controls the disabled state of the select"
            },
            {
              "kind": "field",
              "name": "helperText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The helper text."
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the label should be hidden, or not"
            },
            {
              "kind": "field",
              "name": "id",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "ID to link the `label` and `select`"
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify if the currently value is invalid."
            },
            {
              "kind": "field",
              "name": "invalidText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Message which is displayed if the value is invalid."
            },
            {
              "kind": "field",
              "name": "warn",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify if the currently value is warn."
            },
            {
              "kind": "field",
              "name": "warnText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Message which is displayed if the value is warn."
            },
            {
              "kind": "field",
              "name": "labelText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label text."
            },
            {
              "kind": "field",
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether you want the inline version of this control"
            },
            {
              "kind": "field",
              "name": "multiple",
              "description": "`true` to enable multiple selection.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Name for the select in the `FormData`"
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Pattern to validate the select against for HTML validity checking"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Value to display when the select has an empty `value`"
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Controls the readonly state of the select"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean property to set the required status"
            },
            {
              "kind": "field",
              "name": "requiredValidityMessage",
              "type": {
                "text": "string"
              },
              "default": "'Please fill out this field.'",
              "description": "The special validity message for `required`."
            },
            {
              "kind": "field",
              "name": "selectedIndex",
              "description": "The selected index."
            },
            {
              "kind": "field",
              "name": "size",
              "description": "The input box size."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value of the text area."
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selectorItem",
              "static": true,
              "description": "A selector selecting child pseudo `<optgroup>`/`<option>`.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorLeafItem",
              "static": true,
              "description": "A selector selecting child pseudo `<option>`.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "slugItem",
              "static": true,
              "description": "A selector that will return the slug item.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventSelect",
              "static": true,
              "description": "The name of the custom event fired after item is selected.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "_hFormdata",
              "type": {
                "text": "Handle | null"
              },
              "default": "null",
              "description": "The handle for `formdata` event listener on the containing form.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormMixin",
                "module": "src/globals/mixins/form.ts"
              }
            }
          ],
          "events": [
            {
              "name": "eventSelect",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The name of the custom event fired after an item is selected.",
              "name": "cds-select-selected"
            }
          ],
          "mixins": [
            {
              "name": "FormMixin",
              "module": "/src/globals/mixins/form"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-select",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSSelect",
            "module": "src/components/select/select.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/side-panel/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/side-panel/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/side-panel/side-panel-story.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "SlideOver",
          "default": "DefaultTemplate.bind({})"
        },
        {
          "kind": "variable",
          "name": "SlideIn",
          "default": "DefaultTemplate.bind({})"
        },
        {
          "kind": "variable",
          "name": "WithActionToolbar",
          "default": "DefaultTemplate.bind({})"
        },
        {
          "kind": "variable",
          "name": "SpecifyElementToHaveFocus",
          "default": "DefaultTemplate.bind( {} )"
        },
        {
          "kind": "variable",
          "name": "WithStaticTitle",
          "default": "DefaultTemplate.bind({})"
        },
        {
          "kind": "variable",
          "name": "WithStaticTitleAndActionToolbar",
          "default": "DefaultTemplate.bind( {} )"
        },
        {
          "kind": "variable",
          "name": "WithoutTitle",
          "default": "DefaultTemplate.bind({})"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/side-panel/side-panel-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "SlideOver",
          "declaration": {
            "name": "SlideOver",
            "module": "src/components/side-panel/side-panel-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "SlideIn",
          "declaration": {
            "name": "SlideIn",
            "module": "src/components/side-panel/side-panel-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "WithActionToolbar",
          "declaration": {
            "name": "WithActionToolbar",
            "module": "src/components/side-panel/side-panel-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "SpecifyElementToHaveFocus",
          "declaration": {
            "name": "SpecifyElementToHaveFocus",
            "module": "src/components/side-panel/side-panel-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "WithStaticTitle",
          "declaration": {
            "name": "WithStaticTitle",
            "module": "src/components/side-panel/side-panel-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "WithStaticTitleAndActionToolbar",
          "declaration": {
            "name": "WithStaticTitleAndActionToolbar",
            "module": "src/components/side-panel/side-panel-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "WithoutTitle",
          "declaration": {
            "name": "WithoutTitle",
            "module": "src/components/side-panel/side-panel-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/side-panel/side-panel.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "SidePanel.",
          "name": "CDSSidePanel",
          "cssParts": [
            {
              "description": "The dialog.",
              "name": "dialog"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_hObserveResize",
              "type": {
                "text": "Handle | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "The handle for observing resize of the parent element of this element."
            },
            {
              "kind": "field",
              "name": "_launcher",
              "type": {
                "text": "Element | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "The element that had focus before this side-panel gets open."
            },
            {
              "kind": "field",
              "name": "_startSentinelNode",
              "type": {
                "text": "HTMLAnchorElement"
              },
              "privacy": "private",
              "description": "Node to track focus going outside of side-panel content."
            },
            {
              "kind": "field",
              "name": "_endSentinelNode",
              "type": {
                "text": "HTMLAnchorElement"
              },
              "privacy": "private",
              "description": "Node to track focus going outside of side-panel content."
            },
            {
              "kind": "field",
              "name": "_sidePanel",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private",
              "description": "Node to track side panel."
            },
            {
              "kind": "field",
              "name": "_animateScrollWrapper",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_label",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_title",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_subtitle",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_innerContent",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_actions",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_doAnimateTitle",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "_isOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_containerScrollTop",
              "type": {
                "text": "number"
              },
              "default": "-16"
            },
            {
              "kind": "field",
              "name": "_hasSubtitle",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_hasSlug",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_hasActionToolbar",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_actionsCount",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_slugCloseSize",
              "type": {
                "text": "string"
              },
              "default": "'sm'"
            },
            {
              "kind": "field",
              "name": "_handleBlur",
              "privacy": "private",
              "description": "Handles `blur` event on this element.",
              "parameters": [
                {
                  "description": "The event.",
                  "name": "event"
                },
                {
                  "description": "The event target.",
                  "name": "event.target"
                },
                {
                  "description": "The event relatedTarget.",
                  "name": "event.relatedTarget"
                }
              ]
            },
            {
              "kind": "field",
              "name": "_handleKeydown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_reducedMotion",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleClickOnOverlay",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `click` event on the side-panel container."
            },
            {
              "kind": "method",
              "name": "_handleCloseClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `click` event on the side-panel container."
            },
            {
              "kind": "method",
              "name": "_handleUserInitiatedClose",
              "privacy": "private",
              "parameters": [
                {
                  "name": "triggeredBy",
                  "type": {
                    "text": "EventTarget | null"
                  },
                  "description": "The element that triggered this close request."
                }
              ],
              "description": "Handles user-initiated close request of this side-panel."
            },
            {
              "kind": "method",
              "name": "_handleNavigateBack",
              "privacy": "private",
              "parameters": [
                {
                  "name": "triggeredBy",
                  "type": {
                    "text": "EventTarget | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_adjustPageContent",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_checkSetOpen",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_checkUpdateIconButtonSizes",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleSlugChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleSubtitleChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleActionToolbarChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_checkUpdateActionSizes",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_maxActions",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "3"
            },
            {
              "kind": "method",
              "name": "_handleActionsChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_checkSetDoAnimateTitle",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_resizeObserver",
              "privacy": "private",
              "default": "new ResizeObserver(() => { if (this._sidePanel) { this._checkSetDoAnimateTitle(); } })",
              "description": "The `ResizeObserver` instance for observing element resizes for re-positioning floating menu position."
            },
            {
              "kind": "field",
              "name": "_getScrollAnimationDistance",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_scrollObserver",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleCurrentStepUpdate",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "animateTitle",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Determines if the title will animate on scroll"
            },
            {
              "kind": "field",
              "name": "closeIconDescription",
              "type": {
                "text": "string"
              },
              "default": "'Close'",
              "description": "Sets the close button icon description"
            },
            {
              "kind": "field",
              "name": "condensedActions",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the side panel should render the condensed version (affects action buttons primarily)"
            },
            {
              "kind": "field",
              "name": "currentStep",
              "description": "Sets the current step of the side panel"
            },
            {
              "kind": "field",
              "name": "includeOverlay",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether the side panel should render with an overlay"
            },
            {
              "kind": "field",
              "name": "labelText",
              "description": "Sets the label text which will display above the title text"
            },
            {
              "kind": "field",
              "name": "navigationBackIconDescription",
              "type": {
                "text": "string"
              },
              "default": "'Back'",
              "description": "Sets the icon description for the navigation back icon button"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the side-panel should be open."
            },
            {
              "kind": "field",
              "name": "placement",
              "description": "SidePanel placement."
            },
            {
              "kind": "field",
              "name": "preventCloseOnClickOutside",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Prevent closing on click outside of side-panel"
            },
            {
              "kind": "field",
              "name": "selectorInitialFocus",
              "description": "The initial location of focus in the side panel"
            },
            {
              "kind": "field",
              "name": "selectorPageContent",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Selector for page content, used to push content to side except"
            },
            {
              "kind": "field",
              "name": "size",
              "description": "SidePanel size."
            },
            {
              "kind": "field",
              "name": "slideIn",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines if this panel slides in"
            },
            {
              "kind": "field",
              "name": "title",
              "description": "Sets the title text"
            },
            {
              "kind": "method",
              "name": "connectObservers"
            },
            {
              "kind": "method",
              "name": "disconnectObservers"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_delay",
              "privacy": "private",
              "static": true,
              "parameters": [
                {
                  "name": "ms",
                  "default": "0",
                  "description": "The number of milliseconds."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "selectorTabbable",
              "static": true,
              "description": "A selector selecting tabbable nodes.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventBeforeClose",
              "static": true,
              "description": "The name of the custom event fired before this side-panel is being closed upon a user gesture.\nCancellation of this event stops the user-initiated action of closing this side-panel.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventClose",
              "static": true,
              "description": "The name of the custom event fired after this side-panel is closed upon a user gesture.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventNavigateBack",
              "static": true,
              "description": "The name of the custom event fired on clicking the navigate back button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The custom event fired before this side-panel is being closed upon a user gesture. Cancellation of this event stops the user-initiated action of closing this side-panel.",
              "name": "cds-side-panel-beingclosed"
            },
            {
              "description": "The custom event fired after this side-panel is closed upon a user gesture.",
              "name": "cds-side-panel-closed"
            },
            {
              "description": "custom event fired when clicking navigate back (available when step > 0)",
              "name": "cds-side-panel-navigate-back"
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-side-panel",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SIDE_PANEL_SIZE",
          "declaration": {
            "name": "SIDE_PANEL_SIZE",
            "module": "src/components/side-panel/side-panel.ts"
          }
        },
        {
          "kind": "js",
          "name": "SIDE_PANEL_PLACEMENT",
          "declaration": {
            "name": "SIDE_PANEL_PLACEMENT",
            "module": "src/components/side-panel/side-panel.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSSidePanel",
            "module": "src/components/side-panel/side-panel.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/skeleton-icon/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/skeleton-icon/skeleton-icon-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/skeleton-icon/skeleton-icon-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/skeleton-icon/skeleton-icon-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/skeleton-icon/skeleton-icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Skeleton icon.",
          "name": "CDSSkeletonIcon",
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-skeleton-icon",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSSkeletonIcon",
            "module": "src/components/skeleton-icon/skeleton-icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/skeleton-placeholder/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/skeleton-placeholder/skeleton-placeholder-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/skeleton-placeholder/skeleton-placeholder-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/skeleton-placeholder/skeleton-placeholder-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/skeleton-placeholder/skeleton-placeholder.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Skeleton placeholder.",
          "name": "CDSSkeletonPlaceholder",
          "members": [
            {
              "kind": "field",
              "name": "optionalClasses",
              "description": "Specify optional classes to be added to your SkeletonText"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-skeleton-placeholder",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSSkeletonPlaceholder",
            "module": "src/components/skeleton-placeholder/skeleton-placeholder.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/skeleton-text/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/skeleton-text/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/skeleton-text/skeleton-text-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/skeleton-text/skeleton-text-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/skeleton-text/skeleton-text-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/skeleton-text/skeleton-text-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/skeleton-text/skeleton-text.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Skeleton text.",
          "name": "CDSSkeletonText",
          "members": [
            {
              "kind": "field",
              "name": "optionalClasses",
              "description": "Specify optional classes to be added to your SkeletonText"
            },
            {
              "kind": "field",
              "name": "type",
              "description": "The type of skeleton text."
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "string"
              },
              "default": "'100%'",
              "description": "width (in px or %) of single line of text or max-width of paragraph lines"
            },
            {
              "kind": "field",
              "name": "paragraph",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "will generate multiple lines of text"
            },
            {
              "kind": "field",
              "name": "lineCount",
              "type": {
                "text": "number"
              },
              "default": "3",
              "description": "the number of lines in a paragraph"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-skeleton-text",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SKELETON_TEXT_TYPE",
          "declaration": {
            "name": "SKELETON_TEXT_TYPE",
            "module": "src/components/skeleton-text/skeleton-text.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSSkeletonText",
            "module": "src/components/skeleton-text/skeleton-text.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/skip-to-content/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/skip-to-content/skip-to-content-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/skip-to-content/skip-to-content-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/skip-to-content/skip-to-content-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/skip-to-content/skip-to-content.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Skip-to-content link.",
          "name": "CDSSkipToContent",
          "members": [
            {
              "kind": "field",
              "name": "linkAssisstiveText",
              "type": {
                "text": "string"
              },
              "default": "'Skip to main content'",
              "description": "The assistive text for the link,"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "description": "The skip link href."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-skip-to-content",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSSkipToContent",
            "module": "src/components/skip-to-content/skip-to-content.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slider/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slider/slider-input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The `<input>` box for slider.",
          "name": "CDSSliderInput",
          "members": [
            {
              "kind": "field",
              "name": "_max",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "'100'",
              "description": "The internal value of `max` property."
            },
            {
              "kind": "field",
              "name": "_min",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "'0'",
              "description": "The internal value of `min` property."
            },
            {
              "kind": "field",
              "name": "_step",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "'1'",
              "description": "The internal value of `step` property."
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `change` event to fire a normalized custom event."
            },
            {
              "kind": "method",
              "name": "_handleInput",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `input` event to fire a normalized custom event."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the input should be disabled."
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "true to specify if the control is invalid."
            },
            {
              "kind": "field",
              "name": "warn",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "true to specify if the control should display warn icon and text."
            },
            {
              "kind": "field",
              "name": "max",
              "description": "The maximum value."
            },
            {
              "kind": "field",
              "name": "min",
              "description": "The minimum value."
            },
            {
              "kind": "field",
              "name": "step",
              "description": "The snapping step of the value."
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "default": "'number'",
              "description": "The type of the `<input>`."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "description": "The value."
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "true` if the input should be readonly."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selectorParent",
              "static": true,
              "description": "A selector that will return the parent slider.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventChange",
              "static": true,
              "description": "The name of the custom event fired after the value is changed by user gesture.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The custom event fired after the value is changed by user gesture.",
              "name": "cds-slider-input-changed"
            }
          ],
          "mixins": [
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-slider-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSSliderInput",
            "module": "src/components/slider/slider-input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slider/slider-skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Skeleton of slider.",
          "name": "CDSSliderSkeleton",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSSliderSkeleton",
            "module": "src/components/slider/slider-skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slider/slider-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "ControlledSlider"
        },
        {
          "kind": "function",
          "name": "ControlledSliderWithLayer"
        },
        {
          "kind": "function",
          "name": "WithLayer"
        },
        {
          "kind": "function",
          "name": "skeleton"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/slider/slider-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "ControlledSlider",
          "declaration": {
            "name": "ControlledSlider",
            "module": "src/components/slider/slider-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "ControlledSliderWithLayer",
          "declaration": {
            "name": "ControlledSliderWithLayer",
            "module": "src/components/slider/slider-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "WithLayer",
          "declaration": {
            "name": "WithLayer",
            "module": "src/components/slider/slider-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "skeleton",
          "declaration": {
            "name": "skeleton",
            "module": "src/components/slider/slider-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/slider/slider-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/slider/slider-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slider/slider.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Slider.",
          "name": "CDSSlider",
          "slots": [
            {
              "description": "The label text.",
              "name": "label-text"
            },
            {
              "description": "The text for maximum value.",
              "name": "max-text"
            },
            {
              "description": "The text for minimum value.",
              "name": "min-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_max",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "'100'",
              "description": "The internal value of `max` property."
            },
            {
              "kind": "field",
              "name": "_min",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "'0'",
              "description": "The internal value of `min` property."
            },
            {
              "kind": "field",
              "name": "_step",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "'1'",
              "description": "The internal value of `step` property."
            },
            {
              "kind": "field",
              "name": "_stepMultiplier",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "'4'",
              "description": "The internal value of `stepMultiplier` property."
            },
            {
              "kind": "field",
              "name": "_throttledHandlePointermoveImpl",
              "type": {
                "text": "| (((event: PointerEvent) => void) & Cancelable)\n    | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "The handle for the throttled listener of `pointermove` event."
            },
            {
              "kind": "field",
              "name": "_dragging",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`true` if dragging of thumb is in progress."
            },
            {
              "kind": "field",
              "name": "_rate",
              "privacy": "private",
              "description": "The rate of the thumb position in the track.\nWhen we try to set a new value, we adjust the value considering `step` property."
            },
            {
              "kind": "field",
              "name": "_thumbNode",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private",
              "description": "The DOM element of the thumb."
            },
            {
              "kind": "field",
              "name": "_trackNode",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private",
              "description": "The DOM element of the track."
            },
            {
              "kind": "method",
              "name": "_handleClickLabel",
              "description": "Handles `click` event on the `<label>` to focus on the thumb."
            },
            {
              "kind": "method",
              "name": "_handleFormdata",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `formdata` event.",
              "inheritedFrom": {
                "name": "FormMixin",
                "module": "src/globals/mixins/form.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleKeydown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ key, shiftKey }",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handles `keydown` event on the thumb to increase/decrease the value."
            },
            {
              "kind": "method",
              "name": "_startDrag",
              "privacy": "private",
              "description": "Handles `pointerdown` event on the thumb to start dragging."
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ],
              "description": "Handles `pointerdown` event on the track to update the thumb position and the value as necessary."
            },
            {
              "kind": "field",
              "name": "_handlePointermove",
              "privacy": "private",
              "description": "Handles `pointermove` to update the thumb position and the value as necessary.",
              "parameters": [
                {
                  "description": "The event.",
                  "name": "event"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handlePointermoveImpl",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "PointerEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Updates thumb position and value upon user's `pointermove` gesture."
            },
            {
              "kind": "field",
              "name": "_endDrag",
              "privacy": "private",
              "description": "Handles `pointerup` and `pointerleave` event to finishing dragging."
            },
            {
              "kind": "field",
              "name": "_handleChangeInput",
              "privacy": "private",
              "description": "Handles `${prefix}-slider-input-changed` event to update the value."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the check box should be disabled."
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "true to specify if the control is required."
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the slider should be read-only"
            },
            {
              "kind": "field",
              "name": "labelText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label text."
            },
            {
              "kind": "field",
              "name": "maxLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label associated with the maximum value."
            },
            {
              "kind": "field",
              "name": "minLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The label associated with the minimum value."
            },
            {
              "kind": "field",
              "name": "formatMaxText",
              "description": "The formatter for the text for maximum value.\nShould be changed upon the locale the UI is rendered with."
            },
            {
              "kind": "field",
              "name": "formatMinText",
              "description": "The formatter for the text for min/max value.\nShould be changed upon the locale the UI is rendered with."
            },
            {
              "kind": "field",
              "name": "max",
              "description": "The maximum value."
            },
            {
              "kind": "field",
              "name": "min",
              "description": "The minimum value."
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The form name."
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "true to specify if the control is invalid."
            },
            {
              "kind": "field",
              "name": "invalidText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Message which is displayed if the value is invalid."
            },
            {
              "kind": "field",
              "name": "warn",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "true to specify if the control should display warn icon and text."
            },
            {
              "kind": "field",
              "name": "warnText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Provide the text that is displayed when the control is in warning state"
            },
            {
              "kind": "field",
              "name": "step",
              "description": "The snapping step of the value."
            },
            {
              "kind": "field",
              "name": "stepMultiplier",
              "description": "A value determining how much the value should increase/decrease by Shift+arrow keys,\nwhich will be `(max - min) / stepMultiplier`."
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The value."
            },
            {
              "kind": "field",
              "name": "isValid",
              "description": "is slide input valid"
            },
            {
              "kind": "method",
              "name": "_getInputValidity",
              "parameters": [
                {
                  "name": "input"
                }
              ]
            },
            {
              "kind": "method",
              "name": "shouldUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selectorInput",
              "static": true,
              "description": "A selector that will return the `<input>` box got entering the value directly.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventChange",
              "static": true,
              "description": "The name of the custom event fired after the value is changed by user gesture.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventChangeInput",
              "static": true,
              "description": "The name of the custom event fired after the value is changed in `<cds-slider-input>` by user gesture.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hFormdata",
              "type": {
                "text": "Handle | null"
              },
              "default": "null",
              "description": "The handle for `formdata` event listener on the containing form.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormMixin",
                "module": "src/globals/mixins/form.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The name of the custom event fired after the value is changed in `<cds-slider-input>` by user gesture.",
              "name": "cds-slider-input-changed"
            },
            {
              "description": "The custom event fired after the value is changed by user gesture.",
              "name": "cds-slider-changed"
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            },
            {
              "name": "FormMixin",
              "module": "/src/globals/mixins/form"
            },
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-slider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSSlider",
            "module": "src/components/slider/slider.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slug/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slug/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slug/slug-action-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Slug action button.",
          "name": "CDSSlugActionButton",
          "members": [
            {
              "kind": "field",
              "name": "slot",
              "type": {
                "text": "string"
              },
              "default": "'actions'",
              "description": "The shadow slot this slug-action should be in."
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasIcon",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`true` if there is an icon.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleDisabledClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleOver",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleHoverOut",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocus",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocusout",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button should have input focus when the page loads.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "batchAction",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button is being used within a data table batch action toolbar",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "buttonClassName",
              "description": "Specify an optional className to be added to your Button",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "dangerDescriptor",
              "description": "Specify the message read by screen readers for the danger button variant",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button should be disabled.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "description": "The default file name, used if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasMainContent",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if there is a non-icon content.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Link `href`. If present, this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "hreflang",
              "type": {
                "text": "string"
              },
              "description": "The language of what `href` points to, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "isExpressive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if expressive theme enabled.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "isSelected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the Button is currently selected.\nOnly applies to the Ghost variant.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "Button kind.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "linkRole",
              "type": {
                "text": "string"
              },
              "default": "'button'",
              "description": "The a11y role for `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "openTooltip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to determine if tooltip is open.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "ping",
              "type": {
                "text": "string"
              },
              "description": "URLs to ping, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "description": "The link type, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "string"
              },
              "default": "'lg'",
              "description": "Button size.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "string"
              },
              "description": "The link target, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipAlignment",
              "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipPosition",
              "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipText",
              "type": {
                "text": "string"
              },
              "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Button type.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            }
          ],
          "superclass": {
            "name": "CDSButton",
            "module": "/src/components/button/button"
          },
          "tagName": "cds-slug-action-button",
          "customElement": true,
          "cssParts": [
            {
              "description": "The button.",
              "name": "button",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSSlugActionButton",
            "module": "src/components/slug/slug-action-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slug/slug-data-table-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "_ColumnSlugSort"
        },
        {
          "kind": "function",
          "name": "_ColumnSlugWithSelectionAndExpansion"
        },
        {
          "kind": "function",
          "name": "_SlugWithExpansion"
        },
        {
          "kind": "function",
          "name": "_SlugWithRadioSelection"
        },
        {
          "kind": "function",
          "name": "SlugWithSelection"
        },
        {
          "kind": "function",
          "name": "SlugWithSelectionAndExpansion"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/slug/slug-data-table-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "_ColumnSlugSort",
          "declaration": {
            "name": "_ColumnSlugSort",
            "module": "src/components/slug/slug-data-table-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "_ColumnSlugWithSelectionAndExpansion",
          "declaration": {
            "name": "_ColumnSlugWithSelectionAndExpansion",
            "module": "src/components/slug/slug-data-table-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "_SlugWithExpansion",
          "declaration": {
            "name": "_SlugWithExpansion",
            "module": "src/components/slug/slug-data-table-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "_SlugWithRadioSelection",
          "declaration": {
            "name": "_SlugWithRadioSelection",
            "module": "src/components/slug/slug-data-table-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "SlugWithSelection",
          "declaration": {
            "name": "SlugWithSelection",
            "module": "src/components/slug/slug-data-table-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "SlugWithSelectionAndExpansion",
          "declaration": {
            "name": "SlugWithSelectionAndExpansion",
            "module": "src/components/slug/slug-data-table-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slug/slug-example-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "_Checkbox",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "_Combobox"
        },
        {
          "kind": "function",
          "name": "_DatePicker"
        },
        {
          "kind": "function",
          "name": "_Dropdown"
        },
        {
          "kind": "function",
          "name": "_Modal",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "_Multiselect"
        },
        {
          "kind": "function",
          "name": "_FilterableMultiselect"
        },
        {
          "kind": "function",
          "name": "_NumberItem"
        },
        {
          "kind": "function",
          "name": "_RadioButton",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "_Select"
        },
        {
          "kind": "function",
          "name": "_Tag"
        },
        {
          "kind": "function",
          "name": "_TextInput"
        },
        {
          "kind": "function",
          "name": "_TextArea"
        },
        {
          "kind": "function",
          "name": "_Tile",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/slug/slug-example-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "_Checkbox",
          "declaration": {
            "name": "_Checkbox",
            "module": "src/components/slug/slug-example-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "_Combobox",
          "declaration": {
            "name": "_Combobox",
            "module": "src/components/slug/slug-example-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "_DatePicker",
          "declaration": {
            "name": "_DatePicker",
            "module": "src/components/slug/slug-example-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "_Dropdown",
          "declaration": {
            "name": "_Dropdown",
            "module": "src/components/slug/slug-example-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "_Modal",
          "declaration": {
            "name": "_Modal",
            "module": "src/components/slug/slug-example-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "_Multiselect",
          "declaration": {
            "name": "_Multiselect",
            "module": "src/components/slug/slug-example-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "_FilterableMultiselect",
          "declaration": {
            "name": "_FilterableMultiselect",
            "module": "src/components/slug/slug-example-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "_NumberItem",
          "declaration": {
            "name": "_NumberItem",
            "module": "src/components/slug/slug-example-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "_RadioButton",
          "declaration": {
            "name": "_RadioButton",
            "module": "src/components/slug/slug-example-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "_Select",
          "declaration": {
            "name": "_Select",
            "module": "src/components/slug/slug-example-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "_Tag",
          "declaration": {
            "name": "_Tag",
            "module": "src/components/slug/slug-example-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "_TextInput",
          "declaration": {
            "name": "_TextInput",
            "module": "src/components/slug/slug-example-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "_TextArea",
          "declaration": {
            "name": "_TextArea",
            "module": "src/components/slug/slug-example-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "_Tile",
          "declaration": {
            "name": "_Tile",
            "module": "src/components/slug/slug-example-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slug/slug-form-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "_AIForm",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "_RevertTest"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/slug/slug-form-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "_AIForm",
          "declaration": {
            "name": "_AIForm",
            "module": "src/components/slug/slug-form-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "_RevertTest",
          "declaration": {
            "name": "_RevertTest",
            "module": "src/components/slug/slug-form-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slug/slug-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "Callout",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/slug/slug-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/slug/slug-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Callout",
          "declaration": {
            "name": "Callout",
            "module": "src/components/slug/slug-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/slug/slug-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slug/slug.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Basic slug.",
          "name": "CDSSlug",
          "members": [
            {
              "kind": "field",
              "name": "slot",
              "type": {
                "text": "string"
              },
              "default": "'slug'"
            },
            {
              "kind": "field",
              "name": "aiText",
              "type": {
                "text": "string"
              },
              "default": "'AI'",
              "description": "Specify the correct translation of the AI text"
            },
            {
              "kind": "field",
              "name": "aiTextLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Specify additional text to be rendered next to the AI label in the inline variant"
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "Specify the type of Slug, from the following list of types: (default, inline)"
            },
            {
              "kind": "field",
              "name": "revertActive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the revert button should be visible"
            },
            {
              "kind": "field",
              "name": "revertLabel",
              "type": {
                "text": "string"
              },
              "default": "'Revert to AI input'",
              "description": "Specify whether the revert button should be visible"
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Slug size should be mini, 2xs, xs, sm, md, lg, xl."
            },
            {
              "kind": "field",
              "name": "slugLabel",
              "type": {
                "text": "string"
              },
              "default": "'Show information'",
              "description": "Specify the text that will be provided to the aria-label of the `Slug` button"
            },
            {
              "kind": "field",
              "name": "previousValue"
            },
            {
              "kind": "field",
              "name": "_handleClick",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_renderToggleTipLabel",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_renderTooltipButton",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_renderInnerContent",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "CDSToggleTip",
            "module": "/src/components/toggle-tip/toggletip"
          },
          "tagName": "cds-slug",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSSlug",
            "module": "src/components/slug/slug.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/stack/defs.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "SPACING_STEPS",
          "description": "The steps in the spacing scale",
          "type": {
            "text": "Array<number>"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SPACING_STEPS",
          "declaration": {
            "name": "SPACING_STEPS",
            "module": "src/components/stack/defs.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/stack/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/stack/stack-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Horizontal"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/stack/stack-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Horizontal",
          "declaration": {
            "name": "Horizontal",
            "module": "src/components/stack/stack-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/stack/stack-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/stack/stack-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/stack/stack.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The Stack component is a useful layout utility in a component-based model.\nThis allows components to not use margin and instead delegate the\nresponsibility of positioning and layout to parent components.\n\nIn the case of the Stack component, it uses the spacing scale from the\nDesign Language in order to determine how much space there should be between\nitems rendered by the Stack component. It also supports a custom `gap` prop\nwhich will allow a user to provide a custom value for the gap of the layout.\n\nThis component supports both horizontal and vertical orientations.",
          "name": "CDSStack",
          "members": [
            {
              "kind": "field",
              "name": "orientation",
              "description": "Specify the orientation of them items in the Stack"
            },
            {
              "kind": "field",
              "name": "gap",
              "description": "Provide either a custom value or a step from the spacing scale to be used\nas the gap in the layout"
            },
            {
              "kind": "field",
              "name": "useCustomGapValue",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Turn on when passing in custom value to 'gap' attribute (ie. gap=\"2rem\")"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-stack",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "STACK_ORIENTATION",
          "declaration": {
            "name": "STACK_ORIENTATION",
            "module": "src/components/stack/stack.ts"
          }
        },
        {
          "kind": "js",
          "name": "SPACING_STEPS",
          "declaration": {
            "name": "SPACING_STEPS",
            "module": "src/components/stack/stack.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSStack",
            "module": "src/components/stack/stack.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/structured-list/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/structured-list/structured-list-body.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Structured list body.",
          "name": "CDSStructuredListBody",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-structured-list-body",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSStructuredListBody",
            "module": "src/components/structured-list/structured-list-body.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/structured-list/structured-list-cell.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Structured list cell.",
          "name": "CDSStructuredListCell",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-structured-list-cell",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSStructuredListCell",
            "module": "src/components/structured-list/structured-list-cell.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/structured-list/structured-list-head.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Structured list header.",
          "name": "CDSStructuredListHeader",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-structured-list-head",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSStructuredListHeader",
            "module": "src/components/structured-list/structured-list-head.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/structured-list/structured-list-header-cell-skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Skeleton of structured list header cell.",
          "name": "CDSStructuredListHeaderCellSkeleton",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSStructuredListHeaderCellSkeleton",
            "module": "src/components/structured-list/structured-list-header-cell-skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/structured-list/structured-list-header-cell.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Structured list header cell.",
          "name": "CDSStructuredListHeaderCell",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-structured-list-header-cell",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSStructuredListHeaderCell",
            "module": "src/components/structured-list/structured-list-header-cell.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/structured-list/structured-list-header-row.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Structured list header row.",
          "name": "CDSStructuredListHeaderRow",
          "members": [
            {
              "kind": "field",
              "name": "selectionName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `name` attribute for the `<input>` for selection.\nIf present, this structured list header row will show its selectable version of the UI."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-structured-list-header-row",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSStructuredListHeaderRow",
            "module": "src/components/structured-list/structured-list-header-row.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/structured-list/structured-list-row.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Structured list row.",
          "name": "CDSStructuredListRow",
          "members": [
            {
              "kind": "field",
              "name": "_manager",
              "type": {
                "text": "RadioGroupManager | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "The radio group manager associated with the radio button."
            },
            {
              "kind": "field",
              "name": "_radioButtonDelegate",
              "privacy": "private",
              "default": "new StructuredListRowRadioButtonDelegate(this)",
              "description": "The interface for `RadioGroupManager` for structured list row."
            },
            {
              "kind": "field",
              "name": "_inputNode",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "private",
              "description": "The hidden radio button."
            },
            {
              "kind": "field",
              "name": "_handleClick",
              "privacy": "private",
              "description": "Handles `click` event on this element."
            },
            {
              "kind": "field",
              "name": "_handleKeydown",
              "privacy": "private",
              "description": "Handles `keydown` event on this element."
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this structured list row should be selectable and selected."
            },
            {
              "kind": "field",
              "name": "selectionName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `name` attribute for the `<input>` for selection.\nIf present, this structured list row will be a selectable one."
            },
            {
              "kind": "field",
              "name": "selectionValue",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `value` attribute for the `<input>` for selection."
            },
            {
              "kind": "field",
              "name": "selectionIconTitle",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The content to put into the `<title>` attribute of the selection icon."
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-structured-list-row",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSStructuredListRow",
            "module": "src/components/structured-list/structured-list-row.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/structured-list/structured-list-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "Selection"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "skeleton"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/structured-list/structured-list-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Selection",
          "declaration": {
            "name": "Selection",
            "module": "src/components/structured-list/structured-list-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/structured-list/structured-list-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "skeleton",
          "declaration": {
            "name": "skeleton",
            "module": "src/components/structured-list/structured-list-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/structured-list/structured-list-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/structured-list/structured-list.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Structured list wrapper.",
          "name": "CDSStructuredList",
          "members": [
            {
              "kind": "field",
              "name": "selectionName",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `name` attribute for the `<input>` for selection.\nIf present, this structured list will be a selectable one."
            },
            {
              "kind": "field",
              "name": "condensed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify if structured list is condensed, default is false"
            },
            {
              "kind": "field",
              "name": "flush",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify if structured list is flush, default is false"
            },
            {
              "kind": "method",
              "name": "shouldUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selectorRowsWithHeader",
              "static": true,
              "default": "`${prefix}-structured-list-row,${prefix}-structured-list-header-row`",
              "description": "The CSS selector to find the rows, including header rows."
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-structured-list",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSStructuredList",
            "module": "src/components/structured-list/structured-list.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tabs/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tabs/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tabs/tab-skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Skeleton of tab.",
          "name": "CDSTabSkeleton",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTabSkeleton",
            "module": "src/components/tabs/tab-skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tabs/tab.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Basic tab.",
          "name": "CDSTab",
          "members": [
            {
              "kind": "field",
              "name": "highlighted",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this tab should be highlighted.\nIf `true`, parent `<cds-tabs>` selects/deselects this tab upon keyboard interaction.",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Tab type."
            },
            {
              "kind": "field",
              "name": "tabTitle",
              "description": "The tab text content."
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event."
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSContentSwitcherItem",
                "module": "src/components/content-switcher/content-switcher-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSContentSwitcherItem",
                "module": "src/components/content-switcher/content-switcher-item.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSContentSwitcherItem",
                "module": "src/components/content-switcher/content-switcher-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this content switcher item should be disabled.",
              "inheritedFrom": {
                "name": "CDSContentSwitcherItem",
                "module": "src/components/content-switcher/content-switcher-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideDivider",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` to hide the divider at the left.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSContentSwitcherItem",
                "module": "src/components/content-switcher/content-switcher-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the content switcher button should be selected.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSContentSwitcherItem",
                "module": "src/components/content-switcher/content-switcher-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "string"
              },
              "description": "The element ID of target panel.",
              "inheritedFrom": {
                "name": "CDSContentSwitcherItem",
                "module": "src/components/content-switcher/content-switcher-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `value` attribute that is set to the parent `<cds-content-switcher>`\nwhen this content switcher item is selected.",
              "inheritedFrom": {
                "name": "CDSContentSwitcherItem",
                "module": "src/components/content-switcher/content-switcher-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the content switcher button should be icon-only.",
              "inheritedFrom": {
                "name": "CDSContentSwitcherItem",
                "module": "src/components/content-switcher/content-switcher-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "string"
              },
              "default": "'top'",
              "description": "Specify how the trigger should align with the tooltip for icon-only\nswitcher item",
              "inheritedFrom": {
                "name": "CDSContentSwitcherItem",
                "module": "src/components/content-switcher/content-switcher-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "closeOnActivation",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Determines whether the tooltip should close when inner content is\nactivated (click, Enter or Space)",
              "inheritedFrom": {
                "name": "CDSContentSwitcherItem",
                "module": "src/components/content-switcher/content-switcher-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "enterDelayMs",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "Specify the duration in milliseconds to delay before displaying the\ntooltip for icon-only switcher item",
              "inheritedFrom": {
                "name": "CDSContentSwitcherItem",
                "module": "src/components/content-switcher/content-switcher-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "leaveDelayMs",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "Specify the duration in milliseconds to delay before hiding the tooltip\nfor icon-only switcher-item\n\nTODO: match upstream value once #10471 is resolved",
              "inheritedFrom": {
                "name": "CDSContentSwitcherItem",
                "module": "src/components/content-switcher/content-switcher-item.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "CDSContentSwitcherItem",
                "module": "src/components/content-switcher/content-switcher-item.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderTooltipContent",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "CDSContentSwitcherItem",
                "module": "src/components/content-switcher/content-switcher-item.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "CDSContentSwitcherItem",
                "module": "src/components/content-switcher/content-switcher-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "CDSContentSwitcherItem",
                "module": "src/components/content-switcher/content-switcher-item.ts"
              }
            }
          ],
          "superclass": {
            "name": "CDSContentSwitcherItem",
            "module": "/src/components/content-switcher/content-switcher-item"
          },
          "tagName": "cds-tab",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTab",
            "module": "src/components/tabs/tab.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tabs/tabs-skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Skeleton of tabs.",
          "name": "CDSTabsSkeleton",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTabsSkeleton",
            "module": "src/components/tabs/tabs-skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tabs/tabs-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Contained"
        },
        {
          "kind": "function",
          "name": "skeleton"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/tabs/tabs-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Contained",
          "declaration": {
            "name": "Contained",
            "module": "src/components/tabs/tabs-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "skeleton",
          "declaration": {
            "name": "skeleton",
            "module": "src/components/tabs/tabs-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/tabs/tabs-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/tabs/tabs-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tabs/tabs.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Tabs.",
          "name": "CDSTabs",
          "members": [
            {
              "kind": "field",
              "name": "_assistiveStatusText",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "private",
              "description": "The latest status of this dropdown, for screen reader to accounce."
            },
            {
              "kind": "field",
              "name": "_currentIndex",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0",
              "description": "The currently selected index"
            },
            {
              "kind": "field",
              "name": "_totalTabs",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0",
              "description": "Total number of tabs in the component"
            },
            {
              "kind": "field",
              "name": "_isScrollable",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`true` if the tablist is scrollable"
            },
            {
              "kind": "field",
              "name": "tablist",
              "type": {
                "text": "Element | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "The DOM element for the tablist."
            },
            {
              "kind": "field",
              "name": "BUTTON_WIDTH",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "44",
              "description": "The width of the overflow scroll buttons."
            },
            {
              "kind": "method",
              "name": "_navigate",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "number"
                  },
                  "description": "`-1` to navigate backward, `1` to navigate forward."
                },
                {
                  "name": "{ immediate = true }",
                  "default": "{}",
                  "type": {
                    "text": "{ immediate?: boolean }"
                  }
                },
                {
                  "description": "The options.",
                  "name": "options",
                  "optional": true
                },
                {
                  "description": "Defaults to `true`\n`true` to make it \"immediate selection change\" mode, which does:\n\nStarts with the selected item\nGoing prev/next item immediately changes the selection",
                  "name": "options.immediate",
                  "optional": true
                }
              ],
              "description": "Navigates through tabs.",
              "inheritedFrom": {
                "name": "CDSContentSwitcher",
                "module": "src/components/content-switcher/content-switcher.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "Handles `click` event on content switcher item.",
              "inheritedFrom": {
                "name": "CDSContentSwitcher",
                "module": "src/components/content-switcher/content-switcher.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleKeydown",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handles `keydown` event on the top-level element in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSContentSwitcher",
                "module": "src/components/content-switcher/content-switcher.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleScrollButtonClick",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "_",
                  "description": "Event object"
                },
                {
                  "name": "{ direction }"
                },
                {
                  "description": "The options.",
                  "name": "options",
                  "optional": true
                },
                {
                  "description": "`-1` to scroll forward, `1` to scroll backward.",
                  "name": "options.direction",
                  "optional": true
                }
              ],
              "description": "Handles click on overflow scroll buttons."
            },
            {
              "kind": "method",
              "name": "_handleSlotchange",
              "inheritedFrom": {
                "name": "CDSContentSwitcher",
                "module": "src/components/content-switcher/content-switcher.ts"
              }
            },
            {
              "kind": "method",
              "name": "_selectionDidChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "itemToSelect",
                  "type": {
                    "text": "CDSTab"
                  }
                }
              ],
              "description": "A callback that runs after change in content switcher selection upon user interaction is confirmed.",
              "inheritedFrom": {
                "name": "CDSContentSwitcher",
                "module": "src/components/content-switcher/content-switcher.ts"
              }
            },
            {
              "kind": "field",
              "name": "_contentContainerNode",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "privacy": "private",
              "description": "The scrolling container."
            },
            {
              "kind": "field",
              "name": "_contentNode",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "privacy": "private",
              "description": "The scrolling content."
            },
            {
              "kind": "field",
              "name": "_currentScrollPosition",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0",
              "description": "The current scroll position."
            },
            {
              "kind": "field",
              "name": "_intersectionLeftSentinelNode",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "privacy": "private",
              "description": "The left-hand sentinel to track intersection with the host element.\nIf they intersect, the left-hand paginator button should be hidden."
            },
            {
              "kind": "field",
              "name": "_intersectionRightSentinelNode",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "privacy": "private",
              "description": "The right-hand sentinel to track intersection with the host element.\nIf they intersect, the right-hand paginator button should be hidden."
            },
            {
              "kind": "field",
              "name": "selectingItemsAssistiveText",
              "type": {
                "text": "string"
              },
              "default": "'Selecting items. Use up and down arrow keys to navigate.'",
              "description": "An assistive text for screen reader to announce, telling the open state."
            },
            {
              "kind": "field",
              "name": "selectedItemAssistiveText",
              "type": {
                "text": "string"
              },
              "default": "'Selected an item.'",
              "description": "An assistive text for screen reader to announce, telling that an item is selected."
            },
            {
              "kind": "field",
              "name": "triggerContent",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The content of the trigger button for narrow mode."
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Tabs type."
            },
            {
              "kind": "field",
              "name": "_isIntersectionLeftTrackerInContent",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "description": "`true` if left-hand scroll intersection sentinel intersects with the host element.\nIn this condition, the left-hand paginator button should be hidden."
            },
            {
              "kind": "field",
              "name": "_isIntersectionRightTrackerInContent",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true",
              "description": "`true` if right-hand scroll intersection sentinel intersects with the host element.\nIn this condition, the right-hand paginator button should be hidden."
            },
            {
              "kind": "field",
              "name": "_observerIntersection",
              "type": {
                "text": "IntersectionObserver | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "The observer for the intersection of left-side content edge."
            },
            {
              "kind": "field",
              "name": "_observeIntersectionContainer",
              "privacy": "private",
              "description": "The intersection observer callback for the scrolling container.",
              "parameters": [
                {
                  "description": "The intersection observer records.",
                  "name": "records"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_cleanAndCreateIntersectionObserverContainer",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{\n    create,\n  }",
                  "default": "{}",
                  "type": {
                    "text": "{ create?: boolean }"
                  }
                },
                {
                  "description": "The options.",
                  "name": "options",
                  "optional": true
                },
                {
                  "description": "`true` to create the new intersection observer.",
                  "name": "options.create",
                  "optional": true
                }
              ],
              "description": "Cleans-up and creates the intersection observer for the scrolling container."
            },
            {
              "kind": "method",
              "name": "shouldUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "CDSContentSwitcher",
                "module": "src/components/content-switcher/content-switcher.ts"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderPreviousButton",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | null"
                }
              },
              "description": "Render the previous button if tablist is wider than container."
            },
            {
              "kind": "method",
              "name": "renderNextButton",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | null"
                }
              },
              "description": "Render the next button if tablist is wider than container."
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSContentSwitcher",
                "module": "src/components/content-switcher/content-switcher.ts"
              }
            },
            {
              "kind": "field",
              "name": "TRIGGER_KEYS",
              "static": true,
              "default": "new Set([' ', 'Enter'])",
              "description": "Symbols of keys that triggers opening/closing menu and selecting/deselecting menu item."
            },
            {
              "kind": "field",
              "name": "selectorItem",
              "static": true,
              "description": "A selector that will return tabs.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSContentSwitcher",
                "module": "src/components/content-switcher/content-switcher.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectorItemEnabled",
              "static": true,
              "description": "A selector that will return enabled tabs.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSContentSwitcher",
                "module": "src/components/content-switcher/content-switcher.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectorItemHighlighted",
              "static": true,
              "description": "A selector that will return highlighted tabs.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorItemSelected",
              "static": true,
              "description": "A selector that will return selected tabs.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSContentSwitcher",
                "module": "src/components/content-switcher/content-switcher.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectorTablist",
              "static": true,
              "description": "A selector that returns the tablist",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventBeforeSelect",
              "static": true,
              "description": "The name of the custom event fired before a tab is selected upon a user gesture.\nCancellation of this event stops changing the user-initiated selection.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSContentSwitcher",
                "module": "src/components/content-switcher/content-switcher.ts"
              }
            },
            {
              "kind": "field",
              "name": "eventSelect",
              "static": true,
              "description": "The name of the custom event fired after a a tab is selected upon a user gesture.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSContentSwitcher",
                "module": "src/components/content-switcher/content-switcher.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSContentSwitcher",
                "module": "src/components/content-switcher/content-switcher.ts"
              }
            },
            {
              "kind": "method",
              "name": "getAction",
              "static": true,
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  },
                  "description": "The key symbol."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleHover",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ target, type }",
                  "type": {
                    "text": "MouseEvent"
                  }
                },
                {
                  "description": "The event.",
                  "name": "event"
                },
                {
                  "description": "The event target.",
                  "name": "event.target"
                },
                {
                  "description": "The event type.",
                  "name": "event.type"
                }
              ],
              "description": "Handles `mouseover`/`mouseout` events on `<slot>`.",
              "inheritedFrom": {
                "name": "CDSContentSwitcher",
                "module": "src/components/content-switcher/content-switcher.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getCurrentItem",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "The current event target."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSContentSwitcher",
                "module": "src/components/content-switcher/content-switcher.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getNextItem",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "currentItem",
                  "type": {
                    "text": "CDSContentSwitcherItem"
                  },
                  "description": "The currently selected item."
                },
                {
                  "name": "direction",
                  "type": {
                    "text": "number"
                  },
                  "description": "The navigation direction."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSContentSwitcher",
                "module": "src/components/content-switcher/content-switcher.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleUserInitiatedSelectItem",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "CDSContentSwitcherItem"
                  },
                  "description": "The content switcher item user wants to select.",
                  "optional": true
                }
              ],
              "description": "Handles user-initiated selection of a content switcher item.",
              "inheritedFrom": {
                "name": "CDSContentSwitcher",
                "module": "src/components/content-switcher/content-switcher.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value of the selected item.",
              "inheritedFrom": {
                "name": "CDSContentSwitcher",
                "module": "src/components/content-switcher/content-switcher.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Content switcher size.",
              "inheritedFrom": {
                "name": "CDSContentSwitcher",
                "module": "src/components/content-switcher/content-switcher.ts"
              }
            },
            {
              "kind": "field",
              "name": "iconOnly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Icon only.",
              "inheritedFrom": {
                "name": "CDSContentSwitcher",
                "module": "src/components/content-switcher/content-switcher.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectorIconItem",
              "static": true,
              "description": "A selector that will return content switcher icon items.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSContentSwitcher",
                "module": "src/components/content-switcher/content-switcher.ts"
              }
            }
          ],
          "events": [
            {
              "description": "The custom event fired before a tab is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection.",
              "name": "cds-tabs-beingselected"
            },
            {
              "description": "The custom event fired after a a tab is selected upon a user gesture.",
              "name": "cds-tabs-selected"
            },
            {
              "description": "The custom event fired before a content switcher item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection.",
              "name": "cds-content-switcher-beingselected",
              "inheritedFrom": {
                "name": "CDSContentSwitcher",
                "module": "src/components/content-switcher/content-switcher.ts"
              }
            },
            {
              "description": "The custom event fired after a a content switcher item is selected upon a user gesture.",
              "name": "cds-content-switcher-selected",
              "inheritedFrom": {
                "name": "CDSContentSwitcher",
                "module": "src/components/content-switcher/content-switcher.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            }
          ],
          "superclass": {
            "name": "CDSContentSwitcher",
            "module": "/src/components/content-switcher/content-switcher"
          },
          "tagName": "cds-tabs",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NAVIGATION_DIRECTION",
          "declaration": {
            "name": "NAVIGATION_DIRECTION",
            "module": "src/components/tabs/tabs.ts"
          }
        },
        {
          "kind": "js",
          "name": "TABS_KEYBOARD_ACTION",
          "declaration": {
            "name": "TABS_KEYBOARD_ACTION",
            "module": "src/components/tabs/tabs.ts"
          }
        },
        {
          "kind": "js",
          "name": "TABS_TYPE",
          "declaration": {
            "name": "TABS_TYPE",
            "module": "src/components/tabs/tabs.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTabs",
            "module": "src/components/tabs/tabs.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tag/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tag/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tag/tag-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/tag/tag-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/tag/tag-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/tag/tag-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tag/tag.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Tag.",
          "name": "CDSTag",
          "members": [
            {
              "kind": "field",
              "name": "_buttonNode",
              "type": {
                "text": "HTMLButtonElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_handleSlugSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event."
            },
            {
              "kind": "field",
              "name": "_handleClick",
              "privacy": "private",
              "description": "Handles `click` event on this element.",
              "parameters": [
                {
                  "description": "The event.",
                  "name": "event"
                }
              ]
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "'Clear filter'",
              "description": "Text to show on filter tag \"clear\" buttons. Corresponds to the attribute with the same name"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the tag should be disabled"
            },
            {
              "kind": "field",
              "name": "hasCustomIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determine if is a filter/chip"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "`true` if the tag should be open."
            },
            {
              "kind": "field",
              "name": "size",
              "description": "The size of the tag."
            },
            {
              "kind": "field",
              "name": "type",
              "description": "The type of the tag."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "slugItem",
              "static": true,
              "description": "A selector that will return the slug item.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventBeforeClose",
              "static": true,
              "description": "The name of the custom event fired before this tag is being closed upon a user gesture.\nCancellation of this event stops the user-initiated action of closing this tag.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventClose",
              "static": true,
              "description": "The name of the custom event fired after this tag is closed upon a user gesture.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "events": [
            {
              "description": "The custom event fired as the element is being closed",
              "name": "cds-tag-beingclosed"
            },
            {
              "description": "The custom event fired after the element has been closed",
              "name": "cds-tag-closed"
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            },
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TAG_SIZE",
          "declaration": {
            "name": "TAG_SIZE",
            "module": "src/components/tag/tag.ts"
          }
        },
        {
          "kind": "js",
          "name": "TAG_TYPE",
          "declaration": {
            "name": "TAG_TYPE",
            "module": "src/components/tag/tag.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTag",
            "module": "src/components/tag/tag.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tag/types.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TAG_TYPE",
            "module": "src/components/tag/types.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tearsheet/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tearsheet/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tearsheet/tearsheet-story.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "Default",
          "default": "DefaultTemplate.bind({})"
        },
        {
          "kind": "variable",
          "name": "WithNavigation",
          "default": "DefaultTemplate.bind({})"
        },
        {
          "kind": "variable",
          "name": "WithInfluencer",
          "default": "DefaultTemplate.bind({})"
        },
        {
          "kind": "variable",
          "name": "WithAllHeaderItemsAndInfluencer",
          "default": "DefaultTemplate.bind( {} )"
        },
        {
          "kind": "variable",
          "name": "Narrow",
          "default": "DefaultTemplate.bind({})"
        },
        {
          "kind": "variable",
          "name": "NarrowWithAllHeaderItems",
          "default": "DefaultTemplate.bind( {} )"
        },
        {
          "kind": "variable",
          "name": "Stacking",
          "default": "StackingTemplate.bind({})"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/tearsheet/tearsheet-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/tearsheet/tearsheet-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "WithNavigation",
          "declaration": {
            "name": "WithNavigation",
            "module": "src/components/tearsheet/tearsheet-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "WithInfluencer",
          "declaration": {
            "name": "WithInfluencer",
            "module": "src/components/tearsheet/tearsheet-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "WithAllHeaderItemsAndInfluencer",
          "declaration": {
            "name": "WithAllHeaderItemsAndInfluencer",
            "module": "src/components/tearsheet/tearsheet-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Narrow",
          "declaration": {
            "name": "Narrow",
            "module": "src/components/tearsheet/tearsheet-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "NarrowWithAllHeaderItems",
          "declaration": {
            "name": "NarrowWithAllHeaderItems",
            "module": "src/components/tearsheet/tearsheet-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Stacking",
          "declaration": {
            "name": "Stacking",
            "module": "src/components/tearsheet/tearsheet-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tearsheet/tearsheet.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Tearsheet.",
          "name": "CDSTearsheet",
          "cssParts": [
            {
              "description": "The dialog.",
              "name": "dialog"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_launcher",
              "type": {
                "text": "Element | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "The element that had focus before this tearsheet gets open."
            },
            {
              "kind": "field",
              "name": "_startSentinelNode",
              "type": {
                "text": "HTMLAnchorElement"
              },
              "privacy": "private",
              "description": "Node to track focus going outside of tearsheet content."
            },
            {
              "kind": "field",
              "name": "_endSentinelNode",
              "type": {
                "text": "HTMLAnchorElement"
              },
              "privacy": "private",
              "description": "Node to track focus going outside of tearsheet content."
            },
            {
              "kind": "field",
              "name": "_tearsheet",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private",
              "description": "Node to track tearsheet."
            },
            {
              "kind": "field",
              "name": "_actions",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_actionsCount",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_hasHeaderActions",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_hasLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_hasSlug",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_hasTitle",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_hasDescription",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_hasInfluencerLeft",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_hasInfluencerRight",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_isOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_hasHeaderNavigation",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_handleClick",
              "privacy": "private",
              "description": "Handles `click` event on this element.",
              "parameters": [
                {
                  "description": "The event.",
                  "name": "event"
                }
              ]
            },
            {
              "kind": "field",
              "name": "_handleBlur",
              "privacy": "private",
              "description": "Handles `blur` event on this element.",
              "parameters": [
                {
                  "description": "The event.",
                  "name": "event"
                },
                {
                  "description": "The event target.",
                  "name": "event.target"
                },
                {
                  "description": "The event relatedTarget.",
                  "name": "event.relatedTarget"
                }
              ]
            },
            {
              "kind": "field",
              "name": "_handleKeydown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_checkSetHasSlot",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleClickContainer",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `click` event on the modal container."
            },
            {
              "kind": "method",
              "name": "_handleUserInitiatedClose",
              "privacy": "private",
              "parameters": [
                {
                  "name": "triggeredBy",
                  "type": {
                    "text": "EventTarget | null"
                  },
                  "description": "The element that triggered this close request."
                }
              ],
              "description": "Handles user-initiated close request of this tearsheet."
            },
            {
              "kind": "method",
              "name": "_handleSlugChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Optional aria label for the tearsheet"
            },
            {
              "kind": "field",
              "name": "closeIconDescription",
              "type": {
                "text": "string"
              },
              "default": "'Close'",
              "description": "Sets the close button icon description"
            },
            {
              "kind": "field",
              "name": "hasCloseIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable a close icon ('x') in the header area of the tearsheet. By default,\n(when this prop is omitted, or undefined or null) a tearsheet does not\ndisplay a close icon if there are navigation actions (\"transactional\ntearsheet\") and displays one if there are no navigation actions (\"passive\ntearsheet\"), and that behavior can be overridden if required by setting\nthis prop to either true or false."
            },
            {
              "kind": "field",
              "name": "influencerPlacement",
              "description": "The placement of the influencer section, 'left' or 'right'."
            },
            {
              "kind": "field",
              "name": "influencerWidth",
              "description": "The width of the influencer section, 'narrow' or 'wide'."
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the tearsheet should be open."
            },
            {
              "kind": "field",
              "name": "preventCloseOnClickOutside",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Prevent closing on click outside of tearsheet"
            },
            {
              "kind": "field",
              "name": "selectorInitialFocus",
              "description": "The initial location of focus in the side panel"
            },
            {
              "kind": "field",
              "name": "width",
              "description": "The width of the influencer section, 'narrow' or 'wide'."
            },
            {
              "kind": "field",
              "name": "_checkUpdateActionSizes",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_maxActions",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "4"
            },
            {
              "kind": "method",
              "name": "_handleActionsChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_stackDepth",
              "type": {
                "text": "number"
              },
              "default": "-1"
            },
            {
              "kind": "field",
              "name": "_stackPosition",
              "type": {
                "text": "number"
              },
              "default": "-1"
            },
            {
              "kind": "field",
              "name": "_topOfStack",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_stack",
              "type": {
                "text": "StackState"
              },
              "privacy": "private",
              "static": true,
              "default": "{ open: [], all: [], }"
            },
            {
              "kind": "field",
              "name": "_notifyStack",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleStackChange",
              "type": {
                "text": "StackHandler"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_updateStack",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "actionsMultiple",
              "default": "['', 'single', 'double', 'triple'][this._actionsCount]"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "_checkSetOpen"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_delay",
              "privacy": "private",
              "static": true,
              "parameters": [
                {
                  "name": "ms",
                  "default": "0",
                  "description": "The number of milliseconds."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "selectorCloseButton",
              "static": true,
              "description": "A selector selecting buttons that should close this modal.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorTabbable",
              "static": true,
              "description": "A selector selecting tabbable nodes.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventBeforeClose",
              "static": true,
              "description": "The name of the custom event fired before this tearsheet is being closed upon a user gesture.\nCancellation of this event stops the user-initiated action of closing this tearsheet.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventClose",
              "static": true,
              "description": "The name of the custom event fired after this tearsheet is closed upon a user gesture.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventNavigateBack",
              "static": true,
              "description": "The name of the custom event fired on clicking the navigate back button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The custom event fired before this tearsheet is being closed upon a user gesture. Cancellation of this event stops the user-initiated action of closing this tearsheet.",
              "name": "cds-tearsheet-beingclosed"
            },
            {
              "description": "The custom event fired after this tearsheet is closed upon a user gesture.",
              "name": "cds-tearsheet-closed"
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-tearsheet",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TEARSHEET_INFLUENCER_PLACEMENT",
          "declaration": {
            "name": "TEARSHEET_INFLUENCER_PLACEMENT",
            "module": "src/components/tearsheet/tearsheet.ts"
          }
        },
        {
          "kind": "js",
          "name": "TEARSHEET_INFLUENCER_WIDTH",
          "declaration": {
            "name": "TEARSHEET_INFLUENCER_WIDTH",
            "module": "src/components/tearsheet/tearsheet.ts"
          }
        },
        {
          "kind": "js",
          "name": "TEARSHEET_WIDTH",
          "declaration": {
            "name": "TEARSHEET_WIDTH",
            "module": "src/components/tearsheet/tearsheet.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTearsheet",
            "module": "src/components/tearsheet/tearsheet.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/text-input/defs.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "INPUT_COLOR_SCHEME",
          "declaration": {
            "name": "FORM_ELEMENT_COLOR_SCHEME",
            "module": "../../globals/shared-enums"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/text-input/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/text-input/text-input-skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Skeleton of number input.",
          "name": "CDSTextInputSkeleton",
          "members": [
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the label should be hidden, or not"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTextInputSkeleton",
            "module": "src/components/text-input/text-input-skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/text-input/text-input-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "ReadOnly"
        },
        {
          "kind": "function",
          "name": "Skeleton"
        },
        {
          "kind": "function",
          "name": "TogglePasswordVisibility"
        },
        {
          "kind": "function",
          "name": "WithLayer"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/text-input/text-input-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "ReadOnly",
          "declaration": {
            "name": "ReadOnly",
            "module": "src/components/text-input/text-input-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Skeleton",
          "declaration": {
            "name": "Skeleton",
            "module": "src/components/text-input/text-input-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "TogglePasswordVisibility",
          "declaration": {
            "name": "TogglePasswordVisibility",
            "module": "src/components/text-input/text-input-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "WithLayer",
          "declaration": {
            "name": "WithLayer",
            "module": "src/components/text-input/text-input-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/text-input/text-input-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/text-input/text-input-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/text-input/text-input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Text Input element. Supports all the usual attributes for textual input types",
          "name": "CDSTextInput",
          "slots": [
            {
              "description": "The helper text.",
              "name": "helper-text"
            },
            {
              "description": "The label text.",
              "name": "label-text"
            },
            {
              "description": "The validity message. If present and non-empty, this input shows the UI of its invalid state.",
              "name": "validity-message"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_hasSlug",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "description": "`true` if there is a slug."
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event."
            },
            {
              "kind": "field",
              "name": "_input",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "protected",
              "description": "The underlying input element"
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''",
              "description": "The internal value."
            },
            {
              "kind": "method",
              "name": "_handleInput",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "description": "The event.",
                  "name": "event"
                },
                {
                  "description": "The event target.",
                  "name": "event.target"
                }
              ],
              "description": "Handles `oninput` event on the `<input>`."
            },
            {
              "kind": "method",
              "name": "_handleFormdata",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `formdata` event.",
              "inheritedFrom": {
                "name": "FormMixin",
                "module": "src/globals/mixins/form.ts"
              }
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "May be any of the standard HTML autocomplete options"
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the input to be focussed automatically on page load. Defaults to false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Controls the disabled state of the input"
            },
            {
              "kind": "field",
              "name": "enableCounter",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether to display the character counter"
            },
            {
              "kind": "field",
              "name": "helperText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The helper text."
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "description": "Specify if the currently value is invalid.",
              "default": "false",
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalidText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Message which is displayed if the value is invalid."
            },
            {
              "kind": "field",
              "name": "maxCount",
              "description": "Max character count allowed for input. This is needed in order for enableCounter to display"
            },
            {
              "kind": "field",
              "name": "warn",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the control is currently in warning state"
            },
            {
              "kind": "field",
              "name": "warnText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Provide the text that is displayed when the control is in warning state"
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether you want the underlying label to be visually hidden"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Generic label that will be used as the textual representation of what this field is for"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Name for the input in the `FormData`"
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Pattern to validate the input against for HTML validity checking"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Value to display when the input has an empty `value`"
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify if the component should be read-only"
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "Boolean property to set the required status",
              "default": "false",
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "kind": "field",
              "name": "requiredValidityMessage",
              "type": {
                "text": "string"
              },
              "description": "The special validity message for `required`.",
              "default": "'Please fill out this field.'",
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "kind": "field",
              "name": "hidePasswordLabel",
              "type": {
                "text": "string"
              },
              "default": "'Hide password'",
              "description": "\"Hide password\" tooltip text on password visibility toggle"
            },
            {
              "kind": "field",
              "name": "showPasswordLabel",
              "type": {
                "text": "string"
              },
              "default": "'Show password'",
              "description": "\"Show password\" tooltip text on password visibility toggle"
            },
            {
              "kind": "field",
              "name": "showPasswordVisibilityToggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean property to render password visibility toggle"
            },
            {
              "kind": "field",
              "name": "size",
              "description": "The input box size."
            },
            {
              "kind": "field",
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "true to use the inline version."
            },
            {
              "kind": "field",
              "name": "tooltipAlignment",
              "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end."
            },
            {
              "kind": "field",
              "name": "tooltipDirection",
              "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left."
            },
            {
              "kind": "field",
              "name": "type",
              "description": "The type of the input. Can be one of the types listed in the INPUT_TYPE enum"
            },
            {
              "kind": "field",
              "name": "validityMessage",
              "type": {
                "text": "string"
              },
              "description": "The validity message. If present and non-empty, this input shows the UI of its invalid state.",
              "default": "''",
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The value of the input.",
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleTogglePasswordVisibility",
              "privacy": "private",
              "description": "Handles password visibility toggle button click"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "method",
              "name": "updated"
            },
            {
              "kind": "field",
              "name": "slugItem",
              "static": true,
              "description": "A selector that will return the slug item.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "method",
              "name": "_getValidityMessage",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string"
                  },
                  "description": "The form validation status."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "kind": "method",
              "name": "_testValidity",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Checks if the value meets the constraints.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Checks if the value meets the constraints.\nFires cancelable `invalid` event if it doesn't.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "validityMessage",
                  "type": {
                    "text": "string"
                  },
                  "description": "The custom validity message"
                }
              ],
              "description": "Sets the given custom validity message.",
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hFormdata",
              "type": {
                "text": "Handle | null"
              },
              "default": "null",
              "description": "The handle for `formdata` event listener on the containing form.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormMixin",
                "module": "src/globals/mixins/form.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "ValidityMixin",
              "module": "/src/globals/mixins/validity"
            },
            {
              "name": "FormMixin",
              "module": "/src/globals/mixins/form"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-text-input",
          "customElement": true,
          "events": [
            {
              "name": "invalid",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "ValidityMixin",
                "module": "src/globals/mixins/validity.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "INPUT_COLOR_SCHEME",
          "declaration": {
            "name": "INPUT_COLOR_SCHEME",
            "module": "src/components/text-input/text-input.ts"
          }
        },
        {
          "kind": "js",
          "name": "INPUT_SIZE",
          "declaration": {
            "name": "INPUT_SIZE",
            "module": "src/components/text-input/text-input.ts"
          }
        },
        {
          "kind": "js",
          "name": "INPUT_TOOLTIP_ALIGNMENT",
          "declaration": {
            "name": "INPUT_TOOLTIP_ALIGNMENT",
            "module": "src/components/text-input/text-input.ts"
          }
        },
        {
          "kind": "js",
          "name": "INPUT_TOOLTIP_DIRECTION",
          "declaration": {
            "name": "INPUT_TOOLTIP_DIRECTION",
            "module": "src/components/text-input/text-input.ts"
          }
        },
        {
          "kind": "js",
          "name": "INPUT_TYPE",
          "declaration": {
            "name": "INPUT_TYPE",
            "module": "src/components/text-input/text-input.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTextInput",
            "module": "src/components/text-input/text-input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/textarea/defs.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "TEXTAREA_COLOR_SCHEME",
          "declaration": {
            "name": "FORM_ELEMENT_COLOR_SCHEME",
            "module": "../../globals/shared-enums"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/textarea/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/textarea/textarea-skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Skeleton of text area.",
          "name": "CDSTextareaSkeleton",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTextareaSkeleton",
            "module": "src/components/textarea/textarea-skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/textarea/textarea-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "skeleton"
        },
        {
          "kind": "function",
          "name": "WithLayer"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/textarea/textarea-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "skeleton",
          "declaration": {
            "name": "skeleton",
            "module": "src/components/textarea/textarea-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "WithLayer",
          "declaration": {
            "name": "WithLayer",
            "module": "src/components/textarea/textarea-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/textarea/textarea-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/textarea/textarea-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/textarea/textarea.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Text area.",
          "name": "CDSTextarea",
          "slots": [
            {
              "description": "The helper text.",
              "name": "helper-text",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "description": "The label text.",
              "name": "label-text",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "description": "The validity message. If present and non-empty, this input shows the UI of its invalid state.",
              "name": "validity-message",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "_handleInput",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "description": "The event.",
                  "name": "event"
                },
                {
                  "description": "The event target.",
                  "name": "event.target"
                }
              ],
              "description": "Handles `oninput` event on the `<input>`.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "cols",
              "description": "The number of columns for the stextarea to show by default"
            },
            {
              "kind": "field",
              "name": "id",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "ID to link the `label` and `textarea`"
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Pattern to validate the textarea against for HTML validity checking",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "Boolean property to set the required status",
              "default": "false",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "number"
              },
              "default": "4",
              "description": "The number of rows for the textarea to show by default"
            },
            {
              "kind": "field",
              "name": "_textarea",
              "type": {
                "text": "HTMLTextAreaElement"
              },
              "privacy": "protected",
              "description": "Get a reference to the underlying textarea so we can directly apply values.\nThis lets us fixe a bug where after a user would clear text, the value wouldn't update programmatically"
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getValidityMessage",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string"
                  },
                  "description": "The form validation status."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "_testValidity",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Checks if the value meets the constraints.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "description": "`true` to show the UI of the invalid state.",
              "default": "false",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "requiredValidityMessage",
              "type": {
                "text": "string"
              },
              "description": "The special validity message for `required`.",
              "default": "'Please fill out this field.'",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "validityMessage",
              "type": {
                "text": "string"
              },
              "description": "The validity message.",
              "default": "''",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The value.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Checks if the value meets the constraints.\nFires cancelable `invalid` event if it doesn't.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "validityMessage",
                  "type": {
                    "text": "string"
                  },
                  "description": "The custom validity message"
                }
              ],
              "description": "Sets the given custom validity message.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hFormdata",
              "type": {
                "text": "Handle | null"
              },
              "default": "null",
              "description": "The handle for `formdata` event listener on the containing form.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleFormdata",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `formdata` event.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasSlug",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "description": "`true` if there is a slug.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "_input",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "protected",
              "description": "The underlying input element",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''",
              "description": "The internal value.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "May be any of the standard HTML autocomplete options",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets the input to be focussed automatically on page load. Defaults to false",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Controls the disabled state of the input",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "enableCounter",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether to display the character counter",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "helperText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The helper text.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalidText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Message which is displayed if the value is invalid.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "maxCount",
              "description": "Max character count allowed for input. This is needed in order for enableCounter to display",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "warn",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the control is currently in warning state",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "warnText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Provide the text that is displayed when the control is in warning state",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether you want the underlying label to be visually hidden",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Generic label that will be used as the textual representation of what this field is for",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Name for the input in the `FormData`",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Value to display when the input has an empty `value`",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify if the component should be read-only",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "hidePasswordLabel",
              "type": {
                "text": "string"
              },
              "default": "'Hide password'",
              "description": "\"Hide password\" tooltip text on password visibility toggle",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "showPasswordLabel",
              "type": {
                "text": "string"
              },
              "default": "'Show password'",
              "description": "\"Show password\" tooltip text on password visibility toggle",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "showPasswordVisibilityToggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean property to render password visibility toggle",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "description": "The input box size.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "true to use the inline version.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipAlignment",
              "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipDirection",
              "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "The type of the input. Can be one of the types listed in the INPUT_TYPE enum",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleTogglePasswordVisibility",
              "privacy": "private",
              "description": "Handles password visibility toggle button click",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "slugItem",
              "static": true,
              "description": "A selector that will return the slug item.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            }
          ],
          "superclass": {
            "name": "CDSTextInput",
            "module": "/src/components/text-input/text-input"
          },
          "tagName": "cds-textarea",
          "customElement": true,
          "events": [
            {
              "name": "invalid",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "CDSTextInput",
                "module": "src/components/text-input/text-input.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTextarea",
            "module": "src/components/textarea/textarea.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tile/clickable-tile.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Clickable tile.",
          "name": "CDSClickableTile",
          "members": [
            {
              "kind": "field",
              "name": "_classes",
              "privacy": "protected",
              "description": "The CSS class list for the link node.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "colorScheme",
              "description": "The color scheme."
            },
            {
              "kind": "field",
              "name": "linkRole",
              "type": {
                "text": "string"
              },
              "description": "The a11y role for `<a>`.",
              "default": "'button'",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasRoundedCorners",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify if the `ClickableTile` component should be rendered with rounded corners.\nOnly valid when `slug` prop is present"
            },
            {
              "kind": "field",
              "name": "slug",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "method",
              "name": "_renderInner",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "slugItem",
              "static": true,
              "description": "A selector that will return the slug item.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasIcon",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`true` if there is an icon.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "_linkNode",
              "type": {
                "text": "HTMLAnchorElement | HTMLParagraphElement | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "_",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "Handles `click` event on the `<a>`.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderDisabledLink",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderLink",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the link should be disabled.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "description": "The default file name.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Link `href`.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "hreflang",
              "type": {
                "text": "string"
              },
              "description": "The language of what `href` points to.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the link should be inline.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "ping",
              "type": {
                "text": "string"
              },
              "description": "URLs to ping.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "description": "The link type.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "LINK_SIZE_TYPE"
              },
              "description": "Link size.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "string"
              },
              "description": "The link target.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "description": "MIME type of the `target`.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "visited",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the link has been visited.",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            }
          ],
          "superclass": {
            "name": "CDSLink",
            "module": "/src/components/link/link"
          },
          "tagName": "cds-clickable-tile",
          "customElement": true,
          "cssParts": [
            {
              "description": "The link.",
              "name": "link",
              "inheritedFrom": {
                "name": "CDSLink",
                "module": "src/components/link/link.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSClickableTile",
            "module": "src/components/tile/clickable-tile.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tile/defs.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "TILE_COLOR_SCHEME",
          "declaration": {
            "name": "FORM_ELEMENT_COLOR_SCHEME",
            "module": "../../globals/shared-enums"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tile/expandable-tile.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Expandable tile.",
          "name": "CDSExpandableTile",
          "members": [
            {
              "kind": "field",
              "name": "_belowTheContentHeight",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0",
              "description": "The computed height of the below-the-fold content."
            },
            {
              "kind": "field",
              "name": "_hasSlug",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "description": "`true` if there is a slug."
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event."
            },
            {
              "kind": "method",
              "name": "_handleSlotChangeBelowTheFoldContent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `slotchange` event on the below-the-fold content."
            },
            {
              "kind": "method",
              "name": "_handleExpand",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "colorScheme",
              "description": "The color scheme."
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` to expand this expandable tile."
            },
            {
              "kind": "field",
              "name": "hasRoundedCorners",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify if the `ExpandableTile` component should be rendered with rounded corners.\nOnly valid when `slug` prop is present"
            },
            {
              "kind": "field",
              "name": "withInteractive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` to expand this expandable tile."
            },
            {
              "kind": "method",
              "name": "updated"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "slugItem",
              "static": true,
              "description": "A selector that will return the slug item.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventBeforeToggle",
              "static": true,
              "description": "The name of the custom event fired before the expanded state is changed upon a user gesture.\nCancellation of this event stops changing the user-initiated change in expanded state.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventToggle",
              "static": true,
              "description": "The name of the custom event fired after a the expanded state is changed upon a user gesture.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "events": [
            {
              "description": "The custom event fired before the expanded state is changed upon a user gesture. Cancellation of this event stops changing the user-initiated change in expanded state.",
              "name": "cds-expandable-tile-beingtoggled"
            },
            {
              "description": "The custom event fired after a the expanded state is changed upon a user gesture.",
              "name": "cds-expandable-tile-toggled"
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            },
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-expandable-tile",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSExpandableTile",
            "module": "src/components/tile/expandable-tile.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tile/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tile/radio-tile.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Single-selectable tile.",
          "name": "CDSRadioTile",
          "members": [
            {
              "kind": "field",
              "name": "_inputType",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "'radio'",
              "description": "The `type` attribute of the `<input>`."
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "privacy": "protected",
              "description": "Handles `change` event on the `<input>` in the shadow DOM."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "eventRadioChange",
              "static": true,
              "description": "The name of the custom event fired after this selectable tile changes its selected state.",
              "readonly": true
            }
          ],
          "events": [
            {
              "name": "eventRadioChange",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The name of the custom event fired after this selectable tile changes its selected state.",
              "name": "cds-radio-tile-selected"
            }
          ],
          "superclass": {
            "name": "SelectableTile",
            "module": "/src/components/tile/selectable-tile"
          },
          "tagName": "cds-radio-tile",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSRadioTile",
            "module": "src/components/tile/radio-tile.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tile/selectable-tile.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Multi-selectable tile.",
          "name": "CDSSelectableTile",
          "members": [
            {
              "kind": "field",
              "name": "_inputNode",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_inputType",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "'checkbox'",
              "description": "The `type` attribute of the `<input>`."
            },
            {
              "kind": "field",
              "name": "_hasSlug",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "description": "`true` if there is a slug."
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event."
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "privacy": "protected",
              "description": "Handles `change` event on the `<input>` in the shadow DOM."
            },
            {
              "kind": "method",
              "name": "_renderIcon",
              "privacy": "protected",
              "description": "Handles the rendering of the icon."
            },
            {
              "kind": "field",
              "name": "_handleKeydown",
              "privacy": "private",
              "description": "Listener function for keyboard interaction.",
              "parameters": [
                {
                  "description": "to get the key pressed",
                  "name": "event"
                }
              ]
            },
            {
              "kind": "field",
              "name": "checkmarkLabel",
              "type": {
                "text": "string"
              },
              "description": "The a11y text for the checkmark icon of the selected state."
            },
            {
              "kind": "field",
              "name": "colorScheme",
              "description": "The color scheme."
            },
            {
              "kind": "field",
              "name": "hasRoundedCorners",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify if the `SeletableTile` component should be rendered with rounded corners.\nOnly valid when `slug` prop is present"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The form name."
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` to show the selected state."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The form value."
            },
            {
              "kind": "method",
              "name": "updated"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "slugItem",
              "static": true,
              "description": "A selector that will return the slug item.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventChange",
              "static": true,
              "description": "The name of the custom event fired after this selectable tile changes its selected state.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "events": [
            {
              "name": "eventChange",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The custom event fired after this selectable tile changes its selected state.",
              "name": "cds-selectable-tile-changed"
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            },
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-selectable-tile",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSSelectableTile",
            "module": "src/components/tile/selectable-tile.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tile/tile-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Tile group.",
          "name": "CDSTileGroup",
          "members": [
            {
              "kind": "method",
              "name": "_handleRadioClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleSelectableClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleTileSelect",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  },
                  "description": "click"
                }
              ],
              "description": "Click listener to ensure selectability."
            },
            {
              "kind": "method",
              "name": "_handleKeydownRadio",
              "privacy": "private",
              "parameters": [
                {
                  "name": "nextSibling",
                  "description": "to focus on"
                }
              ],
              "description": "Handle keyboard navigation for radio tiles"
            },
            {
              "kind": "method",
              "name": "_handleKeydownSelectable",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "description": "to get target"
                },
                {
                  "name": "nextSibling",
                  "optional": true,
                  "description": "to focus on"
                }
              ],
              "description": "Handle keyboard navigation for selectable tiles"
            },
            {
              "kind": "field",
              "name": "_handleKeydown",
              "privacy": "private",
              "description": "Keyboard listener to ensure keyboard navigation.",
              "parameters": [
                {
                  "description": "to get key pressed",
                  "name": "event"
                }
              ]
            },
            {
              "kind": "field",
              "name": "_handleFocus",
              "privacy": "private",
              "description": "Focus listener to focus on selected element upon focusing",
              "parameters": [
                {
                  "description": "to get focused",
                  "name": "event"
                }
              ]
            },
            {
              "kind": "field",
              "name": "fieldsetClassName",
              "description": "Provide an optional className to be applied to the component"
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Specify whether the group is disabled"
            },
            {
              "kind": "field",
              "name": "currentRadioSelection"
            },
            {
              "kind": "field",
              "name": "currentSelections",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "radioTiles"
            },
            {
              "kind": "field",
              "name": "selectableTiles"
            },
            {
              "kind": "method",
              "name": "firstUpdated"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selectorRadioTile",
              "static": true,
              "description": "A selector that selects a radio tile component.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorSelectableTile",
              "static": true,
              "description": "A selector that selects a selectable tile component.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventCurrentRadioTileSelection",
              "static": true,
              "description": "The name of the custom event fired after a radio tile changes its selected state.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventCurrentSelectableTilesSelection",
              "static": true,
              "description": "The name of the custom event fired after a radio tile changes its selected state.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            }
          ],
          "events": [
            {
              "name": "eventCurrentRadioTileSelection",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "eventCurrentSelectableTilesSelection",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The name of the custom event fired after a radio tile changes its selected state.",
              "name": "cds-current-radio-tile-selection"
            },
            {
              "description": "The name of the custom event fired after a selectable tile changes its selected state.",
              "name": "cds-current-selectable-tile-selections"
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-tile-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTileGroup",
            "module": "src/components/tile/tile-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tile/tile-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "DefaultWithLayer",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "clickable",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "ClickableWithLayer",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "Radio",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "RadioWithLayer"
        },
        {
          "kind": "function",
          "name": "multiSelectable",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "expandable",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "ExpandableWithInteractive",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "ExpandableWithLayer",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "Selectable"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/tile/tile-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "DefaultWithLayer",
          "declaration": {
            "name": "DefaultWithLayer",
            "module": "src/components/tile/tile-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "clickable",
          "declaration": {
            "name": "clickable",
            "module": "src/components/tile/tile-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "ClickableWithLayer",
          "declaration": {
            "name": "ClickableWithLayer",
            "module": "src/components/tile/tile-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Radio",
          "declaration": {
            "name": "Radio",
            "module": "src/components/tile/tile-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "RadioWithLayer",
          "declaration": {
            "name": "RadioWithLayer",
            "module": "src/components/tile/tile-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "multiSelectable",
          "declaration": {
            "name": "multiSelectable",
            "module": "src/components/tile/tile-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "expandable",
          "declaration": {
            "name": "expandable",
            "module": "src/components/tile/tile-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "ExpandableWithInteractive",
          "declaration": {
            "name": "ExpandableWithInteractive",
            "module": "src/components/tile/tile-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "ExpandableWithLayer",
          "declaration": {
            "name": "ExpandableWithLayer",
            "module": "src/components/tile/tile-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Selectable",
          "declaration": {
            "name": "Selectable",
            "module": "src/components/tile/tile-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/tile/tile-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tile/tile.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Basic tile.",
          "name": "CDSTile",
          "members": [
            {
              "kind": "field",
              "name": "_hasSlug",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "description": "`true` if there is a slug."
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event."
            },
            {
              "kind": "field",
              "name": "colorScheme",
              "description": "The color scheme."
            },
            {
              "kind": "field",
              "name": "hasRoundedCorners",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify if the `Tile` component should be rendered with rounded corners.\nOnly valid when `slug` prop is present"
            },
            {
              "kind": "method",
              "name": "updated"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "slugItem",
              "static": true,
              "description": "A selector that will return the slug item.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-tile",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TILE_COLOR_SCHEME",
          "declaration": {
            "name": "TILE_COLOR_SCHEME",
            "module": "src/components/tile/tile.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTile",
            "module": "src/components/tile/tile.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/toggle/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/toggle/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/toggle/toggle-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "SmallToggle",
          "parameters": [
            {
              "name": "args"
            }
          ]
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/toggle/toggle-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "SmallToggle",
          "declaration": {
            "name": "SmallToggle",
            "module": "src/components/toggle/toggle-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/toggle/toggle-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/toggle/toggle-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/toggle/toggle.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Basic toggle.",
          "name": "CDSToggle",
          "slots": [
            {
              "description": "The label text.",
              "name": "label-text"
            },
            {
              "description": "The text for the checked state.",
              "name": "checked-text"
            },
            {
              "description": "The text for the unchecked state.",
              "name": "unchecked-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_checkboxNode",
              "type": {
                "text": "HTMLInputElement"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "privacy": "protected",
              "description": "Handles `click` event on the `<button>` in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleKeydown",
              "privacy": "protected",
              "description": "Handles `keydown` event on the toggle button."
            },
            {
              "kind": "method",
              "name": "_renderCheckmark",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "labelA",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The text for the checked state."
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide label text.",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Read only boolean."
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Toggle size."
            },
            {
              "kind": "field",
              "name": "labelB",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The text for the unchecked state."
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "eventChange",
              "static": true,
              "description": "The name of the custom event fired after this changebox changes its checked state.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hFormdata",
              "type": {
                "text": "Handle | null"
              },
              "default": "null",
              "description": "The handle for `formdata` event listener on the containing form.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleFormdata",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `formdata` event.",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "description": "Prevent checkbox state from updating when readonly",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the underlying input should be checked",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "dataTable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify if checkbox is being used in a data table",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the Checkbox should be disabled",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "helperText",
              "description": "Provide text for the form group for additional help",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideCheckbox",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the checkbox should be present in the DOM,\nbut invisible and uninteractable. Used for data-table purposes.",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the Checkbox is in an indeterminate state",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Provide a label to provide a description of the Checkbox input that you are\nexposing to the user",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The form name.",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the Checkbox is read-only",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the Checkbox is currently invalid",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalidText",
              "description": "Provide the text that is displayed when the Checkbox is in an invalid state",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Specify a title for the node for the Checkbox",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The value.",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "warn",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the Checkbox is in a warn state",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "warnText",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Provide the text that is displayed when the Checkbox is in a warn state",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event.",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasSlug",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "description": "`true` if there is a slug.",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "slugItem",
              "static": true,
              "description": "A selector that will return the slug item.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            }
          ],
          "events": [
            {
              "name": "eventChange",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "description": "The custom event fired after this changebox changes its checked state.",
              "name": "cds-toggle-changed"
            },
            {
              "description": "The custom event fired after this changebox changes its checked state.",
              "name": "cds-checkbox-changed",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            }
          ],
          "superclass": {
            "name": "CDSCheckbox",
            "module": "/src/components/checkbox/checkbox"
          },
          "tagName": "cds-toggle",
          "customElement": true,
          "cssParts": [
            {
              "description": "The checkbox.",
              "name": "input",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            },
            {
              "description": "The label.",
              "name": "label",
              "inheritedFrom": {
                "name": "CDSCheckbox",
                "module": "src/components/checkbox/checkbox.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TOGGLE_SIZE",
          "declaration": {
            "name": "TOGGLE_SIZE",
            "module": "src/components/toggle/toggle.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSToggle",
            "module": "src/components/toggle/toggle.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/toggle-tip/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/toggle-tip/toggletip-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/toggle-tip/toggletip-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/toggle-tip/toggletip-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/toggle-tip/toggletip.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Definition tooltip.",
          "name": "CDSToggletip",
          "members": [
            {
              "kind": "field",
              "name": "popoverController",
              "privacy": "private",
              "default": "new PopoverController(this)",
              "description": "Create popover controller instance"
            },
            {
              "kind": "field",
              "name": "alignment",
              "description": "How the tooltip is aligned to the trigger button."
            },
            {
              "kind": "field",
              "name": "autoalign",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether a auto align functionality should be applied"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Set whether toggletip is open"
            },
            {
              "kind": "method",
              "name": "_handleActionsSlotChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event."
            },
            {
              "kind": "field",
              "name": "_handleClick",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_handleKeydown",
              "privacy": "protected",
              "description": "Handles `keydown` event on this element."
            },
            {
              "kind": "method",
              "name": "_handleFocusOut",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `blur` event handler on the document this element is in."
            },
            {
              "kind": "field",
              "name": "_renderToggleTipLabel",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_renderTooltipButton",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_renderTooltipContent",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_renderInnerContent",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "updated"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selectorToggletipContent",
              "static": true,
              "description": "A selector that will return the toggletip content.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorToggletipCaret",
              "static": true,
              "description": "A selector that will return the toggletip caret.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorToggletipButton",
              "static": true,
              "description": "A selector that will return the trigger element.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            },
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-toggletip",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSToggletip",
            "module": "src/components/toggle-tip/toggletip.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tooltip/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tooltip/tooltip-content.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Tooltip content.",
          "name": "CDSTooltipContent",
          "members": [
            {
              "kind": "method",
              "name": "updated"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSPopoverContent",
                "module": "src/components/popover/popover-content.ts"
              }
            },
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Specify the popover alignment",
              "inheritedFrom": {
                "name": "CDSPopoverContent",
                "module": "src/components/popover/popover-content.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoalign",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether a auto align functionality should be applied",
              "inheritedFrom": {
                "name": "CDSPopoverContent",
                "module": "src/components/popover/popover-content.ts"
              }
            },
            {
              "kind": "field",
              "name": "caret",
              "description": "Specify whether a caret should be rendered",
              "inheritedFrom": {
                "name": "CDSPopoverContent",
                "module": "src/components/popover/popover-content.ts"
              }
            },
            {
              "kind": "field",
              "name": "dropShadow",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Specify whether a dropShadow should be rendered",
              "inheritedFrom": {
                "name": "CDSPopoverContent",
                "module": "src/components/popover/popover-content.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the component is currently open or closed",
              "inheritedFrom": {
                "name": "CDSPopoverContent",
                "module": "src/components/popover/popover-content.ts"
              }
            },
            {
              "kind": "field",
              "name": "tabTip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Render the component using the tab tip variant",
              "inheritedFrom": {
                "name": "CDSPopoverContent",
                "module": "src/components/popover/popover-content.ts"
              }
            },
            {
              "kind": "field",
              "name": "slot",
              "type": {
                "text": "string"
              },
              "default": "'content'",
              "description": "The shadow slot this popover content should be in.",
              "inheritedFrom": {
                "name": "CDSPopoverContent",
                "module": "src/components/popover/popover-content.ts"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSPopoverContent",
                "module": "src/components/popover/popover-content.ts"
              }
            }
          ],
          "superclass": {
            "name": "CDSPopoverContent",
            "module": "/src/components/popover/popover-content"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTooltipContent",
            "module": "src/components/tooltip/tooltip-content.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tooltip/tooltip-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Alignment"
        },
        {
          "kind": "function",
          "name": "Duration"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/tooltip/tooltip-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Alignment",
          "declaration": {
            "name": "Alignment",
            "module": "src/components/tooltip/tooltip-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Duration",
          "declaration": {
            "name": "Duration",
            "module": "src/components/tooltip/tooltip-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/tooltip/tooltip-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/tooltip/tooltip-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tooltip/tooltip.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Trigger button of tooltip.",
          "name": "CDSTooltip",
          "members": [
            {
              "kind": "field",
              "name": "align",
              "type": {
                "text": "string"
              },
              "default": "'top'",
              "description": "Specify how the trigger should align with the tooltip",
              "inheritedFrom": {
                "name": "CDSPopover",
                "module": "src/components/popover/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoalign",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether a auto align functionality should be applied",
              "inheritedFrom": {
                "name": "CDSPopover",
                "module": "src/components/popover/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "dataTable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this tooltip is in a data table row"
            },
            {
              "kind": "field",
              "name": "closeOnActivation",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the tooltip should be closed when clicked"
            },
            {
              "kind": "field",
              "name": "defaultOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the tooltip should be open when it first renders"
            },
            {
              "kind": "field",
              "name": "enterDelayMs",
              "type": {
                "text": "number"
              },
              "default": "100",
              "description": "Specify the duration in milliseconds to delay before displaying the tooltip"
            },
            {
              "kind": "field",
              "name": "leaveDelayMs",
              "type": {
                "text": "number"
              },
              "default": "300",
              "description": "Specify the duration in milliseconds to delay before hiding the tooltip"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify the size of the tooltip"
            },
            {
              "kind": "field",
              "name": "timeoutId",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Specify the timeout reference for the tooltip"
            },
            {
              "kind": "field",
              "name": "toolbarAction",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the tooltip should be open when it first renders"
            },
            {
              "kind": "field",
              "name": "_handleHover",
              "privacy": "private",
              "description": "Handles `mouseover` event on this element."
            },
            {
              "kind": "field",
              "name": "_handleHoverOut",
              "privacy": "private",
              "description": "Handles `mouseleave` event on this element."
            },
            {
              "kind": "field",
              "name": "_handleClick",
              "privacy": "private",
              "description": "Handles `click` event on this element."
            },
            {
              "kind": "field",
              "name": "_handleKeydown",
              "privacy": "private",
              "description": "Handles `keydown` event on this element."
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event.",
              "inheritedFrom": {
                "name": "CDSPopover",
                "module": "src/components/popover/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "CDSPopover",
                "module": "src/components/popover/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectorTooltipContent",
              "static": true,
              "description": "A selector that will return the CDSTooltipContent.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSPopover",
                "module": "src/components/popover/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "popoverController",
              "privacy": "private",
              "default": "new PopoverController(this)",
              "description": "Create popover controller instance",
              "inheritedFrom": {
                "name": "CDSPopover",
                "module": "src/components/popover/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "_triggerSlotNode",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private",
              "description": "The `<slot>` element in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSPopover",
                "module": "src/components/popover/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "_contentSlotNode",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private",
              "description": "The `<slot>` element in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSPopover",
                "module": "src/components/popover/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "caret",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Specify whether a caret should be rendered",
              "inheritedFrom": {
                "name": "CDSPopover",
                "module": "src/components/popover/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "dropShadow",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Specify whether a dropShadow should be rendered",
              "inheritedFrom": {
                "name": "CDSPopover",
                "module": "src/components/popover/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "highContrast",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Render the component using the high-contrast variant",
              "inheritedFrom": {
                "name": "CDSPopover",
                "module": "src/components/popover/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the component is currently open or closed",
              "inheritedFrom": {
                "name": "CDSPopover",
                "module": "src/components/popover/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "tabTip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Render the component using the tab tip variant",
              "inheritedFrom": {
                "name": "CDSPopover",
                "module": "src/components/popover/popover.ts"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSPopover",
                "module": "src/components/popover/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectorPopoverContentClass",
              "static": true,
              "description": "A selector that will return popover content element within\nCDSPopoverContent's shadowRoot.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSPopover",
                "module": "src/components/popover/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectorPopoverCaret",
              "static": true,
              "description": "A selector that will return popover caret element within\nCDSPopoverContent's shadowRoot.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSPopover",
                "module": "src/components/popover/popover.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectorPopoverContent",
              "static": true,
              "description": "A selector that will return the CDSPopoverContent.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSPopover",
                "module": "src/components/popover/popover.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            }
          ],
          "superclass": {
            "name": "CDSPopover",
            "module": "/src/components/popover/popover"
          },
          "tagName": "cds-tooltip",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSTooltip",
            "module": "src/components/tooltip/tooltip.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui-shell/defs.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui-shell/header-global-action.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Header global action button",
          "name": "CDSHeaderGlobalAction",
          "members": [
            {
              "kind": "field",
              "name": "_buttonNode",
              "type": {
                "text": "HTMLButtonElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "active",
              "description": "Specify whether the action is currently active"
            },
            {
              "kind": "field",
              "name": "panelId",
              "description": "Specify which header panel the button is associated with."
            },
            {
              "kind": "field",
              "name": "buttonLabelActive",
              "description": "The `aria-label` attribute for the button in its active state."
            },
            {
              "kind": "field",
              "name": "buttonLabelInactive",
              "description": "The `aria-label` attribute for the button in its inactive state."
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updated"
            },
            {
              "kind": "method",
              "name": "shouldUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasIcon",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`true` if there is an icon.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleDisabledClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleOver",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleHoverOut",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocus",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocusout",
              "privacy": "private",
              "description": "Handles `keydown` event on this element.\nSpace & enter will toggle state, Escape will only close.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button should have input focus when the page loads.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "batchAction",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button is being used within a data table batch action toolbar",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "buttonClassName",
              "description": "Specify an optional className to be added to your Button",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "dangerDescriptor",
              "description": "Specify the message read by screen readers for the danger button variant",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button should be disabled.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "description": "The default file name, used if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasMainContent",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if there is a non-icon content.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Link `href`. If present, this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "hreflang",
              "type": {
                "text": "string"
              },
              "description": "The language of what `href` points to, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "isExpressive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if expressive theme enabled.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "isSelected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the Button is currently selected.\nOnly applies to the Ghost variant.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "Button kind.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "linkRole",
              "type": {
                "text": "string"
              },
              "default": "'button'",
              "description": "The a11y role for `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "openTooltip",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Boolean to determine if tooltip is open.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "ping",
              "type": {
                "text": "string"
              },
              "description": "URLs to ping, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "description": "The link type, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "string"
              },
              "default": "'lg'",
              "description": "Button size.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "string"
              },
              "description": "The link target, if this button is rendered as `<a>`.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipAlignment",
              "description": "Specify the alignment of the tooltip to the icon-only button.\nCan be one of: start, center, or end.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipPosition",
              "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tooltipText",
              "type": {
                "text": "string"
              },
              "description": "Specify the direction of the tooltip for icon-only buttons.\nCan be either top, right, bottom, or left.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Button type.",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            }
          ],
          "superclass": {
            "name": "CDSButton",
            "module": "/src/components/button/button"
          },
          "tagName": "cds-header-global-action",
          "customElement": true,
          "cssParts": [
            {
              "description": "The button.",
              "name": "button",
              "inheritedFrom": {
                "name": "CDSButton",
                "module": "src/components/button/button.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSHeaderGlobalAction",
            "module": "src/components/ui-shell/header-global-action.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui-shell/header-menu-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The trigger button for side nav in header nav.",
          "name": "CDSHeaderMenuButton",
          "cssParts": [
            {
              "description": "The button.",
              "name": "button"
            },
            {
              "description": "The toggle icon.",
              "name": "toggle-icon"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button should represent its active state."
            },
            {
              "kind": "field",
              "name": "buttonLabelActive",
              "type": {
                "text": "string"
              },
              "default": "'Close navigation menu'",
              "description": "The `aria-label` attribute for the button in its active state."
            },
            {
              "kind": "field",
              "name": "buttonLabelInactive",
              "type": {
                "text": "string"
              },
              "default": "'Open navigation menu'",
              "description": "The `aria-label` attribute for the button in its inactive state."
            },
            {
              "kind": "field",
              "name": "collapseMode",
              "description": "Collapse mode of the side nav."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the button should be disabled."
            },
            {
              "kind": "field",
              "name": "isNotChildOfHeader",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If `true` will style the side nav to sit below the header"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "eventToggle",
              "static": true,
              "description": "The name of the custom event fired after this header menu button is toggled upon a user gesture.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The custom event fired after this header menu button is toggled upon a user gesture.",
              "name": "cds-header-menu-button-toggled"
            }
          ],
          "mixins": [
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-header-menu-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSHeaderMenuButton",
            "module": "src/components/ui-shell/header-menu-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui-shell/header-menu-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Header submenu item.",
          "name": "CDSHeaderMenuItem",
          "superclass": {
            "name": "CDSHeaderNavItem",
            "module": "/src/components/ui-shell/header-nav-item"
          },
          "tagName": "cds-header-menu-item",
          "customElement": true,
          "members": [
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Link `href`.",
              "inheritedFrom": {
                "name": "CDSHeaderNavItem",
                "module": "src/components/ui-shell/header-nav-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "description": "The link type.",
              "inheritedFrom": {
                "name": "CDSHeaderNavItem",
                "module": "src/components/ui-shell/header-nav-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "string"
              },
              "description": "The link target.",
              "inheritedFrom": {
                "name": "CDSHeaderNavItem",
                "module": "src/components/ui-shell/header-nav-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "description": "The title.",
              "inheritedFrom": {
                "name": "CDSHeaderNavItem",
                "module": "src/components/ui-shell/header-nav-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "isActive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Applies selected styles to the item if a user sets this to true and `aria-current !== 'page'`.",
              "inheritedFrom": {
                "name": "CDSHeaderNavItem",
                "module": "src/components/ui-shell/header-nav-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaCurrent",
              "description": "indicates that this element represents the current item",
              "inheritedFrom": {
                "name": "CDSHeaderNavItem",
                "module": "src/components/ui-shell/header-nav-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'listitem'",
              "description": "As child of <ul>, this element must have role of listitem",
              "inheritedFrom": {
                "name": "CDSHeaderNavItem",
                "module": "src/components/ui-shell/header-nav-item.ts"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSHeaderNavItem",
                "module": "src/components/ui-shell/header-nav-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "CDSHeaderNavItem",
                "module": "src/components/ui-shell/header-nav-item.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSHeaderNavItem",
                "module": "src/components/ui-shell/header-nav-item.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The link.",
              "name": "link",
              "inheritedFrom": {
                "name": "CDSHeaderNavItem",
                "module": "src/components/ui-shell/header-nav-item.ts"
              }
            },
            {
              "description": "The title.",
              "name": "title",
              "inheritedFrom": {
                "name": "CDSHeaderNavItem",
                "module": "src/components/ui-shell/header-nav-item.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSHeaderMenuItem",
            "module": "src/components/ui-shell/header-menu-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui-shell/header-menu.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Header menu.",
          "name": "CDSHeaderMenu",
          "cssParts": [
            {
              "description": "The trigger button.",
              "name": "trigger"
            },
            {
              "description": "The trigger button icon.",
              "name": "trigger-icon"
            },
            {
              "description": "The menu body.",
              "name": "menu-body"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_topMenuItem",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "protected",
              "description": "The trigger button."
            },
            {
              "kind": "field",
              "name": "_hasActiveChildren",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "keeps track if header menu has any active submenus"
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "private",
              "description": "Handles `click` event handler on this element."
            },
            {
              "kind": "method",
              "name": "_handleKeydownTrigger",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ key }",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handler for the `keydown` event on the trigger button."
            },
            {
              "kind": "method",
              "name": "_handleUserInitiatedToggle",
              "privacy": "private",
              "parameters": [
                {
                  "name": "force",
                  "default": "!this.expanded",
                  "description": "If specified, forces the open state to the given one.",
                  "optional": true
                }
              ],
              "description": "Handles user-initiated toggling the open state."
            },
            {
              "kind": "method",
              "name": "_handleBlur",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ relatedTarget }",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ],
              "description": "Handles `blur` event handler on this element."
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the menu should be expanded."
            },
            {
              "kind": "field",
              "name": "isActive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Applies selected styles to the item if a user sets this to true and `aria-current !== 'page'`."
            },
            {
              "kind": "field",
              "name": "triggerContent",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The content of the trigger button."
            },
            {
              "kind": "field",
              "name": "menuLabel",
              "type": {
                "text": "string"
              },
              "description": "The `aria-label` attribute for the menu UI."
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selectorItem",
              "static": true,
              "description": "A selector that will return the menu items.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            },
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-header-menu",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSHeaderMenu",
            "module": "src/components/ui-shell/header-menu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui-shell/header-name.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "The product name UI in header nav.",
          "name": "CDSHeaderName",
          "cssParts": [
            {
              "description": "The link.",
              "name": "link"
            },
            {
              "description": "The prefix content.",
              "name": "prefix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Link `href`."
            },
            {
              "kind": "field",
              "name": "prefix",
              "type": {
                "text": "string"
              },
              "description": "The product name prefix."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-header-name",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSHeaderName",
            "module": "src/components/ui-shell/header-name.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui-shell/header-nav-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Header nav item.",
          "name": "CDSHeaderNavItem",
          "cssParts": [
            {
              "description": "The link.",
              "name": "link"
            },
            {
              "description": "The title.",
              "name": "title"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "Link `href`."
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "description": "The link type."
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "string"
              },
              "description": "The link target."
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "description": "The title."
            },
            {
              "kind": "field",
              "name": "isActive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Applies selected styles to the item if a user sets this to true and `aria-current !== 'page'`."
            },
            {
              "kind": "field",
              "name": "ariaCurrent",
              "description": "indicates that this element represents the current item"
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'listitem'",
              "description": "As child of <ul>, this element must have role of listitem"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-header-nav-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSHeaderNavItem",
            "module": "src/components/ui-shell/header-nav-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui-shell/header-nav.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Header.",
          "name": "CDSHeaderNav",
          "cssParts": [
            {
              "description": "The menu body.",
              "name": "menu-body"
            },
            {
              "description": "The divider.",
              "name": "divider"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "menuBarLabel",
              "type": {
                "text": "string"
              },
              "description": "The `aria-label` attribute for the menu bar UI."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-header-nav",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSHeaderNav",
            "module": "src/components/ui-shell/header-nav.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui-shell/header-panel.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Header panel",
          "name": "CDSHeaderPanel",
          "members": [
            {
              "kind": "field",
              "name": "expanded",
              "description": "Specify whether the panel is expanded"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-header-panel",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSHeaderPanel",
            "module": "src/components/ui-shell/header-panel.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui-shell/header-side-nav-items.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Header Side Nav Items section",
          "name": "CDSHeaderSideNavItems",
          "members": [
            {
              "kind": "field",
              "name": "hasDivider",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Optionally specify if container will have a bottom divider to differentiate\nbetween original sidenav items and header menu items. False by default."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-header-side-nav-items",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSHeaderSideNavItems",
            "module": "src/components/ui-shell/header-side-nav-items.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui-shell/header.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Header.",
          "name": "CDSHeader",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-header",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSHeader",
            "module": "src/components/ui-shell/header.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui-shell/index.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui-shell/side-nav-divider.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A divider in side nav.",
          "name": "CDSSideNavDivider",
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-side-nav-divider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSSideNavDivider",
            "module": "src/components/ui-shell/side-nav-divider.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui-shell/side-nav-items.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Side nav items.",
          "name": "CDSSideNavItems",
          "members": [
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-side-nav-items",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSSideNavItems",
            "module": "src/components/ui-shell/side-nav-items.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui-shell/side-nav-link.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Side nav menu item.",
          "name": "CDSSideNavLink",
          "slots": [
            {
              "description": "The link.",
              "name": "link"
            },
            {
              "description": "The title.",
              "name": "title"
            },
            {
              "description": "The title icon container.",
              "name": "title-icon-container"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_titleIconContainerNode",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private",
              "description": "The container for the title icon."
            },
            {
              "kind": "method",
              "name": "_handleSlotChangeTitleIcon",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ target }"
                }
              ],
              "description": "Handles `slotchange` event on the `<slot>` for the title icon."
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the menu item should be active."
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Link `href`."
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "description": "The link type."
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "string"
              },
              "description": "The link target."
            },
            {
              "kind": "field",
              "name": "large",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify if this is a large variation of the side nav link"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "description": "The title."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-side-nav-link",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSSideNavLink",
            "module": "src/components/ui-shell/side-nav-link.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui-shell/side-nav-menu-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Side nav menu item.",
          "name": "CDSSideNavMenuItem",
          "cssParts": [
            {
              "description": "The link.",
              "name": "link"
            },
            {
              "description": "The title.",
              "name": "title"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the menu item should be active."
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Link `href`."
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "description": "The title."
            },
            {
              "kind": "method",
              "name": "shouldUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selectorMenu",
              "static": true,
              "description": "A selector that will return the parent menu.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-side-nav-menu-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSSideNavMenuItem",
            "module": "src/components/ui-shell/side-nav-menu-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui-shell/side-nav-menu.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Side nav menu.",
          "name": "CDSSideNavMenu",
          "cssParts": [
            {
              "description": "The expando.",
              "name": "expando"
            },
            {
              "description": "The expando icon container.",
              "name": "expando-icon-container"
            },
            {
              "description": "The expando icon.",
              "name": "expando-icon"
            },
            {
              "description": "The title.",
              "name": "title"
            },
            {
              "description": "The title icon container.",
              "name": "title-icon-container"
            },
            {
              "description": "The menu body.",
              "name": "menu-body"
            }
          ],
          "slots": [
            {
              "description": "The icon.",
              "name": "title-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_hasIcon",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`true` if this menu has an icon."
            },
            {
              "kind": "field",
              "name": "_titleIconContainerNode",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private",
              "description": "The container for the title icon."
            },
            {
              "kind": "method",
              "name": "_handleUserInitiatedToggle",
              "privacy": "private",
              "parameters": [
                {
                  "name": "expanded",
                  "default": "!this.expanded",
                  "description": "The new expanded state."
                }
              ],
              "description": "Handles user-initiated toggle request of this side nav menu."
            },
            {
              "kind": "method",
              "name": "_handleClickExpando",
              "privacy": "private",
              "description": "Handler for the `click` event on the expando button."
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ target }"
                }
              ],
              "description": "Handles `slotchange` event on the non-named `<slot>`."
            },
            {
              "kind": "method",
              "name": "_handleSlotChangeTitleIcon",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ target }"
                }
              ],
              "description": "Handles `slotchange` event on the `<slot>` for the title icon."
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the menu has active menu item."
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the menu should be open."
            },
            {
              "kind": "field",
              "name": "large",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify if this is a large variation of the side nav menu"
            },
            {
              "kind": "field",
              "name": "forceCollapsed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if the menu should be forced collapsed upon side nav's expanded state."
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The title text."
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "attribItemHasIcon",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'parent-has-icon'",
              "description": "The attribute name of the menu items, that is set if this menu has an icon."
            },
            {
              "kind": "field",
              "name": "selectorItem",
              "static": true,
              "description": "A selector that will return the menu items.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventBeforeToggle",
              "static": true,
              "description": "The name of the custom event fired before this side nav menu is being toggled upon a user gesture.\nCancellation of this event stops the user-initiated action of toggling this side nav menu.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventToggle",
              "static": true,
              "description": "The name of the custom event fired after this side nav menu is toggled upon a user gesture.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "events": [
            {
              "name": "eventBeforeToggle",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "eventToggle",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "description": "The name of the custom event fired before this side nav menu is being toggled upon a user gesture. Cancellation of this event stops the user-initiated action of toggling this side nav menu.",
              "name": "cds-side-nav-menu-beingtoggled"
            },
            {
              "description": "The name of the custom event fired after this side nav menu is toggled upon a user gesture.",
              "name": "cds-side-nav-menu-toggled"
            }
          ],
          "mixins": [
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-side-nav-menu",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSSideNavMenu",
            "module": "src/components/ui-shell/side-nav-menu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui-shell/side-nav.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Side nav.",
          "name": "CDSSideNav",
          "members": [
            {
              "kind": "field",
              "name": "_hovered",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "`true` if this side nav is hovered."
            },
            {
              "kind": "field",
              "name": "_hTransition",
              "type": {
                "text": "Handle | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "The handle for `transitionend` event listener."
            },
            {
              "kind": "field",
              "name": "_transitionPromise",
              "privacy": "private",
              "description": "A promise that is resolved when the transition is complete."
            },
            {
              "kind": "field",
              "name": "_updateAndTransitionPromise",
              "privacy": "private",
              "description": "A promise that is resolved when the transition upon proprety update is complete.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_cleanHTransition",
              "privacy": "private",
              "description": "Cleans the handle for `transitionend` event listener."
            },
            {
              "kind": "field",
              "name": "_handleButtonToggle",
              "privacy": "private",
              "description": "Handles `${prefix}-header-menu-button-toggle` event on the document."
            },
            {
              "kind": "method",
              "name": "_updatedSideNavMenuForceCollapsedState",
              "privacy": "private",
              "description": "Force child side nav menus collapsed upon the hover/expanded state of this side nav."
            },
            {
              "kind": "field",
              "name": "collapseMode",
              "description": "Collapse mode of the side nav."
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` to expand the side nav."
            },
            {
              "kind": "field",
              "name": "isNotChildOfHeader",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If `true` will style the side nav to sit below the header"
            },
            {
              "kind": "field",
              "name": "isNotPersistent",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify if the side-nav will be persistent above the lg breakpoint"
            },
            {
              "kind": "method",
              "name": "shouldUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleFocusOut",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{ relatedTarget }",
                  "type": {
                    "text": "FocusEvent"
                  }
                },
                {
                  "description": "The event.",
                  "name": "event"
                },
                {
                  "description": "The event relatedTarget.",
                  "name": "event.relatedTarget"
                }
              ],
              "description": "Handles `blur` event handler on this element."
            },
            {
              "kind": "method",
              "name": "_handleFocusIn",
              "privacy": "private",
              "description": "Handles `focus` event handler on this element."
            },
            {
              "kind": "method",
              "name": "_handleNavMouseOver",
              "privacy": "private",
              "description": "Handles the `mouseover` event for the side nav in rail mode."
            },
            {
              "kind": "method",
              "name": "_handleNavMouseOut",
              "privacy": "private",
              "description": "Handles the `mouseout` event for the side nav in rail mode."
            },
            {
              "kind": "method",
              "name": "_onOverlayClick",
              "privacy": "private",
              "description": "Handles the `click` event for the side nav overlay."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selectorButtonToggle",
              "static": true,
              "description": "A selector that will return the toggle buttons.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorHeaderItems",
              "static": true,
              "description": "A selector that will return the header name + global action elements.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorNavItems",
              "static": true,
              "description": "A selector that will return side nav focusable items.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectorMenu",
              "static": true,
              "description": "A selector that will return side nav menus.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "eventButtonToggle",
              "static": true,
              "description": "The name of the custom event fired after the header menu button in the document is toggled upon a user gesture.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "HostListenerMixin",
                "module": "src/globals/mixins/host-listener.ts"
              }
            }
          ],
          "events": [
            {
              "description": "The name of the custom event fired after the header menu button in the document is toggled upon a user gesture.",
              "name": "cds-header-menu-button-toggled"
            }
          ],
          "mixins": [
            {
              "name": "HostListenerMixin",
              "module": "/src/globals/mixins/host-listener"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-side-nav",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SIDE_NAV_COLLAPSE_MODE",
          "declaration": {
            "name": "SIDE_NAV_COLLAPSE_MODE",
            "module": "src/components/ui-shell/side-nav.ts"
          }
        },
        {
          "kind": "js",
          "name": "SIDE_NAV_USAGE_MODE",
          "declaration": {
            "name": "SIDE_NAV_USAGE_MODE",
            "module": "src/components/ui-shell/side-nav.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSSideNav",
            "module": "src/components/ui-shell/side-nav.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui-shell/switcher-divider.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A divider in switcher.",
          "name": "CDSSwitcherDivider",
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-switcher-divider",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSSwitcherDivider",
            "module": "src/components/ui-shell/switcher-divider.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui-shell/switcher-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Switcher menu item.",
          "name": "CDSSwitcherItem",
          "members": [
            {
              "kind": "field",
              "name": "ariaLabel",
              "description": "Required props for accessibility label"
            },
            {
              "kind": "field",
              "name": "ariaLabelledBy",
              "description": "Props for accessibility labelled by"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Link `href`."
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify if this is a large variation of the side nav link"
            },
            {
              "kind": "field",
              "name": "tabIndex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Specify if this is a large variation of the side nav link"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "FocusMixin",
                "module": "src/globals/mixins/focus.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "FocusMixin",
              "module": "/src/globals/mixins/focus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-switcher-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSSwitcherItem",
            "module": "src/components/ui-shell/switcher-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui-shell/switcher.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Switcher",
          "name": "CDSSwitcher",
          "members": [
            {
              "kind": "field",
              "name": "ariaLabel",
              "description": "Required props for accessibility label on the underlying menu"
            },
            {
              "kind": "field",
              "name": "ariaLabelledBy",
              "description": "Prop for accessibility labelled by on the underlying menu"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "cds-switcher",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "CDSSwitcher",
            "module": "src/components/ui-shell/switcher.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ui-shell/ui-shell-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "FixedSideNav"
        },
        {
          "kind": "function",
          "name": "FixedSideNavDivider"
        },
        {
          "kind": "function",
          "name": "FixedSideNavIcons"
        },
        {
          "kind": "function",
          "name": "HeaderBase"
        },
        {
          "kind": "function",
          "name": "HeaderBaseWActions"
        },
        {
          "kind": "function",
          "name": "HeaderBaseWActionsRightPanel"
        },
        {
          "kind": "function",
          "name": "HeaderBaseWActionsSwitcher"
        },
        {
          "kind": "function",
          "name": "HeaderBaseWNavigationActionsAndSideNav"
        },
        {
          "kind": "function",
          "name": "HeaderBaseWNavigationActions"
        },
        {
          "kind": "function",
          "name": "HeaderBaseWNavigation"
        },
        {
          "kind": "function",
          "name": "HeaderBaseWSideNav"
        },
        {
          "kind": "function",
          "name": "HeaderBaseWSkipToContent"
        },
        {
          "kind": "function",
          "name": "SideNavRail"
        },
        {
          "kind": "function",
          "name": "SideNavRailWHeader"
        },
        {
          "kind": "function",
          "name": "SideNavWLargeSideNavItems"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FixedSideNav",
          "declaration": {
            "name": "FixedSideNav",
            "module": "src/components/ui-shell/ui-shell-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "FixedSideNavDivider",
          "declaration": {
            "name": "FixedSideNavDivider",
            "module": "src/components/ui-shell/ui-shell-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "FixedSideNavIcons",
          "declaration": {
            "name": "FixedSideNavIcons",
            "module": "src/components/ui-shell/ui-shell-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "HeaderBase",
          "declaration": {
            "name": "HeaderBase",
            "module": "src/components/ui-shell/ui-shell-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "HeaderBaseWActions",
          "declaration": {
            "name": "HeaderBaseWActions",
            "module": "src/components/ui-shell/ui-shell-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "HeaderBaseWActionsRightPanel",
          "declaration": {
            "name": "HeaderBaseWActionsRightPanel",
            "module": "src/components/ui-shell/ui-shell-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "HeaderBaseWActionsSwitcher",
          "declaration": {
            "name": "HeaderBaseWActionsSwitcher",
            "module": "src/components/ui-shell/ui-shell-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "HeaderBaseWNavigationActionsAndSideNav",
          "declaration": {
            "name": "HeaderBaseWNavigationActionsAndSideNav",
            "module": "src/components/ui-shell/ui-shell-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "HeaderBaseWNavigationActions",
          "declaration": {
            "name": "HeaderBaseWNavigationActions",
            "module": "src/components/ui-shell/ui-shell-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "HeaderBaseWNavigation",
          "declaration": {
            "name": "HeaderBaseWNavigation",
            "module": "src/components/ui-shell/ui-shell-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "HeaderBaseWSideNav",
          "declaration": {
            "name": "HeaderBaseWSideNav",
            "module": "src/components/ui-shell/ui-shell-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "HeaderBaseWSkipToContent",
          "declaration": {
            "name": "HeaderBaseWSkipToContent",
            "module": "src/components/ui-shell/ui-shell-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "SideNavRail",
          "declaration": {
            "name": "SideNavRail",
            "module": "src/components/ui-shell/ui-shell-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "SideNavRailWHeader",
          "declaration": {
            "name": "SideNavRailWHeader",
            "module": "src/components/ui-shell/ui-shell-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "SideNavWLargeSideNavItems",
          "declaration": {
            "name": "SideNavWLargeSideNavItems",
            "module": "src/components/ui-shell/ui-shell-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/ui-shell/ui-shell-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/globals/controllers/popover-controller.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PopoverController",
          "members": [
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "PopoverElement"
              },
              "privacy": "private",
              "description": "Host component"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "PopoverControllerOptions"
              },
              "privacy": "private",
              "description": "Floating-ui options to pass to `computePlacement()`"
            },
            {
              "kind": "field",
              "name": "cleanup",
              "type": {
                "text": "() => void | undefined"
              },
              "privacy": "private",
              "description": "cleanup function to stop auto updates"
            },
            {
              "kind": "method",
              "name": "setPlacement",
              "parameters": [
                {
                  "name": "options",
                  "default": "this.options",
                  "type": {
                    "text": "PopoverControllerOptions"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "updatePlacement"
            },
            {
              "kind": "method",
              "name": "computePlacement"
            },
            {
              "kind": "method",
              "name": "hostUpdated",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "PopoverController",
            "module": "src/globals/controllers/popover-controller.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/globals/decorators/carbon-element.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "carbonElement",
          "parameters": [
            {
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "description": "The tag name of the custom element to define."
            }
          ],
          "description": "Class decorator factory that defines the decorated class as a custom element.\n\n```js"
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "tagName",
          "declaration": {
            "name": "anonymous_0",
            "module": "src/globals/decorators/carbon-element.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "tagName",
          "declaration": {
            "name": "clazz",
            "module": "src/globals/decorators/carbon-element.ts"
          }
        },
        {
          "kind": "js",
          "name": "carbonElement",
          "declaration": {
            "name": "carbonElement",
            "module": "src/globals/decorators/carbon-element.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/globals/decorators/host-listener.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "HostListener",
          "parameters": [
            {
              "name": "type",
              "type": {
                "text": "string"
              },
              "description": "  The event type. Can be prefixed with `document:` or `window:`.\n  The event listener is attached to host element's owner document or its default view in such case."
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "boolean | AddEventListenerOptions"
              },
              "description": "The event listener options."
            }
          ],
          "description": "A decorator to add event listener to the host element, or its `document`/`window`, of a custom element.\nThe `target` must extend `HostListenerMixin`."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "HostListener",
            "module": "src/globals/decorators/host-listener.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/globals/directives/if-non-empty.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/globals/directives/if-non-empty.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/globals/directives/spread.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "spread"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "spread",
            "module": "src/globals/directives/spread.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/globals/internal/collection-helpers.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "filter",
          "parameters": [
            {
              "name": "a",
              "type": {
                "text": "NodeListOf<Node> | HTMLCollectionOf<Element>"
              },
              "description": "A DOM collection."
            },
            {
              "name": "predicate",
              "type": {
                "text": "(search: Node, index?: number) => boolean"
              },
              "description": "The callback function."
            },
            {
              "name": "thisObject",
              "optional": true,
              "type": {
                "text": "any"
              },
              "description": "The context object for the given callback function."
            }
          ],
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "findIndex",
          "parameters": [
            {
              "name": "a",
              "type": {
                "text": "NodeListOf<Node> | HTMLCollectionOf<Element>"
              },
              "description": "A DOM collection."
            },
            {
              "name": "predicate",
              "type": {
                "text": "(search: Node, index?: number) => boolean"
              },
              "description": "The callback function."
            },
            {
              "name": "thisObject",
              "optional": true,
              "type": {
                "text": "any"
              },
              "description": "The context object for the given callback function."
            }
          ],
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "find",
          "parameters": [
            {
              "name": "a",
              "type": {
                "text": "NodeListOf<Node> | HTMLCollectionOf<Element>"
              },
              "description": "A DOM collection."
            },
            {
              "name": "predicate",
              "type": {
                "text": "(search: Node, index?: number) => boolean"
              },
              "description": "The callback function."
            },
            {
              "name": "thisObject",
              "optional": true,
              "type": {
                "text": "any"
              },
              "description": "The context object for the given callback function."
            }
          ],
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "forEach",
          "parameters": [
            {
              "name": "a",
              "type": {
                "text": "NodeListOf<Node> | HTMLCollectionOf<Element>"
              },
              "description": "A DOM collection."
            },
            {
              "name": "predicate",
              "type": {
                "text": "(search: Element, index?: number) => void"
              },
              "description": "The callback function."
            },
            {
              "name": "thisObject",
              "optional": true,
              "type": {
                "text": "any"
              },
              "description": "The context object for the given callback function."
            }
          ],
          "description": "Walks through the given DOM collection and runs the given callback."
        },
        {
          "kind": "function",
          "name": "indexOf",
          "parameters": [
            {
              "name": "a",
              "type": {
                "text": "NodeListOf<Node> | HTMLCollectionOf<Element>"
              },
              "description": "A DOM collection."
            },
            {
              "name": "item",
              "type": {
                "text": "Node"
              },
              "description": "An item in the DOM collection."
            }
          ],
          "return": {
            "type": {
              "text": ""
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "filter",
          "declaration": {
            "name": "filter",
            "module": "src/globals/internal/collection-helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "findIndex",
          "declaration": {
            "name": "findIndex",
            "module": "src/globals/internal/collection-helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "find",
          "declaration": {
            "name": "find",
            "module": "src/globals/internal/collection-helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "forEach",
          "declaration": {
            "name": "forEach",
            "module": "src/globals/internal/collection-helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "indexOf",
          "declaration": {
            "name": "indexOf",
            "module": "src/globals/internal/collection-helpers.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/globals/internal/feature-flags.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "CDS_FLAGS_ALL",
          "type": {
            "text": "boolean"
          },
          "description": "This flag will determine if all feature flags should be enabled"
        },
        {
          "kind": "variable",
          "name": "CDS_EXPERIEMENTAL_COMPONENT_NAME",
          "type": {
            "text": "boolean"
          },
          "description": "Enables experimental component"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CDS_FLAGS_ALL",
          "declaration": {
            "name": "CDS_FLAGS_ALL",
            "module": "src/globals/internal/feature-flags.ts"
          }
        },
        {
          "kind": "js",
          "name": "CDS_EXPERIEMENTAL_COMPONENT_NAME",
          "declaration": {
            "name": "CDS_EXPERIEMENTAL_COMPONENT_NAME",
            "module": "src/globals/internal/feature-flags.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/globals/internal/handle.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/globals/internal/radio-group-manager.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An object that manages radio groups in a document.\nThere must be only one instance for one document.",
          "name": "RadioGroupManager",
          "members": [
            {
              "kind": "field",
              "name": "_groups",
              "type": {
                "text": "{ [name: string]: Set<ManagedRadioButton> }"
              },
              "privacy": "private",
              "default": "{}",
              "description": "Radio groups, keyed by their names."
            },
            {
              "kind": "method",
              "name": "shouldBeFocusable",
              "parameters": [
                {
                  "name": "radio",
                  "type": {
                    "text": "ManagedRadioButton"
                  },
                  "description": "A radio button."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "getSortedGroup",
              "parameters": [
                {
                  "name": "radio",
                  "type": {
                    "text": "ManagedRadioButton"
                  },
                  "description": "A radio button."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "add",
              "parameters": [
                {
                  "name": "radio",
                  "type": {
                    "text": "ManagedRadioButton"
                  },
                  "description": "The radio button to manage."
                }
              ],
              "description": "Manages a radio button.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "delete",
              "parameters": [
                {
                  "name": "radio",
                  "type": {
                    "text": "ManagedRadioButton"
                  },
                  "description": "The radio button to unmanage."
                },
                {
                  "name": "name",
                  "default": "radio.name",
                  "type": {
                    "text": "string"
                  },
                  "description": "The old name of the radio button to unmanage."
                }
              ],
              "description": "Unmanages a radio button.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "select",
              "parameters": [
                {
                  "name": "radio",
                  "type": {
                    "text": "ManagedRadioButton"
                  },
                  "description": "The radio button to select."
                },
                {
                  "name": "readOnly",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "optional if radio button has readOnly."
                }
              ],
              "description": "Selects or focuses on a radio button."
            },
            {
              "kind": "method",
              "name": "navigate",
              "parameters": [
                {
                  "name": "radio",
                  "type": {
                    "text": "ManagedRadioButton"
                  },
                  "description": "The currently selected radio button."
                },
                {
                  "name": "direction",
                  "type": {
                    "text": "NAVIGATION_DIRECTION"
                  },
                  "description": "The direction to navigate to."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "_instances",
              "privacy": "private",
              "static": true,
              "default": "new WeakMap()",
              "description": "`RadioGroupManager` instances associated with documents."
            },
            {
              "kind": "method",
              "name": "get",
              "static": true,
              "parameters": [
                {
                  "name": "document",
                  "type": {
                    "text": "Document"
                  },
                  "description": "A document element."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RadioGroupManager",
            "module": "src/globals/internal/radio-group-manager.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/globals/internal/storybook-cdn.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "cdnJs",
          "parameters": [
            {
              "name": "{ components }"
            },
            {
              "description": "array of components to render",
              "name": "components",
              "type": {
                "text": "Array"
              }
            },
            {
              "description": "components to render",
              "name": "components.components"
            }
          ],
          "description": "This is the markdown block for JS via CDN"
        },
        {
          "kind": "function",
          "name": "cdnCss",
          "description": "This is the markdown block for CSS via CDN"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "cdnJs",
          "declaration": {
            "name": "cdnJs",
            "module": "src/globals/internal/storybook-cdn.ts"
          }
        },
        {
          "kind": "js",
          "name": "cdnCss",
          "declaration": {
            "name": "cdnCss",
            "module": "src/globals/internal/storybook-cdn.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/globals/mixins/focus.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "FocusMixin",
          "members": [
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM."
            }
          ],
          "parameters": [
            {
              "name": "Base",
              "type": {
                "text": "T"
              },
              "description": "The base class."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "FocusMixin",
            "module": "src/globals/mixins/focus.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/globals/mixins/form.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "FormMixin",
          "members": [
            {
              "kind": "field",
              "name": "_hFormdata",
              "type": {
                "text": "Handle | null"
              },
              "default": "null",
              "description": "The handle for `formdata` event listener on the containing form.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleFormdata",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `formdata` event."
            }
          ],
          "parameters": [
            {
              "name": "Base",
              "type": {
                "text": "T"
              },
              "description": "The base class."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "FormMixin",
            "module": "src/globals/mixins/form.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/globals/mixins/host-listener.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "HostListenerMixin",
          "members": [
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private"
            }
          ],
          "parameters": [
            {
              "name": "Base",
              "type": {
                "text": "T"
              },
              "description": "The base class."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "HostListenerMixin",
            "module": "src/globals/mixins/host-listener.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/globals/mixins/on.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "on",
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "args",
              "type": {
                "text": "any"
              }
            }
          ],
          "description": "Copyright IBM Corp. 2016, 2023\n\nThis source code is licensed under the Apache-2.0 license found in the\nLICENSE file in the root directory of this source tree."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "on",
            "module": "src/globals/mixins/on.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/globals/mixins/validity.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "ValidityMixin",
          "members": [
            {
              "kind": "method",
              "name": "_getValidityMessage",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string"
                  },
                  "description": "The form validation status."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_testValidity",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Checks if the value meets the constraints.",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "description": "`true` to show the UI of the invalid state."
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "`true` if the value is required."
            },
            {
              "kind": "field",
              "name": "requiredValidityMessage",
              "type": {
                "text": "string"
              },
              "description": "The special validity message for `required`."
            },
            {
              "kind": "field",
              "name": "validityMessage",
              "type": {
                "text": "string"
              },
              "description": "The validity message."
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The value."
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Checks if the value meets the constraints.\nFires cancelable `invalid` event if it doesn't.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "validityMessage",
                  "type": {
                    "text": "string"
                  },
                  "description": "The custom validity message"
                }
              ],
              "description": "Sets the given custom validity message."
            }
          ],
          "events": [
            {
              "name": "invalid",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "parameters": [
            {
              "name": "Base",
              "type": {
                "text": "T"
              },
              "description": "The base class."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ValidityMixin",
            "module": "src/globals/mixins/validity.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/globals/wrappers/createReactCustomElementType.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "createReactCustomElementType",
          "parameters": [
            {
              "name": "displayName",
              "type": {
                "text": "string"
              },
              "description": "The tag name of the custom element."
            },
            {
              "name": "descriptor",
              "type": {
                "text": "CustomElementPropsDescriptor"
              },
              "description": "A descriptor for a set of React props for attributes of a custom element."
            }
          ],
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "booleanSerializer",
          "parameters": [
            {
              "name": "value",
              "description": "A React prop value."
            }
          ],
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "numberSerializer",
          "parameters": [
            {
              "name": "value",
              "description": "A React prop value."
            }
          ],
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "objectSerializer",
          "parameters": [
            {
              "name": "value",
              "description": "A React prop value."
            }
          ],
          "return": {
            "type": {
              "text": ""
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "booleanSerializer",
          "declaration": {
            "name": "booleanSerializer",
            "module": "src/globals/wrappers/createReactCustomElementType.ts"
          }
        },
        {
          "kind": "js",
          "name": "numberSerializer",
          "declaration": {
            "name": "numberSerializer",
            "module": "src/globals/wrappers/createReactCustomElementType.ts"
          }
        },
        {
          "kind": "js",
          "name": "objectSerializer",
          "declaration": {
            "name": "objectSerializer",
            "module": "src/globals/wrappers/createReactCustomElementType.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "createReactCustomElementType",
            "module": "src/globals/wrappers/createReactCustomElementType.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/build/angular_steps.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/build/basic_steps.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/build/custom-style_steps.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/build/form-basic_steps.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/build/ie_steps.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/build/next_steps.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/build/react-ssr_steps.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/build/react_steps.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/build/redux-form_steps.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/build/rtl_steps.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/build/setup.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/build/theme-zoning_steps.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/build/vue_steps.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/build/webpack-server.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/ui/accordion_steps.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/ui/checkbox_steps.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/ui/code-snippet_steps.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/ui/combo-box_steps.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/ui/content-switcher_steps.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/ui/data-table_steps.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/ui/dropdown_steps.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/ui/modal_steps.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/ui/multi-select_steps.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/ui/notification_steps.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/ui/overflow-menu_steps.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/ui/setup.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/ui/tabs_steps.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/ui/teardown.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/ui/tile_steps.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "tests/integration/ui/tooltip_steps.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/angular/src/main.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/angular/src/polyfills.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/autoalign/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/next/components/CDSDropdownDemo.js",
      "declarations": [
        {
          "kind": "function",
          "name": "App"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "App",
            "module": "examples/codesandbox/next/components/CDSDropdownDemo.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/next/pages/index.js",
      "declarations": [
        {
          "kind": "function",
          "name": "RootPage"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "RootPage",
            "module": "examples/codesandbox/next/pages/index.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/react/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/react-ssr/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/rtl/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/vue/src/main.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/stories/data-table-basic-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "XLWithTwoLines"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/data-table/stories/data-table-basic-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "XLWithTwoLines",
          "declaration": {
            "name": "XLWithTwoLines",
            "module": "src/components/data-table/stories/data-table-basic-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/data-table/stories/data-table-basic-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/data-table/stories/data-table-basic-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/stories/data-table-batch-actions-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/data-table/stories/data-table-batch-actions-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/data-table/stories/data-table-batch-actions-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/data-table/stories/data-table-batch-actions-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/stories/data-table-dynamic-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/data-table/stories/data-table-dynamic-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/data-table/stories/data-table-dynamic-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/data-table/stories/data-table-dynamic-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/stories/data-table-expansion-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "BatchExpansion"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/data-table/stories/data-table-expansion-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "BatchExpansion",
          "declaration": {
            "name": "BatchExpansion",
            "module": "src/components/data-table/stories/data-table-expansion-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/data-table/stories/data-table-expansion-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/data-table/stories/data-table-expansion-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/stories/data-table-filtering-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/data-table/stories/data-table-filtering-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/data-table/stories/data-table-filtering-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/data-table/stories/data-table-filtering-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/stories/data-table-selection-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "WithRadioSelection"
        },
        {
          "kind": "function",
          "name": "WithSelectionAndSorting"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/data-table/stories/data-table-selection-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "WithRadioSelection",
          "declaration": {
            "name": "WithRadioSelection",
            "module": "src/components/data-table/stories/data-table-selection-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "WithSelectionAndSorting",
          "declaration": {
            "name": "WithSelectionAndSorting",
            "module": "src/components/data-table/stories/data-table-selection-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/data-table/stories/data-table-selection-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/data-table/stories/data-table-selection-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/stories/data-table-skeleton-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/data-table/stories/data-table-skeleton-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/data-table/stories/data-table-skeleton-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/data-table/stories/data-table-skeleton-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/stories/data-table-sorting-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/data-table/stories/data-table-sorting-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/data-table/stories/data-table-sorting-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/data-table/stories/data-table-sorting-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/data-table/stories/data-table-toolbar-story.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "Default"
        },
        {
          "kind": "function",
          "name": "PersistentToolbar"
        },
        {
          "kind": "function",
          "name": "SmallPersistentToolbar"
        },
        {
          "kind": "function",
          "name": "WithOverflowMenu"
        },
        {
          "kind": "function",
          "name": "Playground",
          "parameters": [
            {
              "name": "args"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Default",
          "declaration": {
            "name": "Default",
            "module": "src/components/data-table/stories/data-table-toolbar-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "PersistentToolbar",
          "declaration": {
            "name": "PersistentToolbar",
            "module": "src/components/data-table/stories/data-table-toolbar-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "SmallPersistentToolbar",
          "declaration": {
            "name": "SmallPersistentToolbar",
            "module": "src/components/data-table/stories/data-table-toolbar-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "WithOverflowMenu",
          "declaration": {
            "name": "WithOverflowMenu",
            "module": "src/components/data-table/stories/data-table-toolbar-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "Playground",
          "declaration": {
            "name": "Playground",
            "module": "src/components/data-table/stories/data-table-toolbar-story.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/components/data-table/stories/data-table-toolbar-story.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/file-uploader/stories/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/notification/stories/helper.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "kinds",
          "type": {
            "text": "object"
          },
          "default": "{ [`Error (${NOTIFICATION_KIND.ERROR})`]: NOTIFICATION_KIND.ERROR, [`Info (${NOTIFICATION_KIND.INFO})`]: NOTIFICATION_KIND.INFO, [`Info (${NOTIFICATION_KIND.INFO_SQUARE})`]: NOTIFICATION_KIND.INFO_SQUARE, [`Success (${NOTIFICATION_KIND.SUCCESS})`]: NOTIFICATION_KIND.SUCCESS, [`Warning (${NOTIFICATION_KIND.WARNING})`]: NOTIFICATION_KIND.WARNING, [`Warning Alt (${NOTIFICATION_KIND.WARNING_ALT})`]: NOTIFICATION_KIND.WARNING_ALT, }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "kinds",
            "module": "src/components/notification/stories/helper.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/number-input/stories/helpers.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "createProps",
          "parameters": [
            {
              "name": "{ boolean, number, select, text }"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "createProps",
            "module": "src/components/number-input/stories/helpers.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/text-input/stories/helpers.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "createProps",
          "parameters": [
            {
              "name": "{ boolean, textNonEmpty, select }"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "createProps",
            "module": "src/components/text-input/stories/helpers.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/textarea/stories/helpers.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "createProps",
          "parameters": [
            {
              "name": "{ boolean, textNullable, number }"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "createProps",
            "module": "src/components/textarea/stories/helpers.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/angular/src/app/app.component.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AppComponent"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AppComponent",
          "declaration": {
            "name": "AppComponent",
            "module": "examples/codesandbox/angular/src/app/app.component.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/angular/src/app/app.module.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AppModule"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AppModule",
          "declaration": {
            "name": "AppModule",
            "module": "examples/codesandbox/angular/src/app/app.module.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/angular/src/environments/environment.prod.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "environment",
          "type": {
            "text": "object"
          },
          "default": "{ production: true, }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "environment",
          "declaration": {
            "name": "environment",
            "module": "examples/codesandbox/angular/src/environments/environment.prod.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/angular/src/environments/environment.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "environment",
          "type": {
            "text": "object"
          },
          "default": "{ production: false, }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "environment",
          "declaration": {
            "name": "environment",
            "module": "examples/codesandbox/angular/src/environments/environment.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/form/basic/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/form/redux-form/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/react-ssr/src/views/App.js",
      "declarations": [
        {
          "kind": "function",
          "name": "App"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "App",
            "module": "examples/codesandbox/react-ssr/src/views/App.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/styling/custom-style/src/index.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MyDropdown",
          "superclass": {
            "name": "CDSDropdown",
            "package": "@carbon/web-components/es/components/dropdown/dropdown.js"
          },
          "tagName": "my-dropdown",
          "customElement": true,
          "members": [
            {
              "kind": "method",
              "name": "_getValidityMessage",
              "parameters": [
                {
                  "name": "state",
                  "type": {
                    "text": "string"
                  },
                  "description": "The form validation status."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_testValidity",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Checks if the value meets the constraints.",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "description": "`true` to show the UI of the invalid state.",
              "default": "false",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "description": "`true` if the value is required.",
              "default": "false",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "requiredValidityMessage",
              "type": {
                "text": "string"
              },
              "description": "The special validity message for `required`.",
              "default": "'Please fill out this field.'",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "validityMessage",
              "type": {
                "text": "string"
              },
              "description": "The validity message.",
              "default": "''",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The value.",
              "default": "''",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Checks if the value meets the constraints.\nFires cancelable `invalid` event if it doesn't.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "validityMessage",
                  "type": {
                    "text": "string"
                  },
                  "description": "The custom validity message"
                }
              ],
              "description": "Sets the given custom validity message.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handles",
              "type": {
                "text": "Set<Handle>"
              },
              "default": "new Set()",
              "description": "The list of handles managed by this mix-in.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hostListeners",
              "type": {
                "text": "{\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    }"
              },
              "static": true,
              "default": "{}",
              "description": "The map, keyed by method name, of event listeners that should be attached to host element or host document.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hFormdata",
              "type": {
                "text": "Handle | null"
              },
              "default": "null",
              "description": "The handle for `formdata` event listener on the containing form.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleFormdata",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `formdata` event.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses on the first focusable element in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_hasSlug",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "description": "`true` if there is a slug.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_activeDescendant",
              "type": {
                "text": "string | undefined"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_selectedItemContent",
              "type": {
                "text": "DocumentFragment | null"
              },
              "privacy": "protected",
              "default": "null",
              "description": "The content of the selected item.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_shouldTriggerBeFocusable",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "description": "`true` if the trigger button should be focusable.\nDerived class can set `false` to this if the trigger button contains another primary focusable element (e.g. `<input>`).",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_listBoxNode",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "protected",
              "description": "The list box `<div>` node.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_slotHelperTextNode",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "protected",
              "description": "The `<slot>` element for the helper text in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_slotTitleTextNode",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "protected",
              "description": "The `<slot>` element for the title text in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_selectionShouldChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "itemToSelect",
                  "optional": true,
                  "type": {
                    "text": "CDSDropdownItem"
                  },
                  "description": "A dropdown item. Absense of this argument means clearing selection."
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_selectionDidChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "itemToSelect",
                  "optional": true,
                  "type": {
                    "text": "CDSDropdownItem"
                  },
                  "description": "  A dropdown item.\n  Absense of this argument means clearing selection, which may be handled by a derived class."
                }
              ],
              "description": "A callback that runs after change in dropdown selection upon user interaction is confirmed.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleClickInner",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `click` event on the top-level element in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleKeydownInner",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handler for the `keydown` event on the top-level element in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleKeypressInner",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handler for the `keypress` event on the top-level element in the shadow DOM.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleFocusOut",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "FocusEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handles `blur` event handler on the document this element is in.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotchangeHelperText",
              "privacy": "protected",
              "description": "Handles `slotchange` event for the `<slot>` for helper text.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotchangeLabelText",
              "privacy": "protected",
              "description": "Handles `slotchange` event for the `<slot>` for label text.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlugSlotChange",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "{ target }",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles `slotchange` event.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleUserInitiatedSelectItem",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "CDSDropdownItem"
                  },
                  "description": "The dropdown item user wants to select. Absense of this argument means clearing selection."
                }
              ],
              "description": "Handles user-initiated selection of a dropdown item.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleUserInitiatedToggle",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "force",
                  "default": "!this.open",
                  "description": "If specified, forces the open state to the given one.",
                  "optional": true
                }
              ],
              "description": "Handles user-initiated toggling the open state.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_clearHighlight",
              "privacy": "protected",
              "description": "Clears the selection of dropdown items.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_navigate",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "number"
                  },
                  "description": "`-1` to navigate backward, `1` to navigate forward."
                }
              ],
              "description": "Navigate through dropdown items.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderPrecedingLabel",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderLabel",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderTitleLabel",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderFollowingLabel",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "'aria-label' of the ListBox component.\nSpecify a label to be read by screen readers on the container node",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "direction",
              "description": "Specify the direction of the dropdown. Can be either top or bottom.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this dropdown should be disabled.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "helperText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The helper text.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the title text should be hidden or not",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "invalidText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Message which is displayed if the value is invalid.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "titleText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Provide the title text that will be read by a screen reader when visiting this control",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Name for the dropdown in the `FormData`",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "`true` if this dropdown should be open.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the Dropdown is readonly",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Dropdown size.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "toggleLabelClosed",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `aria-label` attribute for the UI indicating the closed state.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "toggleLabelOpen",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The `aria-label` attribute for the UI indicating the open state.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Generic label that will be used as the textual representation of what this field is for",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "`true` if this dropdown should use the inline UI variant.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "warn",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Specify whether the control is currently in warning state",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "warnText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Provide the text that is displayed when the control is in warning state",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "shouldUpdate",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "_changedProperties"
                }
              ],
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "_classes",
              "privacy": "protected",
              "description": "The CSS class list for dropdown listbox",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "TRIGGER_KEYS",
              "static": true,
              "default": "new Set([' ', 'Enter'])",
              "description": "Symbols of keys that triggers opening/closing menu and selecting/deselecting menu item.",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectorItemHighlighted",
              "static": true,
              "description": "A selector that will return highlighted items.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectorItem",
              "static": true,
              "description": "A selector that will return dropdown items.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectorItemSelected",
              "static": true,
              "description": "A selector that will return selected items.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "eventBeforeSelect",
              "static": true,
              "description": "The name of the custom event fired before a dropdown item is selected upon a user gesture.\nCancellation of this event stops changing the user-initiated selection.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "eventSelect",
              "static": true,
              "description": "The name of the custom event fired after a a dropdown item is selected upon a user gesture.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "eventBeforeToggle",
              "static": true,
              "description": "The name of the custom event fired before this dropdown item is being toggled upon a user gesture.\nCancellation of this event stops the user-initiated action of toggling this dropdown item.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "eventToggle",
              "static": true,
              "description": "The name of the custom event fired after this dropdown item is toggled upon a user gesture.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "slugItem",
              "static": true,
              "description": "A selector that will return the slug item.",
              "readonly": true,
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "getAction",
              "static": true,
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            }
          ],
          "events": [
            {
              "name": "invalid",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "name": "eventBeforeToggle",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "name": "eventToggle",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "description": "The custom event fired before a dropdown item is selected upon a user gesture. Cancellation of this event stops changing the user-initiated selection.",
              "name": "cds-dropdown-beingselected",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "description": "The custom event fired before the open state of this dropdown is toggled upon a user gesture. Cancellation of this event stops the user-initiated toggling.",
              "name": "cds-dropdown-beingtoggled",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "description": "The custom event fired after a dropdown item is selected upon a user gesture.",
              "name": "cds-dropdown-selected",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "description": "The custom event fired after the open state of this dropdown is toggled upon a user gesture.",
              "name": "cds-dropdown-toggled",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            }
          ],
          "cssParts": [
            {
              "description": "The label text.",
              "name": "label-text",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "description": "The helper text.",
              "name": "helper-text",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "description": "The trigger button.",
              "name": "trigger-button",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "description": "The menu body.",
              "name": "menu-body",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            },
            {
              "description": "The validity message.",
              "name": "validity-message",
              "inheritedFrom": {
                "name": "CDSDropdown",
                "module": "src/components/dropdown/dropdown.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "my-dropdown",
          "declaration": {
            "name": "MyDropdown",
            "module": "examples/codesandbox/styling/custom-style/src/index.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/styling/theme-zoning/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/accordion/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/ai-skeleton/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/breadcrumb/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/button/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/chat-button/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/checkbox/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/code-snippet/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/combo-box/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/content-switcher/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/copy-button/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/data-table/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/date-picker/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/dropdown/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/file-uploader/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/form-group/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/icon-button/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/inline-loading/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/input/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/layer/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/link/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/list/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/loading/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/modal/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/multi-select/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/notification/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/number-input/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/overflow-menu/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/pagination/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/popover/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/progress-bar/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/progress-indicator/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/radio-button/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/search/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/select/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/side-panel/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/skeleton-icon/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/skeleton-placeholder/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/skeleton-text/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/skip-to-content/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/slider/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/slug/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/stack/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/structured-list/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/tabs/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/tag/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/tearsheet/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/textarea/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/tile/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/toggle/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/toggletip/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/tooltip/src/index.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "examples/codesandbox/basic/components/ui-shell/src/index.js",
      "declarations": [],
      "exports": []
    }
  ]
}
